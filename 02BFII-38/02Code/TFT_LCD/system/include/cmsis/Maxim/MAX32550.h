/****************************************************************************************************//**
 *
 *  CMSIS-SVD SVD Consistency Checker / Header File Generator V3.2.17
 *  Copyright (C) 2010 - 2016 ARM Ltd and ARM Germany GmbH. All rights reserved.
 *
 * @brief    CMSIS HeaderFile
 *
 * @date     13. June 2016
 *
 * @note     Generated with SVDConv V3.2.17 on Monday, 13.06.2016 17:50:53
 *
 *           from CMSIS SVD File 'max32550.svd',
 *           created on Sunday, 12.06.2016 21:02:38, last modified on Monday, 13.06.2016 15:50:39
 *
 *           Command line generation:
 *               SVDConv.exe max32550.svd --generate=header --fields=macro --fields=enum
 *
 *           Correction (made by post_svdconv.sh script v1.0):
 *
 *           1/ _Pos and _Msk in the enum declaration is inverted so manual change after generation.
 *           2/   bit is not continu for PRES n bits ADD
 *					TMRn_CN_PRES_div256 = 8,
 * 					TMRn_CN_PRES_div512 = 9,
 * 					TMRn_CN_PRES_div1024 = 10,
 * 					TMRn_CN_PRES_div2048 = 11,
 * 					TMRn_CN_PRES_div4096 = 12,
 *           3/ Change GPIOn to GPIO0 / GPIOn_BASE to GPIO0_BASE
 *           4/ Change SPIn  to SPI0  / SPIn_BASE  to SPI0_BASE
 *           5/ Change TMRn  to TMR0  / TMRn_BASE  to TMR0_BASE
 *           6/ Change UARTn to UART0 / UARTn_BASE to UART0_BASE
 *           7/ Add DMAn_Type type and modify DMAC_Type in order to have unique Resiter structure for
 *              each DMA channel. Update Define, Enum according this modification
 *           8/ Merge SPIn_DMA_REG_TX_FIFO_..._Type and SPIn_DMA_REG_TX_FIFO_..._Type into unique enum
 *              called SPIn_DMA_REG_FIFO_..._Type
 *
 *******************************************************************************************************/

/*
  
 */


/** @defgroup MaximCMSIS CMSIS
  * 
  */
  
  
/** @defgroup MaximIntegrated Maxim Integrated
  * @ingroup MaximCMSIS
  * @{
  */


/** @addtogroup MAX32550
  * @{
  */


#ifndef MAX32550_H
#define MAX32550_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M4 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                      and No Match                                                             */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                      related Fault                                                            */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ==========================================  MAX32550 Specific Interrupt Numbers  ========================================== */
  Watchdog_Timer_IRQn       =   1,              /*!< 1  Watchdog Timer interrupt                                               */
  USB_IRQn                  =   2,              /*!< 2  USB interrupt                                                          */
  RTC_IRQn                  =   3,              /*!< 3  RTC interrupt                                                          */
  TRNG_IRQn                 =   4,              /*!< 4  TRNG interrupt                                                         */
  Timer0_IRQn               =   5,              /*!< 5  Timer 0 interrupt                                                      */
  Timer1_IRQn               =   6,              /*!< 6  Timer 1 interrupt                                                      */
  Timer2_IRQn               =   7,              /*!< 7  Timer 2 interrupt                                                      */
  Timer3_IRQn               =   8,              /*!< 8  Timer 3 interrupt                                                      */
  Timer4_IRQn               =   9,              /*!< 9  Timer 4 interrupt                                                      */
  Timer5_IRQn               =  10,              /*!< 10 Timer 5 interrupt                                                      */
  Smart_Card_IRQn           =  11,              /*!< 11 Smart Card interrupt                                                   */
  LCD_TFT_IRQn              =  12,              /*!< 12 Mono LCD / TFT interrupt                                               */
  I2C_IRQn                  =  13,              /*!< 13 I2C interrupt                                                          */
  UART0_IRQn                =  14,              /*!< 14 UART0 interrupt                                                        */
  UART1_IRQn                =  15,              /*!< 15 UART1 interrupt                                                        */
  SPI0_IRQn                 =  16,              /*!< 16 SPI0 interrupt                                                         */
  SPI1_IRQn                 =  17,              /*!< 17 SPI1 interrupt                                                         */
  SPI2_IRQn                 =  18,              /*!< 18 SPI2 interrupt                                                         */
  Secure_Keypad_IRQn        =  19,              /*!< 19 Secure Keypad interrupt                                                */
  ADC_IRQn                  =  20,              /*!< 20 ADC interrupt                                                          */
  DAC_IRQn                  =  21,              /*!< 21 DAC interrupt                                                          */
  MSR_IRQn                  =  22,              /*!< 22 MSR interrupt                                                          */
  Flash_Controller_IRQn     =  23,              /*!< 23 Flash Controller interrupt                                             */
  GPIO0_IRQn                =  24,              /*!< 24 GPIO0 interrupt                                                        */
  GPIO1_IRQn                =  25,              /*!< 25 GPIO1 interrupt                                                        */
  GPIO2_IRQn                =  26,              /*!< 26 GPIO2 interrupt                                                        */
  Crypto_Engine_IRQn        =  27,              /*!< 27 Crypto Engine interrupt                                                */
  DMA0_IRQn                 =  28,              /*!< 28 DMA0 interrupt                                                         */
  DMA1_IRQn                 =  29,              /*!< 29 DMA1 interrupt                                                         */
  DMA2_IRQn                 =  30,              /*!< 30 DMA2 interrupt                                                         */
  DMA3_IRQn                 =  31               /*!< 31 DMA3 interrupt                                                         */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M4 Processor and Core Peripherals  =========================== */
#define __CM3_REV                 0x0201        /*!< CM3 Core Revision                                                         */
#define __MPU_PRESENT                  1        /*!< MPU present or not                                                        */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm3.h"                           /*!< ARM Cortex-M4 processor and core peripherals                              */
#include "system_MAX32550.h"                    /*!< MAX32550 System                                                           */


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined(__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined(__ICCARM__)
  #pragma language=extended
#elif defined(__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined(__TMS470__)
/* anonymous unions are enabled by default */
#elif defined(__TASKING__)
  #pragma warning 586
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            GCR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Global Control Registers (GCR)
  */

typedef struct {                                /*!< (@ 0x40000000) GCR Structure                                              */
  __IO uint32_t   SCON;                         /*!< (@ 0x00000000) System Control                                             */
  __IO uint32_t   RSTR;                         /*!< (@ 0x00000004) Reset                                                      */
  __IO uint32_t   CLKCN;                        /*!< (@ 0x00000008) Clock Control                                              */
  __IO uint32_t   PM;                           /*!< (@ 0x0000000C) Power Management                                           */
  __IO uint32_t   PLL0CN;                       /*!< (@ 0x00000010) PLL Control                                                */
  __IO uint32_t   PLL1CN;                       /*!< (@ 0x00000014) PLL Control                                                */
  __IO uint32_t   PCKDIV;                       /*!< (@ 0x00000018) Peripheral Clock Divider                                   */
  __I  uint32_t   RESERVED[2];
  __IO uint32_t   PERCKCN;                      /*!< (@ 0x00000024) Peripheral Clock Disable                                   */
  __I  uint32_t   RESERVED1;
  __IO uint32_t   MEMZCN;                       /*!< (@ 0x0000002C) Memory Zeroize Control                                     */
  __I  uint32_t   RESERVED2;
  __IO uint32_t   SCCK;                         /*!< (@ 0x00000034) Smart Card Clock Control                                   */
} GCR_Type;                                     /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                            SIR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief System Initialization Registers (SIR)
  */

typedef struct {                                /*!< (@ 0x40000400) SIR Structure                                              */
  __I  uint32_t   SISTAT;                       /*!< (@ 0x00000000) System Initialization Status Register                      */
  __I  uint32_t   ERRADDR;                      /*!< (@ 0x00000004) Read-only field set by the SIB block if a CRC
                                                                    error occurs during the read of the OTP
                                                                    memory. Contains the failing address in
                                                                    OTP memory (when CRCERR equals 1).                         */
} SIR_Type;                                     /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                            ICC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Instruction Cache Controller Registers (ICC)
  */

typedef struct {                                /*!< (@ 0x4002A000) ICC Structure                                              */
  __I  uint32_t   CACHE_ID;                     /*!< (@ 0x00000000) Cache ID Register                                          */
  __I  uint32_t   MEMCFG;                       /*!< (@ 0x00000004) Memory Configuration Register                              */
  __I  uint32_t   RESERVED[62];
  __IO uint32_t   CACHE_CTRL;                   /*!< (@ 0x00000100) Cache Control and Status Register                          */
  __I  uint32_t   RESERVED1[383];
  __IO uint32_t   INVALIDATE;                   /*!< (@ 0x00000700) Invalidate All Registers                                   */
} ICC_Type;                                     /*!< Size = 1796 (0x704)                                                       */



/* =========================================================================================================================== */
/* ================                                           GPIOn                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Individual I/O for Port 0 (GPIOn)
  */

typedef struct {                                /*!< (@ 0x40008000) GPIOn Structure                                            */
  __IO uint32_t   EN;                           /*!< (@ 0x00000000) GPIO Function Enable Register. Each bit controls
                                                                    the GPIO_EN setting for one GPIO pin on
                                                                    the associated port.                                       */
  __I  uint32_t   RESERVED[2];
  __IO uint32_t   OUT_EN;                       /*!< (@ 0x0000000C) GPIO Output Enable Register. Each bit controls
                                                                    the GPIO_OUT_EN setting for one GPIO pin
                                                                    in the associated port.                                    */
  __I  uint32_t   RESERVED1[2];
  __IO uint32_t   OUT;                          /*!< (@ 0x00000018) GPIO Output Register. Each bit controls the GPIO_OUT
                                                                    setting for one pin in the associated port.
                                                                    This register can be written either directly,
                                                                    or by using the GPIO_OUT_SET and GPIO_OUT_CLR
                                                                    registers.                                                 */
  __O  uint32_t   OUT_SET;                      /*!< (@ 0x0000001C) GPIO Output Set. Writing a 1 to one or more bits
                                                                    in this register sets the bits in the same
                                                                    positions in GPIO_OUT to 1, without affecting
                                                                    other bits in that register.                               */
  __O  uint32_t   OUT_CLR;                      /*!< (@ 0x00000020) GPIO Output Clear. Writing a 1 to one or more
                                                                    bits in this register clears the bits in
                                                                    the same positions in GPIO_OUT to 0, without
                                                                    affecting other bits in that register.                     */
  __I  uint32_t   IN;                           /*!< (@ 0x00000024) GPIO Input Register. Read-only register to read
                                                                    from the logic states of the GPIO pins
                                                                    on this port.                                              */
  __IO uint32_t   INT_MOD;                      /*!< (@ 0x00000028) GPIO Interrupt Mode Register. Each bit in this
                                                                    register controls the interrupt mode setting
                                                                    for the associated GPIO pin on this port.                  */
  __IO uint32_t   INT_POL;                      /*!< (@ 0x0000002C) GPIO Interrupt Polarity Register. Each bit in
                                                                    this register controls the interrupt polarity
                                                                    setting for one GPIO pin in the associated
                                                                    port.                                                      */
  __I  uint32_t   RESERVED2;
  __IO uint32_t   INT_EN;                       /*!< (@ 0x00000034) GPIO Interrupt Enable Register. Each bit in this
                                                                    register controls the GPIO interrupt enable
                                                                    for the associated pin on the GPIO port.                   */
  __O  uint32_t   INT_EN_SET;                   /*!< (@ 0x00000038) GPIO Interrupt Enable Set. Writing a 1 to one
                                                                    or more bits in this register sets the
                                                                    bits in the same positions in GPIO_INT_EN
                                                                    to 1, without affecting other bits in that
                                                                    register.                                                  */
  __O  uint32_t   INT_EN_CLR;                   /*!< (@ 0x0000003C) GPIO Interrupt Enable Clear. Writing a 1 to one
                                                                    or more bits in this register clears the
                                                                    bits in the same positions in GPIO_INT_EN
                                                                    to 0, without affecting other bits in that
                                                                    register.                                                  */
  __I  uint32_t   INT_STAT;                     /*!< (@ 0x00000040) GPIO Interrupt Status Register. Each bit in this
                                                                    register contains the pending interrupt
                                                                    status for the associated GPIO pin in this
                                                                    port.                                                      */
  __I  uint32_t   RESERVED3;
  __O  uint32_t   INT_CLR;                      /*!< (@ 0x00000048) GPIO Interrupt Status Clear. Writing a 1 to one
                                                                    or more bits in this register clears the
                                                                    bits in the same positions in GPIO_INT_STAT
                                                                    to 0, without affecting other bits in that
                                                                    register.                                                  */
  __IO uint32_t   WAKE_EN;                      /*!< (@ 0x0000004C) GPIO Wake Enable Register. Each bit in this register
                                                                    controls the PMU wakeup enable for the
                                                                    associated GPIO pin in this port.                          */
  __I  uint32_t   RESERVED4[3];
  __IO uint32_t   INT_DUAL_EDGE;                /*!< (@ 0x0000005C) GPIO Interrupt Dual Edge Mode Register. Each
                                                                    bit in this register selects dual edge
                                                                    mode for the associated GPIO pin in this
                                                                    port.                                                      */
  __IO uint32_t   PAD_CFG1;                     /*!< (@ 0x00000060) GPIO Input Mode Config 1. Each bit in this register
                                                                    enables the weak pull-up for the associated
                                                                    GPIO pin in this port.                                     */
  __IO uint32_t   PAD_CFG2;                     /*!< (@ 0x00000064) GPIO Input Mode Config 2. Each bit in this register
                                                                    enables the weak pull-down for the associated
                                                                    GPIO pin in this port.                                     */
  __IO uint32_t   EN1;                          /*!< (@ 0x00000068) GPIO Alternate Function Enable Register. Each
                                                                    bit in this register selects between primary/secondary
                                                                    functions for the associated GPIO pin in
                                                                    this port.                                                 */
  __I  uint32_t   RESERVED5[17];
  __IO uint32_t   DS;                           /*!< (@ 0x000000B0) GPIO Drive Strength Register. Each bit in this
                                                                    register selects the drive strength for
                                                                    the associated GPIO pin in this port. Refer
                                                                    to the Datasheet for sink/source current
                                                                    of GPIO pins in each mode.                                 */
} GPIOn_Type;                                   /*!< Size = 180 (0xb4)                                                         */



/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog to Digital Converter (ADC)
  */

typedef struct {                                /*!< (@ 0x40034000) ADC Structure                                              */
  __IO uint32_t   CN;                           /*!< (@ 0x00000000) ADC Control Register                                       */
  __IO uint32_t   ST;                           /*!< (@ 0x00000004) ADC Status Register                                        */
  __I  uint32_t   DATA;                         /*!< (@ 0x00000008) ADC Data Register. When read, this register returns
                                                                    the ADC conversion data. The ADC conversion
                                                                    result will be aligned according to the
                                                                    ADALGN setting.                                            */
  __IO uint32_t   LT0;                          /*!< (@ 0x0000000C) ADC channel Low Threshold Value. When an ADC
                                                                    conversion result of channel is less than
                                                                    ADC Low Threshold value (ADLT), ADLTIF
                                                                    flag will be set.                                          */
  __IO uint32_t   LT1;                          /*!< (@ 0x00000010) ADC channel Low Threshold Value. When an ADC
                                                                    conversion result of channel is less than
                                                                    ADC Low Threshold value (ADLT), ADLTIF
                                                                    flag will be set.                                          */
  __IO uint32_t   LT2;                          /*!< (@ 0x00000014) ADC channel Low Threshold Value. When an ADC
                                                                    conversion result of channel is less than
                                                                    ADC Low Threshold value (ADLT), ADLTIF
                                                                    flag will be set.                                          */
  __IO uint32_t   HT0;                          /*!< (@ 0x00000018) ADC channel High Threshold Value. When an ADC
                                                                    conversion result of channel is greater
                                                                    than ADC High Threshold value (ADHT), ADHTIF
                                                                    flag will be set.                                          */
  __IO uint32_t   HT1;                          /*!< (@ 0x0000001C) ADC channel High Threshold Value. When an ADC
                                                                    conversion result of channel is greater
                                                                    than ADC High Threshold value (ADHT), ADHTIF
                                                                    flag will be set.                                          */
  __IO uint32_t   HT2;                          /*!< (@ 0x00000020) ADC channel High Threshold Value. When an ADC
                                                                    conversion result of channel is greater
                                                                    than ADC High Threshold value (ADHT), ADHTIF
                                                                    flag will be set.                                          */
} ADC_Type;                                     /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                          CRYPTO                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief The Cryptographic Accelerator used to assist the computationally intensive operations of several common algorithms. (CRYPTO)
  */

typedef struct {                                /*!< (@ 0x40001000) CRYPTO Structure                                           */
  __IO uint32_t   CRYPTO_CTRL;                  /*!< (@ 0x00000000) Crypto Control Register                                    */
  __IO uint32_t   CIPHER_CTRL;                  /*!< (@ 0x00000004) Cipher Control Register                                    */
  __IO uint32_t   HASH_CTRL;                    /*!< (@ 0x00000008) HASH Control Register                                      */
  __IO uint32_t   CRC_CTRL;                     /*!< (@ 0x0000000C) CRC Control Register                                       */
  __IO uint32_t   DMA_SRC;                      /*!< (@ 0x00000010) Crypto DMA Source Address                                  */
  __IO uint32_t   DMA_DEST;                     /*!< (@ 0x00000014) Crypto DMA Destination Address                             */
  __IO uint32_t   DMA_CNT;                      /*!< (@ 0x00000018) Crypto DMA Byte Count                                      */
  __IO uint32_t   MAA_CTRL;                     /*!< (@ 0x0000001C) MAA Control Register                                       */
  __O  uint32_t   CRYPTO_DIN_0;                 /*!< (@ 0x00000020) Crypto Data Input. Data input can be written
                                                                    to this register instead of using the DMA.
                                                                    This register writes to the FIFO. This
                                                                    register occupies four successive words
                                                                    to allow the use of multi-store instructions.
                                                                    Words can be written to any location, they
                                                                    will be placed in the FIFO in the order
                                                                    they are written. The endian swap input
                                                                    control bit affects this register.                         */
  __O  uint32_t   CRYPTO_DIN_1;                 /*!< (@ 0x00000024) Crypto Data Input. Data input can be written
                                                                    to this register instead of using the DMA.
                                                                    This register writes to the FIFO. This
                                                                    register occupies four successive words
                                                                    to allow the use of multi-store instructions.
                                                                    Words can be written to any location, they
                                                                    will be placed in the FIFO in the order
                                                                    they are written. The endian swap input
                                                                    control bit affects this register.                         */
  __O  uint32_t   CRYPTO_DIN_2;                 /*!< (@ 0x00000028) Crypto Data Input. Data input can be written
                                                                    to this register instead of using the DMA.
                                                                    This register writes to the FIFO. This
                                                                    register occupies four successive words
                                                                    to allow the use of multi-store instructions.
                                                                    Words can be written to any location, they
                                                                    will be placed in the FIFO in the order
                                                                    they are written. The endian swap input
                                                                    control bit affects this register.                         */
  __O  uint32_t   CRYPTO_DIN_3;                 /*!< (@ 0x0000002C) Crypto Data Input. Data input can be written
                                                                    to this register instead of using the DMA.
                                                                    This register writes to the FIFO. This
                                                                    register occupies four successive words
                                                                    to allow the use of multi-store instructions.
                                                                    Words can be written to any location, they
                                                                    will be placed in the FIFO in the order
                                                                    they are written. The endian swap input
                                                                    control bit affects this register.                         */
  __I  uint32_t   CRYPTO_DOUT_0;                /*!< (@ 0x00000030) Crypto Data Output. Resulting data from cipher
                                                                    calculation. Data is placed in the lower
                                                                    words of these four registers depending
                                                                    on the algorithm. For block cipher modes,
                                                                    this register holds the result of most
                                                                    recent encryption or decryption operation.
                                                                    These registers are affected by the endian
                                                                    swap bits.                                                 */
  __I  uint32_t   CRYPTO_DOUT_1;                /*!< (@ 0x00000034) Crypto Data Output. Resulting data from cipher
                                                                    calculation. Data is placed in the lower
                                                                    words of these four registers depending
                                                                    on the algorithm. For block cipher modes,
                                                                    this register holds the result of most
                                                                    recent encryption or decryption operation.
                                                                    These registers are affected by the endian
                                                                    swap bits.                                                 */
  __I  uint32_t   CRYPTO_DOUT_2;                /*!< (@ 0x00000038) Crypto Data Output. Resulting data from cipher
                                                                    calculation. Data is placed in the lower
                                                                    words of these four registers depending
                                                                    on the algorithm. For block cipher modes,
                                                                    this register holds the result of most
                                                                    recent encryption or decryption operation.
                                                                    These registers are affected by the endian
                                                                    swap bits.                                                 */
  __I  uint32_t   CRYPTO_DOUT_3;                /*!< (@ 0x0000003C) Crypto Data Output. Resulting data from cipher
                                                                    calculation. Data is placed in the lower
                                                                    words of these four registers depending
                                                                    on the algorithm. For block cipher modes,
                                                                    this register holds the result of most
                                                                    recent encryption or decryption operation.
                                                                    These registers are affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   CRC_POLY;                     /*!< (@ 0x00000040) CRC Polynomial. The polynomial to be used for
                                                                    Galois Field calculations (CRC or LFSR)
                                                                    should be written to this register. This
                                                                    register is affected by the MSB control
                                                                    bit.                                                       */
  __IO uint32_t   CRC_VAL;                      /*!< (@ 0x00000044) CRC Value. This is the state for the Galois Field.
                                                                    This register holds the result of a CRC
                                                                    calculation or the current state of the
                                                                    LFSR. This register is affected by the
                                                                    MSB control bit.                                           */
  __I  uint32_t   CRC_PRNG;                     /*!< (@ 0x00000048) Pseudo Random Value. Output of the Galois Field
                                                                    shift register. This holds the resulting
                                                                    pseudo-random number if entropy is disabled
                                                                    or true random number if entropy is enabled.               */
  __IO uint32_t   HAM_ECC;                      /*!< (@ 0x0000004C) Hamming ECC Register                                       */
  __IO uint32_t   CIPHER_INIT_0;                /*!< (@ 0x00000050) Initial Vector. For block cipher operations that
                                                                    use CBC, CFB, OFB, or CNTR modes, this
                                                                    register holds the initial value. This
                                                                    register is updated with each encryption
                                                                    or decryption operation. This register
                                                                    is affected by the endian swap bits.                       */
  __IO uint32_t   CIPHER_INIT_1;                /*!< (@ 0x00000054) Initial Vector. For block cipher operations that
                                                                    use CBC, CFB, OFB, or CNTR modes, this
                                                                    register holds the initial value. This
                                                                    register is updated with each encryption
                                                                    or decryption operation. This register
                                                                    is affected by the endian swap bits.                       */
  __IO uint32_t   CIPHER_INIT_2;                /*!< (@ 0x00000058) Initial Vector. For block cipher operations that
                                                                    use CBC, CFB, OFB, or CNTR modes, this
                                                                    register holds the initial value. This
                                                                    register is updated with each encryption
                                                                    or decryption operation. This register
                                                                    is affected by the endian swap bits.                       */
  __IO uint32_t   CIPHER_INIT_3;                /*!< (@ 0x0000005C) Initial Vector. For block cipher operations that
                                                                    use CBC, CFB, OFB, or CNTR modes, this
                                                                    register holds the initial value. This
                                                                    register is updated with each encryption
                                                                    or decryption operation. This register
                                                                    is affected by the endian swap bits.                       */
  __O  uint32_t   CIPHER_KEY_0;                 /*!< (@ 0x00000060) Cipher Key. This register holds the key used
                                                                    for block cipher operations. The lower
                                                                    words are used for block ciphers that use
                                                                    shorter key lengths. This register is affected
                                                                    by the endian swap input control bits.                     */
  __O  uint32_t   CIPHER_KEY_1;                 /*!< (@ 0x00000064) Cipher Key. This register holds the key used
                                                                    for block cipher operations. The lower
                                                                    words are used for block ciphers that use
                                                                    shorter key lengths. This register is affected
                                                                    by the endian swap input control bits.                     */
  __O  uint32_t   CIPHER_KEY_2;                 /*!< (@ 0x00000068) Cipher Key. This register holds the key used
                                                                    for block cipher operations. The lower
                                                                    words are used for block ciphers that use
                                                                    shorter key lengths. This register is affected
                                                                    by the endian swap input control bits.                     */
  __O  uint32_t   CIPHER_KEY_3;                 /*!< (@ 0x0000006C) Cipher Key. This register holds the key used
                                                                    for block cipher operations. The lower
                                                                    words are used for block ciphers that use
                                                                    shorter key lengths. This register is affected
                                                                    by the endian swap input control bits.                     */
  __O  uint32_t   CIPHER_KEY_4;                 /*!< (@ 0x00000070) Cipher Key. This register holds the key used
                                                                    for block cipher operations. The lower
                                                                    words are used for block ciphers that use
                                                                    shorter key lengths. This register is affected
                                                                    by the endian swap input control bits.                     */
  __O  uint32_t   CIPHER_KEY_5;                 /*!< (@ 0x00000074) Cipher Key. This register holds the key used
                                                                    for block cipher operations. The lower
                                                                    words are used for block ciphers that use
                                                                    shorter key lengths. This register is affected
                                                                    by the endian swap input control bits.                     */
  __O  uint32_t   CIPHER_KEY_6;                 /*!< (@ 0x00000078) Cipher Key. This register holds the key used
                                                                    for block cipher operations. The lower
                                                                    words are used for block ciphers that use
                                                                    shorter key lengths. This register is affected
                                                                    by the endian swap input control bits.                     */
  __O  uint32_t   CIPHER_KEY_7;                 /*!< (@ 0x0000007C) Cipher Key. This register holds the key used
                                                                    for block cipher operations. The lower
                                                                    words are used for block ciphers that use
                                                                    shorter key lengths. This register is affected
                                                                    by the endian swap input control bits.                     */
  __IO uint32_t   HASH_DIGEST_0;                /*!< (@ 0x00000080) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_DIGEST_1;                /*!< (@ 0x00000084) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_DIGEST_2;                /*!< (@ 0x00000088) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_DIGEST_3;                /*!< (@ 0x0000008C) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_DIGEST_4;                /*!< (@ 0x00000090) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_DIGEST_5;                /*!< (@ 0x00000094) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_DIGEST_6;                /*!< (@ 0x00000098) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_DIGEST_7;                /*!< (@ 0x0000009C) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_DIGEST_8;                /*!< (@ 0x000000A0) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_DIGEST_9;                /*!< (@ 0x000000A4) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_DIGEST_10;               /*!< (@ 0x000000A8) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_DIGEST_11;               /*!< (@ 0x000000AC) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_DIGEST_12;               /*!< (@ 0x000000B0) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_DIGEST_13;               /*!< (@ 0x000000B4) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_DIGEST_14;               /*!< (@ 0x000000B8) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_DIGEST_15;               /*!< (@ 0x000000BC) This register holds the calculated hash value.
                                                                    This register is affected by the endian
                                                                    swap bits.                                                 */
  __IO uint32_t   HASH_MSG_SZ_0;                /*!< (@ 0x000000C0) Message Size. This register holds the lowest
                                                                    32-bit of message size in bytes.                           */
  __IO uint32_t   HASH_MSG_SZ_1;                /*!< (@ 0x000000C4) Message Size. This register holds the lowest
                                                                    32-bit of message size in bytes.                           */
  __IO uint32_t   HASH_MSG_SZ_2;                /*!< (@ 0x000000C8) Message Size. This register holds the lowest
                                                                    32-bit of message size in bytes.                           */
  __IO uint32_t   HASH_MSG_SZ_3;                /*!< (@ 0x000000CC) Message Size. This register holds the lowest
                                                                    32-bit of message size in bytes.                           */
  __IO uint32_t   MAA_MAWS;                     /*!< (@ 0x000000D0) MAA Word Size. This register defines the number
                                                                    of bits for a modular operation. This register
                                                                    must be set to a valid value prior to the
                                                                    MAA operation start. Valid values are from
                                                                    1 to 2048. Invalid values are ignored and
                                                                    will not initiate a MAA operation.                         */
} CRYPTO_Type;                                  /*!< Size = 212 (0xd4)                                                         */



/* =========================================================================================================================== */
/* ================                                            DAC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Digital to Analog Converter (DAC)
  */

typedef struct {                                /*!< (@ 0x40038000) DAC Structure                                              */
  __IO uint32_t   CTRL;                         /*!< (@ 0x00000000) DAC Control Register                                       */
  __IO uint32_t   RATE;                         /*!< (@ 0x00000004) DAC Output Rate and Sample Control                         */
  __IO uint32_t   INT;                          /*!< (@ 0x00000008) DAC Interrupt Register                                     */
  __IO uint32_t   REG;                          /*!< (@ 0x0000000C) DAC Input Register                                         */
} DAC_Type;                                     /*!< Size = 16 (0x10)                                                          */

/* =========================================================================================================================== */
/* ================                                         DAC_FIFO                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Digital to Analog Converter FIFO (DAC_FIFO)
  */

typedef struct {                                /*!< (@ 0x400B8000) DAC_FIFO Structure                                         */
  __IO uint32_t   REG;                          /*!< (@ 0x00000000) DAC FIFO Register                                          */
} DAC_FIFO_Type;                                /*!< Size = 4 (0x4)                                                            */


/* =========================================================================================================================== */
/* ================                                           DMAC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA Controller Fully programmable, chaining capable DMA channels (DMAC)
  */

typedef struct { 
  __IO uint32_t   DMAn_CFG;                     /*!< (@ 0x00000000) DMA Channel Configuration Register                         */
  __IO uint32_t   DMAn_ST;                      /*!< (@ 0x00000004) DMA Channel Status Register                                */
  __IO uint32_t   DMAn_SRC;                     /*!< (@ 0x00000008) Source Device Address. If SRCINC=1, the counter
                                                                    bits are incremented by 1,2, or 4, depending
                                                                    on the data width of each AHB cycle. For
                                                                    peripheral transfers, some or all of the
                                                                    actual address bits are fixed. If SRCINC=0,
                                                                    this register remains constant. In the
                                                                    case where a count-to-zero condition occurs
                                                                    while RLDEN=1, the register is reloaded
                                                                    with the contents of DMA_SRC_RLD.                          */
  __IO uint32_t   DMAn_DST;                     /*!< (@ 0x0000000C) Destination Device Address. For peripheral transfers,
                                                                    some or all of the actual address bits
                                                                    are fixed. If DSTINC=1, this register is
                                                                    incremented on every AHB write out of the
                                                                    DMA FIFO. They are incremented by 1, 2,
                                                                    or 4, depending on the data width of each
                                                                    AHB cycle. In the case where a count-to-zero
                                                                    condition occurs while RLDEN=1, the register
                                                                    is reloaded with DMA_DST_RLD.                              */
  __IO uint32_t   DMAn_CNT;                     /*!< (@ 0x00000010) DMA Counter. The user loads this register with
                                                                    the number of bytes to transfer. This counter
                                                                    decreases on every AHB cycle into the DMA
                                                                    FIFO. The decrement will be 1, 2, or 4
                                                                    depending on the data width of each AHB
                                                                    cycle. When the counter reaches 0, a count-to-zero
                                                                    condition is triggered.                                    */
  __IO uint32_t   DMAn_SRC_RLD;                 /*!< (@ 0x00000014) Source Address Reload Value. The value of this
                                                                    register is loaded into DMAn_SRC upon a
                                                                    count-to-zero condition.                                   */
  __IO uint32_t   DMAn_DST_RLD;                 /*!< (@ 0x00000018) Destination Address Reload Value. The value of
                                                                    this register is loaded into DMAn_DST upon
                                                                    a count-to-zero condition.                                 */
  __IO uint32_t   DMAn_CNT_RLD;                 /*!< (@ 0x0000001C) DMA Channel Count Reload Register                          */
} DMAn_Type;
typedef struct {                                /*!< (@ 0x40028000) DMAC Structure                                             */
  __IO uint32_t   CN;                           /*!< (@ 0x00000000) DMA Control Register                                       */
  __I  uint32_t   INT;                          /*!< (@ 0x00000004) DMA Interrupt Register                                     */
  __I  uint32_t   RESERVED[62];
	  DMAn_Type   DMA_CH[4];					/*!< (@ 0x00000100) DMA Channel 0 Registers Configuration                      */
												/*!< (@ 0x00000120) DMA Channel 1 Registers Configuration                      */
												/*!< (@ 0x00000140) DMA Channel 2 Registers Configuration                      */
												/*!< (@ 0x00000160) DMA Channel 3 Registers Configuration                      */
} DMAC_Type;                                    /*!< Size = 384 (0x180)                                                        */



/* =========================================================================================================================== */
/* ================                                            FC                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Flash Memory Control (FC)
  */

typedef struct {                                /*!< (@ 0x40029000) FC Structure                                               */
  __IO uint32_t   FLSH_ADDR;                    /*!< (@ 0x00000000) Flash Write Address                                        */
  __IO uint32_t   FLSH_CLKDIV;                  /*!< (@ 0x00000004) Flash Clock Divide. The clock (PLL0) is divided
                                                                    by this value to generate a 1 MHz clock
                                                                    for Flash controller.                                      */
  __IO uint32_t   FLSH_CN;                      /*!< (@ 0x00000008) Flash Control Register                                     */
  __I  uint32_t   RESERVED[6];
  __IO uint32_t   FLSH_INT;                     /*!< (@ 0x00000024) Flash Interrupt Register                                   */
  __I  uint32_t   RESERVED1[2];
  __IO uint32_t   FLSH_DATA0;                   /*!< (@ 0x00000030) Flash Write Data                                           */
  __IO uint32_t   FLSH_DATA1;                   /*!< (@ 0x00000034) Flash Write Data                                           */
  __IO uint32_t   FLSH_DATA2;                   /*!< (@ 0x00000038) Flash Write Data                                           */
  __IO uint32_t   FLSH_DATA3;                   /*!< (@ 0x0000003C) Flash Write Data                                           */
  __O  uint32_t   FLSH_ACNTL;                   /*!< (@ 0x00000040) Access Control Register. Writing the ACNTL register
                                                                    with the following values in the order
                                                                    shown, allows read and write access to
                                                                    the system and user Information block:
                                                                    pflc->acntl = 0x3a7f5ca3; pflc->acntl =
                                                                    0xa1e34f20; pflc->acntl = 0x9608b2c1. When
                                                                    unlocked, a write of any word will disable
                                                                    access to system and user information block.
                                                                    Readback of this register is always zero.                  */
} FC_Type;                                      /*!< Size = 68 (0x44)                                                          */



/* =========================================================================================================================== */
/* ================                                            I2C                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Inter-Integrated Circuit (I2C)
  */

typedef struct {                                /*!< (@ 0x4000C000) I2C Structure                                              */
  __IO uint32_t   CR;                           /*!< (@ 0x00000000) Control Register                                           */
  __I  uint32_t   SR;                           /*!< (@ 0x00000004) Status Register                                            */
  __IO uint32_t   IER;                          /*!< (@ 0x00000008) Interrupt Enable Register                                  */
  __IO uint32_t   ISR;                          /*!< (@ 0x0000000C) Interrupt Status Register                                  */
  __IO uint32_t   BRR;                          /*!< (@ 0x00000010) Baud Rate Divisor. DIV = Nominal Frequency /
                                                                    (32 x Desired Frequency), where the nominal
                                                                    frequency = 2 x fPLL0.                                     */
  __IO uint32_t   RCR;                          /*!< (@ 0x00000014) RX Count. Number of bytes to read. This register
                                                                    is used to specify how many bytes should
                                                                    be read from the device before stopping
                                                                    the communication.                                         */
  __IO uint32_t   TXR;                          /*!< (@ 0x00000018) TX FIFO Output. This register is used to read
                                                                    the output of the FIFO, reading this register
                                                                    does not read the FIFO itself. This register
                                                                    is mainly used for debug purpose.                          */
  __IO uint32_t   DR;                           /*!< (@ 0x0000001C) Data register. This register is used to obtain
                                                                    data from or place data into the FIFO.
                                                                    Read this register to retrieve the oldest
                                                                    data available in the RX FIFO. Write this
                                                                    register to place data in the TX FIFO.                     */
  __I  uint32_t   RESERVED[3];
  __IO uint32_t   DMR;                          /*!< (@ 0x0000002C) DMA Register                                               */
} I2C_Type;                                     /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                            MSR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Magnetic Stripe Reader (MSR)
  */

typedef struct {                                /*!< (@ 0x4002B000) MSR Structure                                              */
  __IO uint32_t   DSPADDR;                      /*!< (@ 0x00000000) MSR Indirect Address Register Access. Indirectly
                                                                    access MSR settings registers by writing
                                                                    the index to this register. The register
                                                                    values are accessible by reading the DSPDATA
                                                                    register.                                                  */
  __IO uint32_t   DSPCTRL;                      /*!< (@ 0x00000004) MSR DSP Control Register                                   */
  __IO uint32_t   DSPDATA;                      /*!< (@ 0x00000008) MSR Indirect Data Register. Indirectly access
                                                                    MSR settings registers by access this register.
                                                                    This register represents an index register
                                                                    whose index is written to DSPADDR register.                */
  __I  uint32_t   T1FIFO;                       /*!< (@ 0x0000000C) Track FIFO Data Output Register                            */
  __I  uint32_t   T2FIFO;                       /*!< (@ 0x00000010) Track FIFO Data Output Register                            */
  __I  uint32_t   T3FIFO;                       /*!< (@ 0x00000014) Track FIFO Data Output Register                            */
} MSR_Type;                                     /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           MLCD                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief LCD Interface (MLCD)
  */

typedef struct {                                /*!< (@ 0x40030000) MLCD Structure                                             */
  __IO uint32_t   CN;                           /*!< (@ 0x00000000) LCD Control Register                                       */
  __IO uint32_t   EPR;                          /*!< (@ 0x00000004) LCD Enable Period Register. This register specifies
                                                                    the number of system clock cycles for an
                                                                    access. It is twice the asserted time of
                                                                    the enable signal (LCD_EN pin). This register
                                                                    has a minimum value of 4. Any value less
                                                                    than 4 will be set to 4.                                   */
  __IO uint32_t   SR;                           /*!< (@ 0x00000008) LCD Status Register                                        */
  __IO uint32_t   DATA;                         /*!< (@ 0x0000000C) Data register for LCD read/write operation                 */
} MLCD_Type;                                    /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Real Time Clock and Alarm (RTC)
  */

typedef struct {                                /*!< (@ 0x40006000) RTC Structure                                              */
  __IO uint32_t   SEC;                          /*!< (@ 0x00000000) RTC Second Counter. This register contains the
                                                                    32-bit second counter.                                     */
  __IO uint32_t   SSEC;                         /*!< (@ 0x00000004) RTC Sub-second Counter. This counter increments
                                                                    at 256Hz. RTC_SEC is incremented when this
                                                                    register rolls over from 0xFF to 0x00.                     */
  __IO uint32_t   RAS;                          /*!< (@ 0x00000008) Time-of-day Alarm                                          */
  __IO uint32_t   RSSA;                         /*!< (@ 0x0000000C) RTC sub-second alarm. This register contains
                                                                    the reload value for the sub-second alarm.                 */
  __IO uint32_t   CN;                           /*!< (@ 0x00000010) RTC Control Register                                       */
  __IO uint32_t   TRIM;                         /*!< (@ 0x00000014) RTC Trim Register                                          */
} RTC_Type;                                     /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           SKBD                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Secure Keyboard (SKBD)
  */

typedef struct {                                /*!< (@ 0x40032000) SKBD Structure                                             */
  __IO uint32_t   CR0;                          /*!< (@ 0x00000000) Input Output Select Bits. Each bit of IOSEL selects
                                                                    the pin direction for the corresponding
                                                                    KBDIO pin. If IOSEL[0] = 1, KBDIO0 is an
                                                                    output.                                                    */
  __IO uint32_t   CR1;                          /*!< (@ 0x00000004) Control Register 1                                         */
  __I  uint32_t   SR;                           /*!< (@ 0x00000008) Status Register                                            */
  __IO uint32_t   IER;                          /*!< (@ 0x0000000C) Interrupt Enable Register                                  */
  __IO uint32_t   ISR;                          /*!< (@ 0x00000010) Interrupt Status Register                                  */
  __I  uint32_t   K0R;                          /*!< (@ 0x00000014) Key Register                                               */
  __I  uint32_t   K1R;                          /*!< (@ 0x00000018) Key Register                                               */
  __I  uint32_t   K2R;                          /*!< (@ 0x0000001C) Key Register                                               */
  __I  uint32_t   K3R;                          /*!< (@ 0x00000020) Key Register                                               */
} SKBD_Type;                                    /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           SMON                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief The Security Monitor block used to monitor system threat conditions (SMON)
  */

typedef struct {                                /*!< (@ 0x40004000) SMON Structure                                             */
  __IO uint32_t   EXTSCN;                       /*!< (@ 0x00000000) External Sensor Control Register                           */
  __IO uint32_t   INTSCN;                       /*!< (@ 0x00000004) Internal Sensor Control Register                           */
  __IO uint32_t   SECALM;                       /*!< (@ 0x00000008) Security Alarm Register                                    */
  __IO uint32_t   SECDIAG;                      /*!< (@ 0x0000000C) Security Diagnostic Register                               */
  __I  uint32_t   DLRTC;                        /*!< (@ 0x00000010) DRS Log RTC Value. This register contains the
                                                                    32 bit value in the RTC second register
                                                                    when the last DRS event occurred.                          */
  __I  uint32_t   RESERVED[8];
  __I  uint32_t   SECST;                        /*!< (@ 0x00000034) Security Monitor Status Register                           */
} SMON_Type;                                    /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPIn                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial Peripheral Interface (SPIn)
  */

typedef struct {                                /*!< (@ 0x40018000) SPIn Structure                                             */
  __IO uint32_t   DATA;                         /*!< (@ 0x00000000) SPI Data                                                   */
  __IO uint32_t   CNTL;                         /*!< (@ 0x00000004) SPI Control Register                                       */
  __IO uint32_t   STATUS;                       /*!< (@ 0x00000008) SPI Status Register                                        */
  __IO uint32_t   MOD;                          /*!< (@ 0x0000000C) SPI Mode Register                                          */
  __I  uint32_t   RESERVED;
  __IO uint32_t   BRG;                          /*!< (@ 0x00000014) Baud Rate Reload Value. The SPI Baud Rate register
                                                                    is a 16-bit reload value for the SPI Baud
                                                                    Rate Generator. The reload value must be
                                                                    greater than or equal to 0002H for proper
                                                                    SPI operation (maximum baud rate is PCLK
                                                                    frequency divided by 4).                                   */
  __IO uint32_t   DMA_REG;                      /*!< (@ 0x00000018) SPI DMA Register                                           */
  __IO uint32_t   I2S_CNTL;                     /*!< (@ 0x0000001C) I2S Control Register                                       */
} SPIn_Type;                                    /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                            SC                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Smart Card Register (SC)
  */

typedef struct {                                /*!< (@ 0x4002C000) SC Structure                                               */
  __IO uint32_t   SC_CR;                        /*!< (@ 0x00000000) Control Register                                           */
  __IO uint32_t   SC_SR;                        /*!< (@ 0x00000004) Status Register                                            */
  __IO uint32_t   SC_PN;                        /*!< (@ 0x00000008) Pin Register                                               */
  __IO uint32_t   SC_ETUR;                      /*!< (@ 0x0000000C) ETU Register                                               */
  __IO uint32_t   SC_GTR;                       /*!< (@ 0x00000010) Guard Time. Minimum time between two consecutive
                                                                    start bits in transmit mode. Guard Time
                                                                    is expressed in ETUs. Guard Time must be
                                                                    doubled if ETUR.HALF=1. Writes to this
                                                                    register may be delayed up to two ETU cycles.              */
  __IO uint32_t   SC_WT0R;                      /*!< (@ 0x00000014) Wait Time. Least Significant 32 bits of the Wait
                                                                    Time Counter expressed in ETU. Wait Time
                                                                    must be doubled if ETUR.HALF=1. writes
                                                                    to this register may be delayed up to two
                                                                    ETU cycles.                                                */
  __IO uint32_t   SC_WT1R;                      /*!< (@ 0x00000018) Wait Time. Most Significant 8 bits of the Wait
                                                                    Time Counter expressed in ETU. Wait Time
                                                                    must be doubled if ETUR.HALF=1. Writes
                                                                    to this register may be delayed up to two
                                                                    ETU cycles.                                                */
  __IO uint32_t   SC_IER;                       /*!< (@ 0x0000001C) Interrupt Enable Register                                  */
  __IO uint32_t   SC_ISR;                       /*!< (@ 0x00000020) Interrupt Status Register                                  */
  __O  uint32_t   SC_TXR;                       /*!< (@ 0x00000024) Transmit Data. Writes to this register will load
                                                                    the 8 bit input data into the FIFO.                        */
  __I  uint32_t   SC_RXR;                       /*!< (@ 0x00000028) Receive Register                                           */
  __IO uint32_t   SC_CCR;                       /*!< (@ 0x0000002C) Clock Counter Register                                     */
} SC_Type;                                      /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                           TMRn                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief 32-bit reloadable timer that can be used for timing and event counting. (TMRn)
  */

typedef struct {                                /*!< (@ 0x40010000) TMRn Structure                                             */
  __IO uint32_t   CNT;                          /*!< (@ 0x00000000) Count. This register stores the current timer
                                                                    count.                                                     */
  __IO uint32_t   CMP;                          /*!< (@ 0x00000004) Compare. This register stores the compare value,
                                                                    which is used to set the maximum count
                                                                    value to initiate a reload of the timer
                                                                    to 0x0001.                                                 */
  __IO uint32_t   PWM;                          /*!< (@ 0x00000008) PWM. This register stores the value that is compared
                                                                    to the current timer count.                                */
  __IO uint32_t   INT;                          /*!< (@ 0x0000000C) Clear Interrupt. Writing a value (0 or 1) to
                                                                    a bit in this register clears the associated
                                                                    interrupt.                                                 */
  __IO uint32_t   CN;                           /*!< (@ 0x00000010) Timer Control Register                                     */
  __IO uint32_t   NOLCMP;                       /*!< (@ 0x00000014) Timer Non-Overlapping Compare Register                     */
} TMRn_Type;                                    /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           TRNG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Random Number Generator (TRNG)
  */

typedef struct {                                /*!< (@ 0x400B5000) TRNG Structure                                             */
  __IO uint32_t   CN;                           /*!< (@ 0x00000000) TRNG Control Register                                      */
  __I  uint32_t   DATA;                         /*!< (@ 0x00000004) Data. The content of this register is valid only
                                                                    when RNG_IS = 1. When TRNG is disabled,
                                                                    read returns 0x0000 0000.                                  */
} TRNG_Type;                                    /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                           UARTn                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief UART0 (Serial Port 0) (UARTn)
  */

typedef struct {                                /*!< (@ 0x40020000) UARTn Structure                                            */
  __IO uint32_t   CTRL;                         /*!< (@ 0x00000000) UART Control Register                                      */
  __I  uint32_t   STAT;                         /*!< (@ 0x00000004) UART Status Register                                       */
  __IO uint32_t   INT_EN;                       /*!< (@ 0x00000008) UART Interrupt Enable Register                             */
  __IO uint32_t   INT_STAT;                     /*!< (@ 0x0000000C) UART Interrupt Status Register                             */
  __IO uint32_t   BAUD0;                        /*!< (@ 0x00000010) UART Baud Rate 0 Register. Integer portion of
                                                                    baud rate divisor value. Use the following
                                                                    formula to obtain the proper value for
                                                                    this field: IDIV = (integer portion of)
                                                                    'Nominal Frequency' / (128 x Baud Rate
                                                                    Frequency) where the 'Nominal Frequency'
                                                                    = 2xfPLL0. The integer portion is rounded
                                                                    value (i.e. 5.7 becomes 5).                                */
  __IO uint32_t   BAUD1;                        /*!< (@ 0x00000014) UART Baud Rate 1 Register. Decimal portion of
                                                                    baud rate divisor value. Use the following
                                                                    formula to obtain the proper value for
                                                                    this field after obtaining IDIV: DIV =
                                                                    'Nominal Frequency' / (128 x Baud Rate
                                                                    Frequency). DDIV = (DIV - IDIV) x 128,
                                                                    where the 'Nominal Frequency' = 2xfPLL0.                   */
  __I  uint32_t   RESERVED;
  __IO uint32_t   PIN;                          /*!< (@ 0x0000001C) UART Pin Control Register                                  */
  __IO uint32_t   DATA;                         /*!< (@ 0x00000020) UART Data Buffer Register                                  */
  __I  uint32_t   RESERVED1[3];
  __IO uint32_t   DMA_REG;                      /*!< (@ 0x00000030) UART DMA Register                                          */
} UARTn_Type;                                   /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                            USB                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal Serial Bus (USB)
  */

typedef struct {                                /*!< (@ 0x400B0000) USB Structure                                              */
  __IO uint32_t   CN;                           /*!< (@ 0x00000000) USB Control Register                                       */
  __I  uint32_t   RESERVED[127];
  __IO uint32_t   DEV_ADDR;                     /*!< (@ 0x00000200) USB Device Address Register                                */
  __IO uint32_t   DEV_CN;                       /*!< (@ 0x00000204) USB Device Control Register                                */
  __IO uint32_t   DEV_INT;                      /*!< (@ 0x00000208) USB Device Interrupt Register                              */
  __IO uint32_t   DEV_INT_EN;                   /*!< (@ 0x0000020C) USB Device Interrupt Enable Register                       */
  __I  uint32_t   RESERVED1[4];
  __IO uint32_t   EP_BASE;                      /*!< (@ 0x00000220) USB Endpoint Descriptor Base Address Register              */
  __IO uint32_t   CUR_BUF;                      /*!< (@ 0x00000224) USB Current Buffer Register                                */
  __IO uint32_t   IN_OWNER;                     /*!< (@ 0x00000228) USB IN Buffer Owner Register                               */
  __IO uint32_t   OUT_OWNER;                    /*!< (@ 0x0000022C) USB OUT Buffer Owner Register                              */
  __IO uint32_t   IN_INT;                       /*!< (@ 0x00000230) USB IN Interrupt Register                                  */
  __IO uint32_t   OUT_INT;                      /*!< (@ 0x00000234) USB OUT Interrupt Register                                 */
  __IO uint32_t   NAK_INT;                      /*!< (@ 0x00000238) USB NAK Interrupt Register                                 */
  __IO uint32_t   DMA_ERR_INT;                  /*!< (@ 0x0000023C) USB DMA Error Interrupt Register                           */
  __IO uint32_t   BUF_OVR_INT;                  /*!< (@ 0x00000240) USB Buffer Overflow Interrupt Register                     */
  __I  uint32_t   RESERVED2[7];
  __I  uint32_t   SETUP0;                       /*!< (@ 0x00000260) USB SETUP Register                                         */
  __I  uint32_t   SETUP1;                       /*!< (@ 0x00000264) USB SETUP Register                                         */
  __I  uint32_t   RESERVED3[6];
  __IO uint32_t   EP0;                          /*!< (@ 0x00000280) USB Endpoint Control Register                              */
  __IO uint32_t   EP1;                          /*!< (@ 0x00000284) USB Endpoint Control Register                              */
  __IO uint32_t   EP2;                          /*!< (@ 0x00000288) USB Endpoint Control Register                              */
  __IO uint32_t   EP3;                          /*!< (@ 0x0000028C) USB Endpoint Control Register                              */
  __IO uint32_t   EP4;                          /*!< (@ 0x00000290) USB Endpoint Control Register                              */
  __IO uint32_t   EP5;                          /*!< (@ 0x00000294) USB Endpoint Control Register                              */
  __IO uint32_t   EP6;                          /*!< (@ 0x00000298) USB Endpoint Control Register                              */
  __IO uint32_t   EP7;                          /*!< (@ 0x0000029C) USB Endpoint Control Register                              */
  __IO uint32_t   EP8;                          /*!< (@ 0x000002A0) USB Endpoint Control Register                              */
  __IO uint32_t   EP9;                          /*!< (@ 0x000002A4) USB Endpoint Control Register                              */
  __IO uint32_t   EP10;                         /*!< (@ 0x000002A8) USB Endpoint Control Register                              */
  __IO uint32_t   EP11;                         /*!< (@ 0x000002AC) USB Endpoint Control Register                              */
  __IO uint32_t   EP12;                         /*!< (@ 0x000002B0) USB Endpoint Control Register                              */
  __IO uint32_t   EP13;                         /*!< (@ 0x000002B4) USB Endpoint Control Register                              */
  __IO uint32_t   EP14;                         /*!< (@ 0x000002B8) USB Endpoint Control Register                              */
  __IO uint32_t   EP15;                         /*!< (@ 0x000002BC) USB Endpoint Control Register                              */
} USB_Type;                                     /*!< Size = 704 (0x2c0)                                                        */



/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Watchdog Timer (WDT)
  */

typedef struct {                                /*!< (@ 0x40003000) WDT Structure                                              */
  __IO uint32_t   CTRL;                         /*!< (@ 0x00000000) Watchdog Timer Control Register                            */
  __O  uint32_t   RST;                          /*!< (@ 0x00000004) Watchdog Timer Reset Register                              */
} WDT_Type;                                     /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                           CLCD                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Color LCD Controller (CLCD)
  */

typedef struct {                                /*!< (@ 0x40031000) CLCD Structure                                             */
  __IO uint32_t   CLK;                          /*!< (@ 0x00000000) LCD Clock Register                                         */
  __IO uint32_t   VTIM_0;                       /*!< (@ 0x00000004) LCD Vertical Timing 0 Register                             */
  __IO uint32_t   VTIM_1;                       /*!< (@ 0x00000008) LCD Vertical Timing 1 Register                             */
  __IO uint32_t   HTIM;                         /*!< (@ 0x0000000C) LCD Horizontal Timing Register                             */
  __IO uint32_t   CTRL;                         /*!< (@ 0x00000010) LCD Control Register                                       */
  __I  uint32_t   RESERVED;
  __IO uint32_t   FRBUF_0;                      /*!< (@ 0x00000018) Frame Buffer Address. This address points to
                                                                    the start of the frame Buffer. This address
                                                                    is always word aligned and bits 1:0 are
                                                                    ignored.                                                   */
  __IO uint32_t   FRBUF_1;                      /*!< (@ 0x0000001C) Frame Buffer Address. This address points to
                                                                    the start of the frame Buffer. This address
                                                                    is always word aligned and bits 1:0 are
                                                                    ignored.                                                   */
  __IO uint32_t   INT_EN;                       /*!< (@ 0x00000020) LCD Interrupt Enable Register                              */
  __IO uint32_t   STAT;                         /*!< (@ 0x00000024) LCD Status Register                                        */
  __I  uint32_t   RESERVED1[2];
  __IO uint32_t   HV_PHASE;                     /*!< (@ 0x00000030) HSYNC-VSYNC Phase Difference in number of pixel
                                                                    clocks                                                     */
  __I  uint32_t   RESERVED2[243];
  __IO uint32_t   PALETTE_RAM[1020];                  /*!< (@ 0x00000400) LCD Palette RAM                                            */
} CLCD_Type;                                    /*!< Size = 1028 (0x404)                                                       */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined(__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined(__ICCARM__)
  #pragma language=extended
#elif defined(__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined(__TMS470__)
/* anonymous unions are enabled by default */
#elif defined(__TASKING__)
  #pragma warning 586
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define GCR_BASE                    0x40000000UL
#define SIR_BASE                    0x40000400UL
#define ICC_BASE                    0x4002A000UL
#define GPIO0_BASE                  0x40008000UL
#define GPIO1_BASE                  0x40009000UL
#define GPIO2_BASE                  0x4000A000UL
#define ADC_BASE                    0x40034000UL
#define CRYPTO_BASE                 0x40001000UL
#define DAC_BASE                    0x40038000UL
#define DAC_FIFO_BASE               0x400B8000UL
#define DMAC_BASE                   0x40028000UL
#define FC_BASE                     0x40029000UL
#define I2C_BASE                    0x4000C000UL
#define MSR_BASE                    0x4002B000UL
#define MLCD_BASE                   0x40030000UL
#define RTC_BASE                    0x40006000UL
#define SKBD_BASE                   0x40032000UL
#define SMON_BASE                   0x40004000UL
#define SPI0_BASE                   0x40018000UL
#define SPI1_BASE                   0x40019000UL
#define SPI2_BASE                   0x4001A000UL
#define SC_BASE                     0x4002C000UL
#define TMR0_BASE                   0x40010000UL
#define TMR1_BASE                   0x40011000UL
#define TMR2_BASE                   0x40012000UL
#define TMR3_BASE                   0x40013000UL
#define TMR4_BASE                   0x40014000UL
#define TMR5_BASE                   0x40015000UL
#define TRNG_BASE                   0x400B5000UL
#define UART0_BASE                  0x40020000UL
#define UART1_BASE                  0x40021000UL
#define USB_BASE                    0x400B0000UL
#define WDT_BASE                    0x40003000UL
#define CLCD_BASE                   0x40031000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define GCR                         ((GCR_Type*)               GCR_BASE)
#define SIR                         ((SIR_Type*)               SIR_BASE)
#define ICC                         ((ICC_Type*)               ICC_BASE)
#define GPIO0                       ((GPIOn_Type*)             GPIO0_BASE)
#define GPIO1                       ((GPIOn_Type*)             GPIO1_BASE)
#define GPIO2                       ((GPIOn_Type*)             GPIO2_BASE)
#define ADC                         ((ADC_Type*)               ADC_BASE)
#define CRYPTO                      ((CRYPTO_Type*)            CRYPTO_BASE)
#define DAC                         ((DAC_Type*)               DAC_BASE)
#define DAC_FIFO                    ((DAC_FIFO_Type*)          DAC_FIFO_BASE)
#define DMAC                        ((DMAC_Type*)              DMAC_BASE)
#define FC                          ((FC_Type*)                FC_BASE)
#define I2C                         ((I2C_Type*)               I2C_BASE)
#define MSR                         ((MSR_Type*)               MSR_BASE)
#define MLCD                        ((MLCD_Type*)              MLCD_BASE)
#define RTC                         ((RTC_Type*)               RTC_BASE)
#define SKBD                        ((SKBD_Type*)              SKBD_BASE)
#define SMON                        ((SMON_Type*)              SMON_BASE)
#define SPI0                        ((SPIn_Type*)              SPI0_BASE)
#define SPI1                        ((SPIn_Type*)              SPI1_BASE)
#define SPI2                        ((SPIn_Type*)              SPI2_BASE)
#define SC                          ((SC_Type*)                SC_BASE)
#define TMR0                        ((TMRn_Type*)              TMR0_BASE)
#define TMR1                        ((TMRn_Type*)              TMR1_BASE)
#define TMR2                        ((TMRn_Type*)              TMR2_BASE)
#define TMR3                        ((TMRn_Type*)              TMR3_BASE)
#define TMR4                        ((TMRn_Type*)              TMR4_BASE)
#define TMR5                        ((TMRn_Type*)              TMR5_BASE)
#define TRNG                        ((TRNG_Type*)              TRNG_BASE)
#define UART0                       ((UARTn_Type*)             UART0_BASE)
#define UART1                       ((UARTn_Type*)             UART1_BASE)
#define USB                         ((USB_Type*)               USB_BASE)
#define WDT                         ((WDT_Type*)               WDT_BASE)
#define CLCD                        ((CLCD_Type*)              CLCD_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            GCR                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  SCON  ========================================================== */
#define GCR_SCON_BSTAPEN_Pos              (0UL)                     /*!< GCR SCON: BSTAPEN (Bit 0)                             */
#define GCR_SCON_BSTAPEN_Msk              (0x1UL)                   /*!< GCR SCON: BSTAPEN (Bitfield-Mask: 0x01)               */
#define GCR_SCON_ONVMAIN_Pos              (3UL)                     /*!< GCR SCON: ONVMAIN (Bit 3)                             */
#define GCR_SCON_ONVMAIN_Msk              (0x8UL)                   /*!< GCR SCON: ONVMAIN (Bitfield-Mask: 0x01)               */
#define GCR_SCON_FLASH_PAGE_FLIP_Pos      (4UL)                     /*!< GCR SCON: FLASH_PAGE_FLIP (Bit 4)                     */
#define GCR_SCON_FLASH_PAGE_FLIP_Msk      (0x10UL)                  /*!< GCR SCON: FLASH_PAGE_FLIP (Bitfield-Mask: 0x01)       */
#define GCR_SCON_CCHK_Pos                 (13UL)                    /*!< GCR SCON: CCHK (Bit 13)                               */
#define GCR_SCON_CCHK_Msk                 (0x2000UL)                /*!< GCR SCON: CCHK (Bitfield-Mask: 0x01)                  */
#define GCR_SCON_CHKRD_Pos                (14UL)                    /*!< GCR SCON: CHKRD (Bit 14)                              */
#define GCR_SCON_CHKRD_Msk                (0x4000UL)                /*!< GCR SCON: CHKRD (Bitfield-Mask: 0x01)                 */
#define GCR_SCON_CHKRES_Pos               (15UL)                    /*!< GCR SCON: CHKRES (Bit 15)                             */
#define GCR_SCON_CHKRES_Msk               (0x8000UL)                /*!< GCR SCON: CHKRES (Bitfield-Mask: 0x01)                */
/* =========================================================  RSTR  ========================================================== */
#define GCR_RSTR_DMA_Pos                  (0UL)                     /*!< GCR RSTR: DMA (Bit 0)                                 */
#define GCR_RSTR_DMA_Msk                  (0x1UL)                   /*!< GCR RSTR: DMA (Bitfield-Mask: 0x01)                   */
#define GCR_RSTR_WDT_Pos                  (1UL)                     /*!< GCR RSTR: WDT (Bit 1)                                 */
#define GCR_RSTR_WDT_Msk                  (0x2UL)                   /*!< GCR RSTR: WDT (Bitfield-Mask: 0x01)                   */
#define GCR_RSTR_GPIO0_Pos                (2UL)                     /*!< GCR RSTR: GPIO0 (Bit 2)                               */
#define GCR_RSTR_GPIO0_Msk                (0x4UL)                   /*!< GCR RSTR: GPIO0 (Bitfield-Mask: 0x01)                 */
#define GCR_RSTR_GPIO1_Pos                (3UL)                     /*!< GCR RSTR: GPIO1 (Bit 3)                               */
#define GCR_RSTR_GPIO1_Msk                (0x8UL)                   /*!< GCR RSTR: GPIO1 (Bitfield-Mask: 0x01)                 */
#define GCR_RSTR_GPIO2_Pos                (4UL)                     /*!< GCR RSTR: GPIO2 (Bit 4)                               */
#define GCR_RSTR_GPIO2_Msk                (0x10UL)                  /*!< GCR RSTR: GPIO2 (Bitfield-Mask: 0x01)                 */
#define GCR_RSTR_TIMER0_Pos               (5UL)                     /*!< GCR RSTR: TIMER0 (Bit 5)                              */
#define GCR_RSTR_TIMER0_Msk               (0x20UL)                  /*!< GCR RSTR: TIMER0 (Bitfield-Mask: 0x01)                */
#define GCR_RSTR_TIMER1_Pos               (6UL)                     /*!< GCR RSTR: TIMER1 (Bit 6)                              */
#define GCR_RSTR_TIMER1_Msk               (0x40UL)                  /*!< GCR RSTR: TIMER1 (Bitfield-Mask: 0x01)                */
#define GCR_RSTR_TIMER2_Pos               (7UL)                     /*!< GCR RSTR: TIMER2 (Bit 7)                              */
#define GCR_RSTR_TIMER2_Msk               (0x80UL)                  /*!< GCR RSTR: TIMER2 (Bitfield-Mask: 0x01)                */
#define GCR_RSTR_TIMER3_Pos               (8UL)                     /*!< GCR RSTR: TIMER3 (Bit 8)                              */
#define GCR_RSTR_TIMER3_Msk               (0x100UL)                 /*!< GCR RSTR: TIMER3 (Bitfield-Mask: 0x01)                */
#define GCR_RSTR_TIMER4_Pos               (9UL)                     /*!< GCR RSTR: TIMER4 (Bit 9)                              */
#define GCR_RSTR_TIMER4_Msk               (0x200UL)                 /*!< GCR RSTR: TIMER4 (Bitfield-Mask: 0x01)                */
#define GCR_RSTR_TIMER5_Pos               (10UL)                    /*!< GCR RSTR: TIMER5 (Bit 10)                             */
#define GCR_RSTR_TIMER5_Msk               (0x400UL)                 /*!< GCR RSTR: TIMER5 (Bitfield-Mask: 0x01)                */
#define GCR_RSTR_UART0_Pos                (11UL)                    /*!< GCR RSTR: UART0 (Bit 11)                              */
#define GCR_RSTR_UART0_Msk                (0x800UL)                 /*!< GCR RSTR: UART0 (Bitfield-Mask: 0x01)                 */
#define GCR_RSTR_UART1_Pos                (12UL)                    /*!< GCR RSTR: UART1 (Bit 12)                              */
#define GCR_RSTR_UART1_Msk                (0x1000UL)                /*!< GCR RSTR: UART1 (Bitfield-Mask: 0x01)                 */
#define GCR_RSTR_SPI0_Pos                 (13UL)                    /*!< GCR RSTR: SPI0 (Bit 13)                               */
#define GCR_RSTR_SPI0_Msk                 (0x2000UL)                /*!< GCR RSTR: SPI0 (Bitfield-Mask: 0x01)                  */
#define GCR_RSTR_SPI1_Pos                 (14UL)                    /*!< GCR RSTR: SPI1 (Bit 14)                               */
#define GCR_RSTR_SPI1_Msk                 (0x4000UL)                /*!< GCR RSTR: SPI1 (Bitfield-Mask: 0x01)                  */
#define GCR_RSTR_SPI2_Pos                 (15UL)                    /*!< GCR RSTR: SPI2 (Bit 15)                               */
#define GCR_RSTR_SPI2_Msk                 (0x8000UL)                /*!< GCR RSTR: SPI2 (Bitfield-Mask: 0x01)                  */
#define GCR_RSTR_I2C_Pos                  (16UL)                    /*!< GCR RSTR: I2C (Bit 16)                                */
#define GCR_RSTR_I2C_Msk                  (0x10000UL)               /*!< GCR RSTR: I2C (Bitfield-Mask: 0x01)                   */
#define GCR_RSTR_RTC_Pos                  (17UL)                    /*!< GCR RSTR: RTC (Bit 17)                                */
#define GCR_RSTR_RTC_Msk                  (0x20000UL)               /*!< GCR RSTR: RTC (Bitfield-Mask: 0x01)                   */
#define GCR_RSTR_CRYPTO_Pos               (18UL)                    /*!< GCR RSTR: CRYPTO (Bit 18)                             */
#define GCR_RSTR_CRYPTO_Msk               (0x40000UL)               /*!< GCR RSTR: CRYPTO (Bitfield-Mask: 0x01)                */
#define GCR_RSTR_MAGDSP_Pos               (19UL)                    /*!< GCR RSTR: MAGDSP (Bit 19)                             */
#define GCR_RSTR_MAGDSP_Msk               (0x80000UL)               /*!< GCR RSTR: MAGDSP (Bitfield-Mask: 0x01)                */
#define GCR_RSTR_SC_Pos                   (20UL)                    /*!< GCR RSTR: SC (Bit 20)                                 */
#define GCR_RSTR_SC_Msk                   (0x100000UL)              /*!< GCR RSTR: SC (Bitfield-Mask: 0x01)                    */
#define GCR_RSTR_KBD_Pos                  (21UL)                    /*!< GCR RSTR: KBD (Bit 21)                                */
#define GCR_RSTR_KBD_Msk                  (0x200000UL)              /*!< GCR RSTR: KBD (Bitfield-Mask: 0x01)                   */
#define GCR_RSTR_TFT_MLCD_Pos             (22UL)                    /*!< GCR RSTR: TFT_MLCD (Bit 22)                           */
#define GCR_RSTR_TFT_MLCD_Msk             (0x400000UL)              /*!< GCR RSTR: TFT_MLCD (Bitfield-Mask: 0x01)              */
#define GCR_RSTR_USB_Pos                  (23UL)                    /*!< GCR RSTR: USB (Bit 23)                                */
#define GCR_RSTR_USB_Msk                  (0x800000UL)              /*!< GCR RSTR: USB (Bitfield-Mask: 0x01)                   */
#define GCR_RSTR_ADC_Pos                  (25UL)                    /*!< GCR RSTR: ADC (Bit 25)                                */
#define GCR_RSTR_ADC_Msk                  (0x2000000UL)             /*!< GCR RSTR: ADC (Bitfield-Mask: 0x01)                   */
#define GCR_RSTR_DAC_Pos                  (26UL)                    /*!< GCR RSTR: DAC (Bit 26)                                */
#define GCR_RSTR_DAC_Msk                  (0x4000000UL)             /*!< GCR RSTR: DAC (Bitfield-Mask: 0x01)                   */
#define GCR_RSTR_SRST_Pos                 (29UL)                    /*!< GCR RSTR: SRST (Bit 29)                               */
#define GCR_RSTR_SRST_Msk                 (0x20000000UL)            /*!< GCR RSTR: SRST (Bitfield-Mask: 0x01)                  */
#define GCR_RSTR_PRST_Pos                 (30UL)                    /*!< GCR RSTR: PRST (Bit 30)                               */
#define GCR_RSTR_PRST_Msk                 (0x40000000UL)            /*!< GCR RSTR: PRST (Bitfield-Mask: 0x01)                  */
#define GCR_RSTR_SYSTEM_Pos               (31UL)                    /*!< GCR RSTR: SYSTEM (Bit 31)                             */
#define GCR_RSTR_SYSTEM_Msk               (0x80000000UL)            /*!< GCR RSTR: SYSTEM (Bitfield-Mask: 0x01)                */
/* =========================================================  CLKCN  ========================================================= */
#define GCR_CLKCN_PSC_Pos                 (6UL)                     /*!< GCR CLKCN: PSC (Bit 6)                                */
#define GCR_CLKCN_PSC_Msk                 (0x1c0UL)                 /*!< GCR CLKCN: PSC (Bitfield-Mask: 0x07)                  */
#define GCR_CLKCN_CLKSEL_Pos              (9UL)                     /*!< GCR CLKCN: CLKSEL (Bit 9)                             */
#define GCR_CLKCN_CLKSEL_Msk              (0xe00UL)                 /*!< GCR CLKCN: CLKSEL (Bitfield-Mask: 0x07)               */
#define GCR_CLKCN_CKRDY_Pos               (13UL)                    /*!< GCR CLKCN: CKRDY (Bit 13)                             */
#define GCR_CLKCN_CKRDY_Msk               (0x2000UL)                /*!< GCR CLKCN: CKRDY (Bitfield-Mask: 0x01)                */
/* ==========================================================  PM  =========================================================== */
#define GCR_PM_MODE_Pos                   (0UL)                     /*!< GCR PM: MODE (Bit 0)                                  */
#define GCR_PM_MODE_Msk                   (0x3UL)                   /*!< GCR PM: MODE (Bitfield-Mask: 0x03)                    */
#define GCR_PM_GPIOWKEN_Pos               (4UL)                     /*!< GCR PM: GPIOWKEN (Bit 4)                              */
#define GCR_PM_GPIOWKEN_Msk               (0x10UL)                  /*!< GCR PM: GPIOWKEN (Bitfield-Mask: 0x01)                */
#define GCR_PM_RTCWKEN_Pos                (5UL)                     /*!< GCR PM: RTCWKEN (Bit 5)                               */
#define GCR_PM_RTCWKEN_Msk                (0x20UL)                  /*!< GCR PM: RTCWKEN (Bitfield-Mask: 0x01)                 */
#define GCR_PM_USBWKEN_Pos                (6UL)                     /*!< GCR PM: USBWKEN (Bit 6)                               */
#define GCR_PM_USBWKEN_Msk                (0x40UL)                  /*!< GCR PM: USBWKEN (Bitfield-Mask: 0x01)                 */
#define GCR_PM_SCWKEN_Pos                 (7UL)                     /*!< GCR PM: SCWKEN (Bit 7)                                */
#define GCR_PM_SCWKEN_Msk                 (0x80UL)                  /*!< GCR PM: SCWKEN (Bitfield-Mask: 0x01)                  */
#define GCR_PM_OSCPD_Pos                  (12UL)                    /*!< GCR PM: OSCPD (Bit 12)                                */
#define GCR_PM_OSCPD_Msk                  (0x1000UL)                /*!< GCR PM: OSCPD (Bitfield-Mask: 0x01)                   */
#define GCR_PM_PLL01PD_Pos                (13UL)                    /*!< GCR PM: PLL01PD (Bit 13)                              */
#define GCR_PM_PLL01PD_Msk                (0x2000UL)                /*!< GCR PM: PLL01PD (Bitfield-Mask: 0x01)                 */
#define GCR_PM_COPD_Pos                   (14UL)                    /*!< GCR PM: COPD (Bit 14)                                 */
#define GCR_PM_COPD_Msk                   (0x4000UL)                /*!< GCR PM: COPD (Bitfield-Mask: 0x01)                    */
#define GCR_PM_CM3PMUEN_Pos               (16UL)                    /*!< GCR PM: CM3PMUEN (Bit 16)                             */
#define GCR_PM_CM3PMUEN_Msk               (0x10000UL)               /*!< GCR PM: CM3PMUEN (Bitfield-Mask: 0x01)                */
#define GCR_PM_CM3WICACK_Pos              (17UL)                    /*!< GCR PM: CM3WICACK (Bit 17)                            */
#define GCR_PM_CM3WICACK_Msk              (0x20000UL)               /*!< GCR PM: CM3WICACK (Bitfield-Mask: 0x01)               */
/* =========================================================  PLLCN  ========================================================= */
#define GCR_PLLCN_PLLn_EN_Pos             (0UL)                     /*!< GCR PLLCN: PLLn_EN (Bit 0)                            */
#define GCR_PLLCN_PLLn_EN_Msk             (0x1UL)                   /*!< GCR PLLCN: PLLn_EN (Bitfield-Mask: 0x01)              */
#define GCR_PLLCN_PLLn_LOCK_Pos           (1UL)                     /*!< GCR PLLCN: PLLn_LOCK (Bit 1)                          */
#define GCR_PLLCN_PLLn_LOCK_Msk           (0x2UL)                   /*!< GCR PLLCN: PLLn_LOCK (Bitfield-Mask: 0x01)            */
/* ========================================================  PCKDIV  ========================================================= */
#define GCR_PCKDIV_PCF_Pos                (0UL)                     /*!< GCR PCKDIV: PCF (Bit 0)                               */
#define GCR_PCKDIV_PCF_Msk                (0x7UL)                   /*!< GCR PCKDIV: PCF (Bitfield-Mask: 0x07)                 */
/* ========================================================  PERCKCN  ======================================================== */
#define GCR_PERCKCN_GPIO0D_Pos            (0UL)                     /*!< GCR PERCKCN: GPIO0D (Bit 0)                           */
#define GCR_PERCKCN_GPIO0D_Msk            (0x1UL)                   /*!< GCR PERCKCN: GPIO0D (Bitfield-Mask: 0x01)             */
#define GCR_PERCKCN_GPIO1D_Pos            (1UL)                     /*!< GCR PERCKCN: GPIO1D (Bit 1)                           */
#define GCR_PERCKCN_GPIO1D_Msk            (0x2UL)                   /*!< GCR PERCKCN: GPIO1D (Bitfield-Mask: 0x01)             */
#define GCR_PERCKCN_GPIO2D_Pos            (2UL)                     /*!< GCR PERCKCN: GPIO2D (Bit 2)                           */
#define GCR_PERCKCN_GPIO2D_Msk            (0x4UL)                   /*!< GCR PERCKCN: GPIO2D (Bitfield-Mask: 0x01)             */
#define GCR_PERCKCN_USBD_Pos              (3UL)                     /*!< GCR PERCKCN: USBD (Bit 3)                             */
#define GCR_PERCKCN_USBD_Msk              (0x8UL)                   /*!< GCR PERCKCN: USBD (Bitfield-Mask: 0x01)               */
#define GCR_PERCKCN_CLCDD_Pos             (4UL)                     /*!< GCR PERCKCN: CLCDD (Bit 4)                            */
#define GCR_PERCKCN_CLCDD_Msk             (0x10UL)                  /*!< GCR PERCKCN: CLCDD (Bitfield-Mask: 0x01)              */
#define GCR_PERCKCN_DMAD_Pos              (5UL)                     /*!< GCR PERCKCN: DMAD (Bit 5)                             */
#define GCR_PERCKCN_DMAD_Msk              (0x20UL)                  /*!< GCR PERCKCN: DMAD (Bitfield-Mask: 0x01)               */
#define GCR_PERCKCN_SPI0D_Pos             (6UL)                     /*!< GCR PERCKCN: SPI0D (Bit 6)                            */
#define GCR_PERCKCN_SPI0D_Msk             (0x40UL)                  /*!< GCR PERCKCN: SPI0D (Bitfield-Mask: 0x01)              */
#define GCR_PERCKCN_SPI1D_Pos             (7UL)                     /*!< GCR PERCKCN: SPI1D (Bit 7)                            */
#define GCR_PERCKCN_SPI1D_Msk             (0x80UL)                  /*!< GCR PERCKCN: SPI1D (Bitfield-Mask: 0x01)              */
#define GCR_PERCKCN_SPI2D_Pos             (8UL)                     /*!< GCR PERCKCN: SPI2D (Bit 8)                            */
#define GCR_PERCKCN_SPI2D_Msk             (0x100UL)                 /*!< GCR PERCKCN: SPI2D (Bitfield-Mask: 0x01)              */
#define GCR_PERCKCN_UART0D_Pos            (9UL)                     /*!< GCR PERCKCN: UART0D (Bit 9)                           */
#define GCR_PERCKCN_UART0D_Msk            (0x200UL)                 /*!< GCR PERCKCN: UART0D (Bitfield-Mask: 0x01)             */
#define GCR_PERCKCN_UART1D_Pos            (10UL)                    /*!< GCR PERCKCN: UART1D (Bit 10)                          */
#define GCR_PERCKCN_UART1D_Msk            (0x400UL)                 /*!< GCR PERCKCN: UART1D (Bitfield-Mask: 0x01)             */
#define GCR_PERCKCN_MAGDSPD_Pos           (11UL)                    /*!< GCR PERCKCN: MAGDSPD (Bit 11)                         */
#define GCR_PERCKCN_MAGDSPD_Msk           (0x800UL)                 /*!< GCR PERCKCN: MAGDSPD (Bitfield-Mask: 0x01)            */
#define GCR_PERCKCN_SCD_Pos               (12UL)                    /*!< GCR PERCKCN: SCD (Bit 12)                             */
#define GCR_PERCKCN_SCD_Msk               (0x1000UL)                /*!< GCR PERCKCN: SCD (Bitfield-Mask: 0x01)                */
#define GCR_PERCKCN_I2CD_Pos              (13UL)                    /*!< GCR PERCKCN: I2CD (Bit 13)                            */
#define GCR_PERCKCN_I2CD_Msk              (0x2000UL)                /*!< GCR PERCKCN: I2CD (Bitfield-Mask: 0x01)               */
#define GCR_PERCKCN_CRYPTOD_Pos           (14UL)                    /*!< GCR PERCKCN: CRYPTOD (Bit 14)                         */
#define GCR_PERCKCN_CRYPTOD_Msk           (0x4000UL)                /*!< GCR PERCKCN: CRYPTOD (Bitfield-Mask: 0x01)            */
#define GCR_PERCKCN_T0D_Pos               (15UL)                    /*!< GCR PERCKCN: T0D (Bit 15)                             */
#define GCR_PERCKCN_T0D_Msk               (0x8000UL)                /*!< GCR PERCKCN: T0D (Bitfield-Mask: 0x01)                */
#define GCR_PERCKCN_T1D_Pos               (16UL)                    /*!< GCR PERCKCN: T1D (Bit 16)                             */
#define GCR_PERCKCN_T1D_Msk               (0x10000UL)               /*!< GCR PERCKCN: T1D (Bitfield-Mask: 0x01)                */
#define GCR_PERCKCN_T2D_Pos               (17UL)                    /*!< GCR PERCKCN: T2D (Bit 17)                             */
#define GCR_PERCKCN_T2D_Msk               (0x20000UL)               /*!< GCR PERCKCN: T2D (Bitfield-Mask: 0x01)                */
#define GCR_PERCKCN_T3D_Pos               (18UL)                    /*!< GCR PERCKCN: T3D (Bit 18)                             */
#define GCR_PERCKCN_T3D_Msk               (0x40000UL)               /*!< GCR PERCKCN: T3D (Bitfield-Mask: 0x01)                */
#define GCR_PERCKCN_T4D_Pos               (19UL)                    /*!< GCR PERCKCN: T4D (Bit 19)                             */
#define GCR_PERCKCN_T4D_Msk               (0x80000UL)               /*!< GCR PERCKCN: T4D (Bitfield-Mask: 0x01)                */
#define GCR_PERCKCN_T5D_Pos               (20UL)                    /*!< GCR PERCKCN: T5D (Bit 20)                             */
#define GCR_PERCKCN_T5D_Msk               (0x100000UL)              /*!< GCR PERCKCN: T5D (Bitfield-Mask: 0x01)                */
#define GCR_PERCKCN_MLCDD_Pos             (21UL)                    /*!< GCR PERCKCN: MLCDD (Bit 21)                           */
#define GCR_PERCKCN_MLCDD_Msk             (0x200000UL)              /*!< GCR PERCKCN: MLCDD (Bitfield-Mask: 0x01)              */
#define GCR_PERCKCN_KBDD_Pos              (22UL)                    /*!< GCR PERCKCN: KBDD (Bit 22)                            */
#define GCR_PERCKCN_KBDD_Msk              (0x400000UL)              /*!< GCR PERCKCN: KBDD (Bitfield-Mask: 0x01)               */
#define GCR_PERCKCN_ADCD_Pos              (23UL)                    /*!< GCR PERCKCN: ADCD (Bit 23)                            */
#define GCR_PERCKCN_ADCD_Msk              (0x800000UL)              /*!< GCR PERCKCN: ADCD (Bitfield-Mask: 0x01)               */
#define GCR_PERCKCN_DACD_Pos              (24UL)                    /*!< GCR PERCKCN: DACD (Bit 24)                            */
#define GCR_PERCKCN_DACD_Msk              (0x1000000UL)             /*!< GCR PERCKCN: DACD (Bitfield-Mask: 0x01)               */
/* ========================================================  MEMZCN  ========================================================= */
#define GCR_MEMZCN_SRAM0_Pos              (0UL)                     /*!< GCR MEMZCN: SRAM0 (Bit 0)                             */
#define GCR_MEMZCN_SRAM0_Msk              (0x1UL)                   /*!< GCR MEMZCN: SRAM0 (Bitfield-Mask: 0x01)               */
#define GCR_MEMZCN_SRAM1_Pos              (1UL)                     /*!< GCR MEMZCN: SRAM1 (Bit 1)                             */
#define GCR_MEMZCN_SRAM1_Msk              (0x2UL)                   /*!< GCR MEMZCN: SRAM1 (Bitfield-Mask: 0x01)               */
#define GCR_MEMZCN_ICACHE_Pos             (3UL)                     /*!< GCR MEMZCN: ICACHE (Bit 3)                            */
#define GCR_MEMZCN_ICACHE_Msk             (0x8UL)                   /*!< GCR MEMZCN: ICACHE (Bitfield-Mask: 0x01)              */
#define GCR_MEMZCN_CRYPTO_Pos             (5UL)                     /*!< GCR MEMZCN: CRYPTO (Bit 5)                            */
#define GCR_MEMZCN_CRYPTO_Msk             (0x20UL)                  /*!< GCR MEMZCN: CRYPTO (Bitfield-Mask: 0x01)              */
/* =========================================================  SCCK  ========================================================== */
#define GCR_SCCK_SC0FRQ_Pos               (0UL)                     /*!< GCR SCCK: SC0FRQ (Bit 0)                              */
#define GCR_SCCK_SC0FRQ_Msk               (0x3fUL)                  /*!< GCR SCCK: SC0FRQ (Bitfield-Mask: 0x3f)                */


/* =========================================================================================================================== */
/* ================                                            SIR                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  SISTAT  ========================================================= */
#define SIR_SISTAT_MAGIC_Pos              (0UL)                     /*!< SIR SISTAT: MAGIC (Bit 0)                             */
#define SIR_SISTAT_MAGIC_Msk              (0x1UL)                   /*!< SIR SISTAT: MAGIC (Bitfield-Mask: 0x01)               */
#define SIR_SISTAT_CRCERR_Pos             (1UL)                     /*!< SIR SISTAT: CRCERR (Bit 1)                            */
#define SIR_SISTAT_CRCERR_Msk             (0x2UL)                   /*!< SIR SISTAT: CRCERR (Bitfield-Mask: 0x01)              */
/* ========================================================  ERRADDR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            ICC                                            ================ */
/* =========================================================================================================================== */

/* =======================================================  CACHE_ID  ======================================================== */
#define ICC_CACHE_ID_RELNUM_Pos           (0UL)                     /*!< ICC CACHE_ID: RELNUM (Bit 0)                          */
#define ICC_CACHE_ID_RELNUM_Msk           (0x3fUL)                  /*!< ICC CACHE_ID: RELNUM (Bitfield-Mask: 0x3f)            */
#define ICC_CACHE_ID_PARTNUM_Pos          (6UL)                     /*!< ICC CACHE_ID: PARTNUM (Bit 6)                         */
#define ICC_CACHE_ID_PARTNUM_Msk          (0x3c0UL)                 /*!< ICC CACHE_ID: PARTNUM (Bitfield-Mask: 0x0f)           */
#define ICC_CACHE_ID_CCHID_Pos            (10UL)                    /*!< ICC CACHE_ID: CCHID (Bit 10)                          */
#define ICC_CACHE_ID_CCHID_Msk            (0xfc00UL)                /*!< ICC CACHE_ID: CCHID (Bitfield-Mask: 0x3f)             */
/* ========================================================  MEMCFG  ========================================================= */
#define ICC_MEMCFG_CCHSZ_Pos              (0UL)                     /*!< ICC MEMCFG: CCHSZ (Bit 0)                             */
#define ICC_MEMCFG_CCHSZ_Msk              (0xffffUL)                /*!< ICC MEMCFG: CCHSZ (Bitfield-Mask: 0xffff)             */
#define ICC_MEMCFG_MEMSZ_Pos              (16UL)                    /*!< ICC MEMCFG: MEMSZ (Bit 16)                            */
#define ICC_MEMCFG_MEMSZ_Msk              (0xffff0000UL)            /*!< ICC MEMCFG: MEMSZ (Bitfield-Mask: 0xffff)             */
/* ======================================================  CACHE_CTRL  ======================================================= */
#define ICC_CACHE_CTRL_CACHE_EN_Pos       (0UL)                     /*!< ICC CACHE_CTRL: CACHE_EN (Bit 0)                      */
#define ICC_CACHE_CTRL_CACHE_EN_Msk       (0x1UL)                   /*!< ICC CACHE_CTRL: CACHE_EN (Bitfield-Mask: 0x01)        */
#define ICC_CACHE_CTRL_CACHE_RDY_Pos      (16UL)                    /*!< ICC CACHE_CTRL: CACHE_RDY (Bit 16)                    */
#define ICC_CACHE_CTRL_CACHE_RDY_Msk      (0x10000UL)               /*!< ICC CACHE_CTRL: CACHE_RDY (Bitfield-Mask: 0x01)       */
/* ======================================================  INVALIDATE  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           GPIOn                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  EN  =========================================================== */
#define GPIOn_EN_BIT0_Pos                 (0UL)                     /*!< GPIOn EN: BIT0 (Bit 0)                                */
#define GPIOn_EN_BIT0_Msk                 (0x1UL)                   /*!< GPIOn EN: BIT0 (Bitfield-Mask: 0x01)                  */
#define GPIOn_EN_BIT1_Pos                 (1UL)                     /*!< GPIOn EN: BIT1 (Bit 1)                                */
#define GPIOn_EN_BIT1_Msk                 (0x2UL)                   /*!< GPIOn EN: BIT1 (Bitfield-Mask: 0x01)                  */
#define GPIOn_EN_BIT2_Pos                 (2UL)                     /*!< GPIOn EN: BIT2 (Bit 2)                                */
#define GPIOn_EN_BIT2_Msk                 (0x4UL)                   /*!< GPIOn EN: BIT2 (Bitfield-Mask: 0x01)                  */
#define GPIOn_EN_BIT3_Pos                 (3UL)                     /*!< GPIOn EN: BIT3 (Bit 3)                                */
#define GPIOn_EN_BIT3_Msk                 (0x8UL)                   /*!< GPIOn EN: BIT3 (Bitfield-Mask: 0x01)                  */
#define GPIOn_EN_BIT4_Pos                 (4UL)                     /*!< GPIOn EN: BIT4 (Bit 4)                                */
#define GPIOn_EN_BIT4_Msk                 (0x10UL)                  /*!< GPIOn EN: BIT4 (Bitfield-Mask: 0x01)                  */
#define GPIOn_EN_BIT5_Pos                 (5UL)                     /*!< GPIOn EN: BIT5 (Bit 5)                                */
#define GPIOn_EN_BIT5_Msk                 (0x20UL)                  /*!< GPIOn EN: BIT5 (Bitfield-Mask: 0x01)                  */
#define GPIOn_EN_BIT6_Pos                 (6UL)                     /*!< GPIOn EN: BIT6 (Bit 6)                                */
#define GPIOn_EN_BIT6_Msk                 (0x40UL)                  /*!< GPIOn EN: BIT6 (Bitfield-Mask: 0x01)                  */
#define GPIOn_EN_BIT7_Pos                 (7UL)                     /*!< GPIOn EN: BIT7 (Bit 7)                                */
#define GPIOn_EN_BIT7_Msk                 (0x80UL)                  /*!< GPIOn EN: BIT7 (Bitfield-Mask: 0x01)                  */
#define GPIOn_EN_BIT8_Pos                 (8UL)                     /*!< GPIOn EN: BIT8 (Bit 8)                                */
#define GPIOn_EN_BIT8_Msk                 (0x100UL)                 /*!< GPIOn EN: BIT8 (Bitfield-Mask: 0x01)                  */
#define GPIOn_EN_BIT9_Pos                 (9UL)                     /*!< GPIOn EN: BIT9 (Bit 9)                                */
#define GPIOn_EN_BIT9_Msk                 (0x200UL)                 /*!< GPIOn EN: BIT9 (Bitfield-Mask: 0x01)                  */
#define GPIOn_EN_BIT10_Pos                (10UL)                    /*!< GPIOn EN: BIT10 (Bit 10)                              */
#define GPIOn_EN_BIT10_Msk                (0x400UL)                 /*!< GPIOn EN: BIT10 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT11_Pos                (11UL)                    /*!< GPIOn EN: BIT11 (Bit 11)                              */
#define GPIOn_EN_BIT11_Msk                (0x800UL)                 /*!< GPIOn EN: BIT11 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT12_Pos                (12UL)                    /*!< GPIOn EN: BIT12 (Bit 12)                              */
#define GPIOn_EN_BIT12_Msk                (0x1000UL)                /*!< GPIOn EN: BIT12 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT13_Pos                (13UL)                    /*!< GPIOn EN: BIT13 (Bit 13)                              */
#define GPIOn_EN_BIT13_Msk                (0x2000UL)                /*!< GPIOn EN: BIT13 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT14_Pos                (14UL)                    /*!< GPIOn EN: BIT14 (Bit 14)                              */
#define GPIOn_EN_BIT14_Msk                (0x4000UL)                /*!< GPIOn EN: BIT14 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT15_Pos                (15UL)                    /*!< GPIOn EN: BIT15 (Bit 15)                              */
#define GPIOn_EN_BIT15_Msk                (0x8000UL)                /*!< GPIOn EN: BIT15 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT16_Pos                (16UL)                    /*!< GPIOn EN: BIT16 (Bit 16)                              */
#define GPIOn_EN_BIT16_Msk                (0x10000UL)               /*!< GPIOn EN: BIT16 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT17_Pos                (17UL)                    /*!< GPIOn EN: BIT17 (Bit 17)                              */
#define GPIOn_EN_BIT17_Msk                (0x20000UL)               /*!< GPIOn EN: BIT17 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT18_Pos                (18UL)                    /*!< GPIOn EN: BIT18 (Bit 18)                              */
#define GPIOn_EN_BIT18_Msk                (0x40000UL)               /*!< GPIOn EN: BIT18 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT19_Pos                (19UL)                    /*!< GPIOn EN: BIT19 (Bit 19)                              */
#define GPIOn_EN_BIT19_Msk                (0x80000UL)               /*!< GPIOn EN: BIT19 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT20_Pos                (20UL)                    /*!< GPIOn EN: BIT20 (Bit 20)                              */
#define GPIOn_EN_BIT20_Msk                (0x100000UL)              /*!< GPIOn EN: BIT20 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT21_Pos                (21UL)                    /*!< GPIOn EN: BIT21 (Bit 21)                              */
#define GPIOn_EN_BIT21_Msk                (0x200000UL)              /*!< GPIOn EN: BIT21 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT22_Pos                (22UL)                    /*!< GPIOn EN: BIT22 (Bit 22)                              */
#define GPIOn_EN_BIT22_Msk                (0x400000UL)              /*!< GPIOn EN: BIT22 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT23_Pos                (23UL)                    /*!< GPIOn EN: BIT23 (Bit 23)                              */
#define GPIOn_EN_BIT23_Msk                (0x800000UL)              /*!< GPIOn EN: BIT23 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT24_Pos                (24UL)                    /*!< GPIOn EN: BIT24 (Bit 24)                              */
#define GPIOn_EN_BIT24_Msk                (0x1000000UL)             /*!< GPIOn EN: BIT24 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT25_Pos                (25UL)                    /*!< GPIOn EN: BIT25 (Bit 25)                              */
#define GPIOn_EN_BIT25_Msk                (0x2000000UL)             /*!< GPIOn EN: BIT25 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT26_Pos                (26UL)                    /*!< GPIOn EN: BIT26 (Bit 26)                              */
#define GPIOn_EN_BIT26_Msk                (0x4000000UL)             /*!< GPIOn EN: BIT26 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT27_Pos                (27UL)                    /*!< GPIOn EN: BIT27 (Bit 27)                              */
#define GPIOn_EN_BIT27_Msk                (0x8000000UL)             /*!< GPIOn EN: BIT27 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT28_Pos                (28UL)                    /*!< GPIOn EN: BIT28 (Bit 28)                              */
#define GPIOn_EN_BIT28_Msk                (0x10000000UL)            /*!< GPIOn EN: BIT28 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT29_Pos                (29UL)                    /*!< GPIOn EN: BIT29 (Bit 29)                              */
#define GPIOn_EN_BIT29_Msk                (0x20000000UL)            /*!< GPIOn EN: BIT29 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT30_Pos                (30UL)                    /*!< GPIOn EN: BIT30 (Bit 30)                              */
#define GPIOn_EN_BIT30_Msk                (0x40000000UL)            /*!< GPIOn EN: BIT30 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN_BIT31_Pos                (31UL)                    /*!< GPIOn EN: BIT31 (Bit 31)                              */
#define GPIOn_EN_BIT31_Msk                (0x80000000UL)            /*!< GPIOn EN: BIT31 (Bitfield-Mask: 0x01)                 */
/* ========================================================  OUT_EN  ========================================================= */
#define GPIOn_OUT_EN_BIT0_Pos             (0UL)                     /*!< GPIOn OUT_EN: BIT0 (Bit 0)                            */
#define GPIOn_OUT_EN_BIT0_Msk             (0x1UL)                   /*!< GPIOn OUT_EN: BIT0 (Bitfield-Mask: 0x01)              */
#define GPIOn_OUT_EN_BIT1_Pos             (1UL)                     /*!< GPIOn OUT_EN: BIT1 (Bit 1)                            */
#define GPIOn_OUT_EN_BIT1_Msk             (0x2UL)                   /*!< GPIOn OUT_EN: BIT1 (Bitfield-Mask: 0x01)              */
#define GPIOn_OUT_EN_BIT2_Pos             (2UL)                     /*!< GPIOn OUT_EN: BIT2 (Bit 2)                            */
#define GPIOn_OUT_EN_BIT2_Msk             (0x4UL)                   /*!< GPIOn OUT_EN: BIT2 (Bitfield-Mask: 0x01)              */
#define GPIOn_OUT_EN_BIT3_Pos             (3UL)                     /*!< GPIOn OUT_EN: BIT3 (Bit 3)                            */
#define GPIOn_OUT_EN_BIT3_Msk             (0x8UL)                   /*!< GPIOn OUT_EN: BIT3 (Bitfield-Mask: 0x01)              */
#define GPIOn_OUT_EN_BIT4_Pos             (4UL)                     /*!< GPIOn OUT_EN: BIT4 (Bit 4)                            */
#define GPIOn_OUT_EN_BIT4_Msk             (0x10UL)                  /*!< GPIOn OUT_EN: BIT4 (Bitfield-Mask: 0x01)              */
#define GPIOn_OUT_EN_BIT5_Pos             (5UL)                     /*!< GPIOn OUT_EN: BIT5 (Bit 5)                            */
#define GPIOn_OUT_EN_BIT5_Msk             (0x20UL)                  /*!< GPIOn OUT_EN: BIT5 (Bitfield-Mask: 0x01)              */
#define GPIOn_OUT_EN_BIT6_Pos             (6UL)                     /*!< GPIOn OUT_EN: BIT6 (Bit 6)                            */
#define GPIOn_OUT_EN_BIT6_Msk             (0x40UL)                  /*!< GPIOn OUT_EN: BIT6 (Bitfield-Mask: 0x01)              */
#define GPIOn_OUT_EN_BIT7_Pos             (7UL)                     /*!< GPIOn OUT_EN: BIT7 (Bit 7)                            */
#define GPIOn_OUT_EN_BIT7_Msk             (0x80UL)                  /*!< GPIOn OUT_EN: BIT7 (Bitfield-Mask: 0x01)              */
#define GPIOn_OUT_EN_BIT8_Pos             (8UL)                     /*!< GPIOn OUT_EN: BIT8 (Bit 8)                            */
#define GPIOn_OUT_EN_BIT8_Msk             (0x100UL)                 /*!< GPIOn OUT_EN: BIT8 (Bitfield-Mask: 0x01)              */
#define GPIOn_OUT_EN_BIT9_Pos             (9UL)                     /*!< GPIOn OUT_EN: BIT9 (Bit 9)                            */
#define GPIOn_OUT_EN_BIT9_Msk             (0x200UL)                 /*!< GPIOn OUT_EN: BIT9 (Bitfield-Mask: 0x01)              */
#define GPIOn_OUT_EN_BIT10_Pos            (10UL)                    /*!< GPIOn OUT_EN: BIT10 (Bit 10)                          */
#define GPIOn_OUT_EN_BIT10_Msk            (0x400UL)                 /*!< GPIOn OUT_EN: BIT10 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT11_Pos            (11UL)                    /*!< GPIOn OUT_EN: BIT11 (Bit 11)                          */
#define GPIOn_OUT_EN_BIT11_Msk            (0x800UL)                 /*!< GPIOn OUT_EN: BIT11 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT12_Pos            (12UL)                    /*!< GPIOn OUT_EN: BIT12 (Bit 12)                          */
#define GPIOn_OUT_EN_BIT12_Msk            (0x1000UL)                /*!< GPIOn OUT_EN: BIT12 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT13_Pos            (13UL)                    /*!< GPIOn OUT_EN: BIT13 (Bit 13)                          */
#define GPIOn_OUT_EN_BIT13_Msk            (0x2000UL)                /*!< GPIOn OUT_EN: BIT13 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT14_Pos            (14UL)                    /*!< GPIOn OUT_EN: BIT14 (Bit 14)                          */
#define GPIOn_OUT_EN_BIT14_Msk            (0x4000UL)                /*!< GPIOn OUT_EN: BIT14 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT15_Pos            (15UL)                    /*!< GPIOn OUT_EN: BIT15 (Bit 15)                          */
#define GPIOn_OUT_EN_BIT15_Msk            (0x8000UL)                /*!< GPIOn OUT_EN: BIT15 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT16_Pos            (16UL)                    /*!< GPIOn OUT_EN: BIT16 (Bit 16)                          */
#define GPIOn_OUT_EN_BIT16_Msk            (0x10000UL)               /*!< GPIOn OUT_EN: BIT16 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT17_Pos            (17UL)                    /*!< GPIOn OUT_EN: BIT17 (Bit 17)                          */
#define GPIOn_OUT_EN_BIT17_Msk            (0x20000UL)               /*!< GPIOn OUT_EN: BIT17 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT18_Pos            (18UL)                    /*!< GPIOn OUT_EN: BIT18 (Bit 18)                          */
#define GPIOn_OUT_EN_BIT18_Msk            (0x40000UL)               /*!< GPIOn OUT_EN: BIT18 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT19_Pos            (19UL)                    /*!< GPIOn OUT_EN: BIT19 (Bit 19)                          */
#define GPIOn_OUT_EN_BIT19_Msk            (0x80000UL)               /*!< GPIOn OUT_EN: BIT19 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT20_Pos            (20UL)                    /*!< GPIOn OUT_EN: BIT20 (Bit 20)                          */
#define GPIOn_OUT_EN_BIT20_Msk            (0x100000UL)              /*!< GPIOn OUT_EN: BIT20 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT21_Pos            (21UL)                    /*!< GPIOn OUT_EN: BIT21 (Bit 21)                          */
#define GPIOn_OUT_EN_BIT21_Msk            (0x200000UL)              /*!< GPIOn OUT_EN: BIT21 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT22_Pos            (22UL)                    /*!< GPIOn OUT_EN: BIT22 (Bit 22)                          */
#define GPIOn_OUT_EN_BIT22_Msk            (0x400000UL)              /*!< GPIOn OUT_EN: BIT22 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT23_Pos            (23UL)                    /*!< GPIOn OUT_EN: BIT23 (Bit 23)                          */
#define GPIOn_OUT_EN_BIT23_Msk            (0x800000UL)              /*!< GPIOn OUT_EN: BIT23 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT24_Pos            (24UL)                    /*!< GPIOn OUT_EN: BIT24 (Bit 24)                          */
#define GPIOn_OUT_EN_BIT24_Msk            (0x1000000UL)             /*!< GPIOn OUT_EN: BIT24 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT25_Pos            (25UL)                    /*!< GPIOn OUT_EN: BIT25 (Bit 25)                          */
#define GPIOn_OUT_EN_BIT25_Msk            (0x2000000UL)             /*!< GPIOn OUT_EN: BIT25 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT26_Pos            (26UL)                    /*!< GPIOn OUT_EN: BIT26 (Bit 26)                          */
#define GPIOn_OUT_EN_BIT26_Msk            (0x4000000UL)             /*!< GPIOn OUT_EN: BIT26 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT27_Pos            (27UL)                    /*!< GPIOn OUT_EN: BIT27 (Bit 27)                          */
#define GPIOn_OUT_EN_BIT27_Msk            (0x8000000UL)             /*!< GPIOn OUT_EN: BIT27 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT28_Pos            (28UL)                    /*!< GPIOn OUT_EN: BIT28 (Bit 28)                          */
#define GPIOn_OUT_EN_BIT28_Msk            (0x10000000UL)            /*!< GPIOn OUT_EN: BIT28 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT29_Pos            (29UL)                    /*!< GPIOn OUT_EN: BIT29 (Bit 29)                          */
#define GPIOn_OUT_EN_BIT29_Msk            (0x20000000UL)            /*!< GPIOn OUT_EN: BIT29 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT30_Pos            (30UL)                    /*!< GPIOn OUT_EN: BIT30 (Bit 30)                          */
#define GPIOn_OUT_EN_BIT30_Msk            (0x40000000UL)            /*!< GPIOn OUT_EN: BIT30 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_EN_BIT31_Pos            (31UL)                    /*!< GPIOn OUT_EN: BIT31 (Bit 31)                          */
#define GPIOn_OUT_EN_BIT31_Msk            (0x80000000UL)            /*!< GPIOn OUT_EN: BIT31 (Bitfield-Mask: 0x01)             */
/* ==========================================================  OUT  ========================================================== */
#define GPIOn_OUT_BIT0_Pos                (0UL)                     /*!< GPIOn OUT: BIT0 (Bit 0)                               */
#define GPIOn_OUT_BIT0_Msk                (0x1UL)                   /*!< GPIOn OUT: BIT0 (Bitfield-Mask: 0x01)                 */
#define GPIOn_OUT_BIT1_Pos                (1UL)                     /*!< GPIOn OUT: BIT1 (Bit 1)                               */
#define GPIOn_OUT_BIT1_Msk                (0x2UL)                   /*!< GPIOn OUT: BIT1 (Bitfield-Mask: 0x01)                 */
#define GPIOn_OUT_BIT2_Pos                (2UL)                     /*!< GPIOn OUT: BIT2 (Bit 2)                               */
#define GPIOn_OUT_BIT2_Msk                (0x4UL)                   /*!< GPIOn OUT: BIT2 (Bitfield-Mask: 0x01)                 */
#define GPIOn_OUT_BIT3_Pos                (3UL)                     /*!< GPIOn OUT: BIT3 (Bit 3)                               */
#define GPIOn_OUT_BIT3_Msk                (0x8UL)                   /*!< GPIOn OUT: BIT3 (Bitfield-Mask: 0x01)                 */
#define GPIOn_OUT_BIT4_Pos                (4UL)                     /*!< GPIOn OUT: BIT4 (Bit 4)                               */
#define GPIOn_OUT_BIT4_Msk                (0x10UL)                  /*!< GPIOn OUT: BIT4 (Bitfield-Mask: 0x01)                 */
#define GPIOn_OUT_BIT5_Pos                (5UL)                     /*!< GPIOn OUT: BIT5 (Bit 5)                               */
#define GPIOn_OUT_BIT5_Msk                (0x20UL)                  /*!< GPIOn OUT: BIT5 (Bitfield-Mask: 0x01)                 */
#define GPIOn_OUT_BIT6_Pos                (6UL)                     /*!< GPIOn OUT: BIT6 (Bit 6)                               */
#define GPIOn_OUT_BIT6_Msk                (0x40UL)                  /*!< GPIOn OUT: BIT6 (Bitfield-Mask: 0x01)                 */
#define GPIOn_OUT_BIT7_Pos                (7UL)                     /*!< GPIOn OUT: BIT7 (Bit 7)                               */
#define GPIOn_OUT_BIT7_Msk                (0x80UL)                  /*!< GPIOn OUT: BIT7 (Bitfield-Mask: 0x01)                 */
#define GPIOn_OUT_BIT8_Pos                (8UL)                     /*!< GPIOn OUT: BIT8 (Bit 8)                               */
#define GPIOn_OUT_BIT8_Msk                (0x100UL)                 /*!< GPIOn OUT: BIT8 (Bitfield-Mask: 0x01)                 */
#define GPIOn_OUT_BIT9_Pos                (9UL)                     /*!< GPIOn OUT: BIT9 (Bit 9)                               */
#define GPIOn_OUT_BIT9_Msk                (0x200UL)                 /*!< GPIOn OUT: BIT9 (Bitfield-Mask: 0x01)                 */
#define GPIOn_OUT_BIT10_Pos               (10UL)                    /*!< GPIOn OUT: BIT10 (Bit 10)                             */
#define GPIOn_OUT_BIT10_Msk               (0x400UL)                 /*!< GPIOn OUT: BIT10 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT11_Pos               (11UL)                    /*!< GPIOn OUT: BIT11 (Bit 11)                             */
#define GPIOn_OUT_BIT11_Msk               (0x800UL)                 /*!< GPIOn OUT: BIT11 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT12_Pos               (12UL)                    /*!< GPIOn OUT: BIT12 (Bit 12)                             */
#define GPIOn_OUT_BIT12_Msk               (0x1000UL)                /*!< GPIOn OUT: BIT12 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT13_Pos               (13UL)                    /*!< GPIOn OUT: BIT13 (Bit 13)                             */
#define GPIOn_OUT_BIT13_Msk               (0x2000UL)                /*!< GPIOn OUT: BIT13 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT14_Pos               (14UL)                    /*!< GPIOn OUT: BIT14 (Bit 14)                             */
#define GPIOn_OUT_BIT14_Msk               (0x4000UL)                /*!< GPIOn OUT: BIT14 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT15_Pos               (15UL)                    /*!< GPIOn OUT: BIT15 (Bit 15)                             */
#define GPIOn_OUT_BIT15_Msk               (0x8000UL)                /*!< GPIOn OUT: BIT15 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT16_Pos               (16UL)                    /*!< GPIOn OUT: BIT16 (Bit 16)                             */
#define GPIOn_OUT_BIT16_Msk               (0x10000UL)               /*!< GPIOn OUT: BIT16 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT17_Pos               (17UL)                    /*!< GPIOn OUT: BIT17 (Bit 17)                             */
#define GPIOn_OUT_BIT17_Msk               (0x20000UL)               /*!< GPIOn OUT: BIT17 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT18_Pos               (18UL)                    /*!< GPIOn OUT: BIT18 (Bit 18)                             */
#define GPIOn_OUT_BIT18_Msk               (0x40000UL)               /*!< GPIOn OUT: BIT18 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT19_Pos               (19UL)                    /*!< GPIOn OUT: BIT19 (Bit 19)                             */
#define GPIOn_OUT_BIT19_Msk               (0x80000UL)               /*!< GPIOn OUT: BIT19 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT20_Pos               (20UL)                    /*!< GPIOn OUT: BIT20 (Bit 20)                             */
#define GPIOn_OUT_BIT20_Msk               (0x100000UL)              /*!< GPIOn OUT: BIT20 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT21_Pos               (21UL)                    /*!< GPIOn OUT: BIT21 (Bit 21)                             */
#define GPIOn_OUT_BIT21_Msk               (0x200000UL)              /*!< GPIOn OUT: BIT21 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT22_Pos               (22UL)                    /*!< GPIOn OUT: BIT22 (Bit 22)                             */
#define GPIOn_OUT_BIT22_Msk               (0x400000UL)              /*!< GPIOn OUT: BIT22 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT23_Pos               (23UL)                    /*!< GPIOn OUT: BIT23 (Bit 23)                             */
#define GPIOn_OUT_BIT23_Msk               (0x800000UL)              /*!< GPIOn OUT: BIT23 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT24_Pos               (24UL)                    /*!< GPIOn OUT: BIT24 (Bit 24)                             */
#define GPIOn_OUT_BIT24_Msk               (0x1000000UL)             /*!< GPIOn OUT: BIT24 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT25_Pos               (25UL)                    /*!< GPIOn OUT: BIT25 (Bit 25)                             */
#define GPIOn_OUT_BIT25_Msk               (0x2000000UL)             /*!< GPIOn OUT: BIT25 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT26_Pos               (26UL)                    /*!< GPIOn OUT: BIT26 (Bit 26)                             */
#define GPIOn_OUT_BIT26_Msk               (0x4000000UL)             /*!< GPIOn OUT: BIT26 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT27_Pos               (27UL)                    /*!< GPIOn OUT: BIT27 (Bit 27)                             */
#define GPIOn_OUT_BIT27_Msk               (0x8000000UL)             /*!< GPIOn OUT: BIT27 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT28_Pos               (28UL)                    /*!< GPIOn OUT: BIT28 (Bit 28)                             */
#define GPIOn_OUT_BIT28_Msk               (0x10000000UL)            /*!< GPIOn OUT: BIT28 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT29_Pos               (29UL)                    /*!< GPIOn OUT: BIT29 (Bit 29)                             */
#define GPIOn_OUT_BIT29_Msk               (0x20000000UL)            /*!< GPIOn OUT: BIT29 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT30_Pos               (30UL)                    /*!< GPIOn OUT: BIT30 (Bit 30)                             */
#define GPIOn_OUT_BIT30_Msk               (0x40000000UL)            /*!< GPIOn OUT: BIT30 (Bitfield-Mask: 0x01)                */
#define GPIOn_OUT_BIT31_Pos               (31UL)                    /*!< GPIOn OUT: BIT31 (Bit 31)                             */
#define GPIOn_OUT_BIT31_Msk               (0x80000000UL)            /*!< GPIOn OUT: BIT31 (Bitfield-Mask: 0x01)                */
/* ========================================================  OUT_SET  ======================================================== */
#define GPIOn_OUT_SET_BIT0_Pos            (0UL)                     /*!< GPIOn OUT_SET: BIT0 (Bit 0)                           */
#define GPIOn_OUT_SET_BIT0_Msk            (0x1UL)                   /*!< GPIOn OUT_SET: BIT0 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_SET_BIT1_Pos            (1UL)                     /*!< GPIOn OUT_SET: BIT1 (Bit 1)                           */
#define GPIOn_OUT_SET_BIT1_Msk            (0x2UL)                   /*!< GPIOn OUT_SET: BIT1 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_SET_BIT2_Pos            (2UL)                     /*!< GPIOn OUT_SET: BIT2 (Bit 2)                           */
#define GPIOn_OUT_SET_BIT2_Msk            (0x4UL)                   /*!< GPIOn OUT_SET: BIT2 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_SET_BIT3_Pos            (3UL)                     /*!< GPIOn OUT_SET: BIT3 (Bit 3)                           */
#define GPIOn_OUT_SET_BIT3_Msk            (0x8UL)                   /*!< GPIOn OUT_SET: BIT3 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_SET_BIT4_Pos            (4UL)                     /*!< GPIOn OUT_SET: BIT4 (Bit 4)                           */
#define GPIOn_OUT_SET_BIT4_Msk            (0x10UL)                  /*!< GPIOn OUT_SET: BIT4 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_SET_BIT5_Pos            (5UL)                     /*!< GPIOn OUT_SET: BIT5 (Bit 5)                           */
#define GPIOn_OUT_SET_BIT5_Msk            (0x20UL)                  /*!< GPIOn OUT_SET: BIT5 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_SET_BIT6_Pos            (6UL)                     /*!< GPIOn OUT_SET: BIT6 (Bit 6)                           */
#define GPIOn_OUT_SET_BIT6_Msk            (0x40UL)                  /*!< GPIOn OUT_SET: BIT6 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_SET_BIT7_Pos            (7UL)                     /*!< GPIOn OUT_SET: BIT7 (Bit 7)                           */
#define GPIOn_OUT_SET_BIT7_Msk            (0x80UL)                  /*!< GPIOn OUT_SET: BIT7 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_SET_BIT8_Pos            (8UL)                     /*!< GPIOn OUT_SET: BIT8 (Bit 8)                           */
#define GPIOn_OUT_SET_BIT8_Msk            (0x100UL)                 /*!< GPIOn OUT_SET: BIT8 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_SET_BIT9_Pos            (9UL)                     /*!< GPIOn OUT_SET: BIT9 (Bit 9)                           */
#define GPIOn_OUT_SET_BIT9_Msk            (0x200UL)                 /*!< GPIOn OUT_SET: BIT9 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_SET_BIT10_Pos           (10UL)                    /*!< GPIOn OUT_SET: BIT10 (Bit 10)                         */
#define GPIOn_OUT_SET_BIT10_Msk           (0x400UL)                 /*!< GPIOn OUT_SET: BIT10 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT11_Pos           (11UL)                    /*!< GPIOn OUT_SET: BIT11 (Bit 11)                         */
#define GPIOn_OUT_SET_BIT11_Msk           (0x800UL)                 /*!< GPIOn OUT_SET: BIT11 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT12_Pos           (12UL)                    /*!< GPIOn OUT_SET: BIT12 (Bit 12)                         */
#define GPIOn_OUT_SET_BIT12_Msk           (0x1000UL)                /*!< GPIOn OUT_SET: BIT12 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT13_Pos           (13UL)                    /*!< GPIOn OUT_SET: BIT13 (Bit 13)                         */
#define GPIOn_OUT_SET_BIT13_Msk           (0x2000UL)                /*!< GPIOn OUT_SET: BIT13 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT14_Pos           (14UL)                    /*!< GPIOn OUT_SET: BIT14 (Bit 14)                         */
#define GPIOn_OUT_SET_BIT14_Msk           (0x4000UL)                /*!< GPIOn OUT_SET: BIT14 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT15_Pos           (15UL)                    /*!< GPIOn OUT_SET: BIT15 (Bit 15)                         */
#define GPIOn_OUT_SET_BIT15_Msk           (0x8000UL)                /*!< GPIOn OUT_SET: BIT15 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT16_Pos           (16UL)                    /*!< GPIOn OUT_SET: BIT16 (Bit 16)                         */
#define GPIOn_OUT_SET_BIT16_Msk           (0x10000UL)               /*!< GPIOn OUT_SET: BIT16 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT17_Pos           (17UL)                    /*!< GPIOn OUT_SET: BIT17 (Bit 17)                         */
#define GPIOn_OUT_SET_BIT17_Msk           (0x20000UL)               /*!< GPIOn OUT_SET: BIT17 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT18_Pos           (18UL)                    /*!< GPIOn OUT_SET: BIT18 (Bit 18)                         */
#define GPIOn_OUT_SET_BIT18_Msk           (0x40000UL)               /*!< GPIOn OUT_SET: BIT18 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT19_Pos           (19UL)                    /*!< GPIOn OUT_SET: BIT19 (Bit 19)                         */
#define GPIOn_OUT_SET_BIT19_Msk           (0x80000UL)               /*!< GPIOn OUT_SET: BIT19 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT20_Pos           (20UL)                    /*!< GPIOn OUT_SET: BIT20 (Bit 20)                         */
#define GPIOn_OUT_SET_BIT20_Msk           (0x100000UL)              /*!< GPIOn OUT_SET: BIT20 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT21_Pos           (21UL)                    /*!< GPIOn OUT_SET: BIT21 (Bit 21)                         */
#define GPIOn_OUT_SET_BIT21_Msk           (0x200000UL)              /*!< GPIOn OUT_SET: BIT21 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT22_Pos           (22UL)                    /*!< GPIOn OUT_SET: BIT22 (Bit 22)                         */
#define GPIOn_OUT_SET_BIT22_Msk           (0x400000UL)              /*!< GPIOn OUT_SET: BIT22 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT23_Pos           (23UL)                    /*!< GPIOn OUT_SET: BIT23 (Bit 23)                         */
#define GPIOn_OUT_SET_BIT23_Msk           (0x800000UL)              /*!< GPIOn OUT_SET: BIT23 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT24_Pos           (24UL)                    /*!< GPIOn OUT_SET: BIT24 (Bit 24)                         */
#define GPIOn_OUT_SET_BIT24_Msk           (0x1000000UL)             /*!< GPIOn OUT_SET: BIT24 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT25_Pos           (25UL)                    /*!< GPIOn OUT_SET: BIT25 (Bit 25)                         */
#define GPIOn_OUT_SET_BIT25_Msk           (0x2000000UL)             /*!< GPIOn OUT_SET: BIT25 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT26_Pos           (26UL)                    /*!< GPIOn OUT_SET: BIT26 (Bit 26)                         */
#define GPIOn_OUT_SET_BIT26_Msk           (0x4000000UL)             /*!< GPIOn OUT_SET: BIT26 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT27_Pos           (27UL)                    /*!< GPIOn OUT_SET: BIT27 (Bit 27)                         */
#define GPIOn_OUT_SET_BIT27_Msk           (0x8000000UL)             /*!< GPIOn OUT_SET: BIT27 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT28_Pos           (28UL)                    /*!< GPIOn OUT_SET: BIT28 (Bit 28)                         */
#define GPIOn_OUT_SET_BIT28_Msk           (0x10000000UL)            /*!< GPIOn OUT_SET: BIT28 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT29_Pos           (29UL)                    /*!< GPIOn OUT_SET: BIT29 (Bit 29)                         */
#define GPIOn_OUT_SET_BIT29_Msk           (0x20000000UL)            /*!< GPIOn OUT_SET: BIT29 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT30_Pos           (30UL)                    /*!< GPIOn OUT_SET: BIT30 (Bit 30)                         */
#define GPIOn_OUT_SET_BIT30_Msk           (0x40000000UL)            /*!< GPIOn OUT_SET: BIT30 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_SET_BIT31_Pos           (31UL)                    /*!< GPIOn OUT_SET: BIT31 (Bit 31)                         */
#define GPIOn_OUT_SET_BIT31_Msk           (0x80000000UL)            /*!< GPIOn OUT_SET: BIT31 (Bitfield-Mask: 0x01)            */
/* ========================================================  OUT_CLR  ======================================================== */
#define GPIOn_OUT_CLR_BIT0_Pos            (0UL)                     /*!< GPIOn OUT_CLR: BIT0 (Bit 0)                           */
#define GPIOn_OUT_CLR_BIT0_Msk            (0x1UL)                   /*!< GPIOn OUT_CLR: BIT0 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_CLR_BIT1_Pos            (1UL)                     /*!< GPIOn OUT_CLR: BIT1 (Bit 1)                           */
#define GPIOn_OUT_CLR_BIT1_Msk            (0x2UL)                   /*!< GPIOn OUT_CLR: BIT1 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_CLR_BIT2_Pos            (2UL)                     /*!< GPIOn OUT_CLR: BIT2 (Bit 2)                           */
#define GPIOn_OUT_CLR_BIT2_Msk            (0x4UL)                   /*!< GPIOn OUT_CLR: BIT2 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_CLR_BIT3_Pos            (3UL)                     /*!< GPIOn OUT_CLR: BIT3 (Bit 3)                           */
#define GPIOn_OUT_CLR_BIT3_Msk            (0x8UL)                   /*!< GPIOn OUT_CLR: BIT3 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_CLR_BIT4_Pos            (4UL)                     /*!< GPIOn OUT_CLR: BIT4 (Bit 4)                           */
#define GPIOn_OUT_CLR_BIT4_Msk            (0x10UL)                  /*!< GPIOn OUT_CLR: BIT4 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_CLR_BIT5_Pos            (5UL)                     /*!< GPIOn OUT_CLR: BIT5 (Bit 5)                           */
#define GPIOn_OUT_CLR_BIT5_Msk            (0x20UL)                  /*!< GPIOn OUT_CLR: BIT5 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_CLR_BIT6_Pos            (6UL)                     /*!< GPIOn OUT_CLR: BIT6 (Bit 6)                           */
#define GPIOn_OUT_CLR_BIT6_Msk            (0x40UL)                  /*!< GPIOn OUT_CLR: BIT6 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_CLR_BIT7_Pos            (7UL)                     /*!< GPIOn OUT_CLR: BIT7 (Bit 7)                           */
#define GPIOn_OUT_CLR_BIT7_Msk            (0x80UL)                  /*!< GPIOn OUT_CLR: BIT7 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_CLR_BIT8_Pos            (8UL)                     /*!< GPIOn OUT_CLR: BIT8 (Bit 8)                           */
#define GPIOn_OUT_CLR_BIT8_Msk            (0x100UL)                 /*!< GPIOn OUT_CLR: BIT8 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_CLR_BIT9_Pos            (9UL)                     /*!< GPIOn OUT_CLR: BIT9 (Bit 9)                           */
#define GPIOn_OUT_CLR_BIT9_Msk            (0x200UL)                 /*!< GPIOn OUT_CLR: BIT9 (Bitfield-Mask: 0x01)             */
#define GPIOn_OUT_CLR_BIT10_Pos           (10UL)                    /*!< GPIOn OUT_CLR: BIT10 (Bit 10)                         */
#define GPIOn_OUT_CLR_BIT10_Msk           (0x400UL)                 /*!< GPIOn OUT_CLR: BIT10 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT11_Pos           (11UL)                    /*!< GPIOn OUT_CLR: BIT11 (Bit 11)                         */
#define GPIOn_OUT_CLR_BIT11_Msk           (0x800UL)                 /*!< GPIOn OUT_CLR: BIT11 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT12_Pos           (12UL)                    /*!< GPIOn OUT_CLR: BIT12 (Bit 12)                         */
#define GPIOn_OUT_CLR_BIT12_Msk           (0x1000UL)                /*!< GPIOn OUT_CLR: BIT12 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT13_Pos           (13UL)                    /*!< GPIOn OUT_CLR: BIT13 (Bit 13)                         */
#define GPIOn_OUT_CLR_BIT13_Msk           (0x2000UL)                /*!< GPIOn OUT_CLR: BIT13 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT14_Pos           (14UL)                    /*!< GPIOn OUT_CLR: BIT14 (Bit 14)                         */
#define GPIOn_OUT_CLR_BIT14_Msk           (0x4000UL)                /*!< GPIOn OUT_CLR: BIT14 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT15_Pos           (15UL)                    /*!< GPIOn OUT_CLR: BIT15 (Bit 15)                         */
#define GPIOn_OUT_CLR_BIT15_Msk           (0x8000UL)                /*!< GPIOn OUT_CLR: BIT15 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT16_Pos           (16UL)                    /*!< GPIOn OUT_CLR: BIT16 (Bit 16)                         */
#define GPIOn_OUT_CLR_BIT16_Msk           (0x10000UL)               /*!< GPIOn OUT_CLR: BIT16 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT17_Pos           (17UL)                    /*!< GPIOn OUT_CLR: BIT17 (Bit 17)                         */
#define GPIOn_OUT_CLR_BIT17_Msk           (0x20000UL)               /*!< GPIOn OUT_CLR: BIT17 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT18_Pos           (18UL)                    /*!< GPIOn OUT_CLR: BIT18 (Bit 18)                         */
#define GPIOn_OUT_CLR_BIT18_Msk           (0x40000UL)               /*!< GPIOn OUT_CLR: BIT18 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT19_Pos           (19UL)                    /*!< GPIOn OUT_CLR: BIT19 (Bit 19)                         */
#define GPIOn_OUT_CLR_BIT19_Msk           (0x80000UL)               /*!< GPIOn OUT_CLR: BIT19 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT20_Pos           (20UL)                    /*!< GPIOn OUT_CLR: BIT20 (Bit 20)                         */
#define GPIOn_OUT_CLR_BIT20_Msk           (0x100000UL)              /*!< GPIOn OUT_CLR: BIT20 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT21_Pos           (21UL)                    /*!< GPIOn OUT_CLR: BIT21 (Bit 21)                         */
#define GPIOn_OUT_CLR_BIT21_Msk           (0x200000UL)              /*!< GPIOn OUT_CLR: BIT21 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT22_Pos           (22UL)                    /*!< GPIOn OUT_CLR: BIT22 (Bit 22)                         */
#define GPIOn_OUT_CLR_BIT22_Msk           (0x400000UL)              /*!< GPIOn OUT_CLR: BIT22 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT23_Pos           (23UL)                    /*!< GPIOn OUT_CLR: BIT23 (Bit 23)                         */
#define GPIOn_OUT_CLR_BIT23_Msk           (0x800000UL)              /*!< GPIOn OUT_CLR: BIT23 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT24_Pos           (24UL)                    /*!< GPIOn OUT_CLR: BIT24 (Bit 24)                         */
#define GPIOn_OUT_CLR_BIT24_Msk           (0x1000000UL)             /*!< GPIOn OUT_CLR: BIT24 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT25_Pos           (25UL)                    /*!< GPIOn OUT_CLR: BIT25 (Bit 25)                         */
#define GPIOn_OUT_CLR_BIT25_Msk           (0x2000000UL)             /*!< GPIOn OUT_CLR: BIT25 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT26_Pos           (26UL)                    /*!< GPIOn OUT_CLR: BIT26 (Bit 26)                         */
#define GPIOn_OUT_CLR_BIT26_Msk           (0x4000000UL)             /*!< GPIOn OUT_CLR: BIT26 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT27_Pos           (27UL)                    /*!< GPIOn OUT_CLR: BIT27 (Bit 27)                         */
#define GPIOn_OUT_CLR_BIT27_Msk           (0x8000000UL)             /*!< GPIOn OUT_CLR: BIT27 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT28_Pos           (28UL)                    /*!< GPIOn OUT_CLR: BIT28 (Bit 28)                         */
#define GPIOn_OUT_CLR_BIT28_Msk           (0x10000000UL)            /*!< GPIOn OUT_CLR: BIT28 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT29_Pos           (29UL)                    /*!< GPIOn OUT_CLR: BIT29 (Bit 29)                         */
#define GPIOn_OUT_CLR_BIT29_Msk           (0x20000000UL)            /*!< GPIOn OUT_CLR: BIT29 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT30_Pos           (30UL)                    /*!< GPIOn OUT_CLR: BIT30 (Bit 30)                         */
#define GPIOn_OUT_CLR_BIT30_Msk           (0x40000000UL)            /*!< GPIOn OUT_CLR: BIT30 (Bitfield-Mask: 0x01)            */
#define GPIOn_OUT_CLR_BIT31_Pos           (31UL)                    /*!< GPIOn OUT_CLR: BIT31 (Bit 31)                         */
#define GPIOn_OUT_CLR_BIT31_Msk           (0x80000000UL)            /*!< GPIOn OUT_CLR: BIT31 (Bitfield-Mask: 0x01)            */
/* ==========================================================  IN  =========================================================== */
#define GPIOn_IN_BIT0_Pos                 (0UL)                     /*!< GPIOn IN: BIT0 (Bit 0)                                */
#define GPIOn_IN_BIT0_Msk                 (0x1UL)                   /*!< GPIOn IN: BIT0 (Bitfield-Mask: 0x01)                  */
#define GPIOn_IN_BIT1_Pos                 (1UL)                     /*!< GPIOn IN: BIT1 (Bit 1)                                */
#define GPIOn_IN_BIT1_Msk                 (0x2UL)                   /*!< GPIOn IN: BIT1 (Bitfield-Mask: 0x01)                  */
#define GPIOn_IN_BIT2_Pos                 (2UL)                     /*!< GPIOn IN: BIT2 (Bit 2)                                */
#define GPIOn_IN_BIT2_Msk                 (0x4UL)                   /*!< GPIOn IN: BIT2 (Bitfield-Mask: 0x01)                  */
#define GPIOn_IN_BIT3_Pos                 (3UL)                     /*!< GPIOn IN: BIT3 (Bit 3)                                */
#define GPIOn_IN_BIT3_Msk                 (0x8UL)                   /*!< GPIOn IN: BIT3 (Bitfield-Mask: 0x01)                  */
#define GPIOn_IN_BIT4_Pos                 (4UL)                     /*!< GPIOn IN: BIT4 (Bit 4)                                */
#define GPIOn_IN_BIT4_Msk                 (0x10UL)                  /*!< GPIOn IN: BIT4 (Bitfield-Mask: 0x01)                  */
#define GPIOn_IN_BIT5_Pos                 (5UL)                     /*!< GPIOn IN: BIT5 (Bit 5)                                */
#define GPIOn_IN_BIT5_Msk                 (0x20UL)                  /*!< GPIOn IN: BIT5 (Bitfield-Mask: 0x01)                  */
#define GPIOn_IN_BIT6_Pos                 (6UL)                     /*!< GPIOn IN: BIT6 (Bit 6)                                */
#define GPIOn_IN_BIT6_Msk                 (0x40UL)                  /*!< GPIOn IN: BIT6 (Bitfield-Mask: 0x01)                  */
#define GPIOn_IN_BIT7_Pos                 (7UL)                     /*!< GPIOn IN: BIT7 (Bit 7)                                */
#define GPIOn_IN_BIT7_Msk                 (0x80UL)                  /*!< GPIOn IN: BIT7 (Bitfield-Mask: 0x01)                  */
#define GPIOn_IN_BIT8_Pos                 (8UL)                     /*!< GPIOn IN: BIT8 (Bit 8)                                */
#define GPIOn_IN_BIT8_Msk                 (0x100UL)                 /*!< GPIOn IN: BIT8 (Bitfield-Mask: 0x01)                  */
#define GPIOn_IN_BIT9_Pos                 (9UL)                     /*!< GPIOn IN: BIT9 (Bit 9)                                */
#define GPIOn_IN_BIT9_Msk                 (0x200UL)                 /*!< GPIOn IN: BIT9 (Bitfield-Mask: 0x01)                  */
#define GPIOn_IN_BIT10_Pos                (10UL)                    /*!< GPIOn IN: BIT10 (Bit 10)                              */
#define GPIOn_IN_BIT10_Msk                (0x400UL)                 /*!< GPIOn IN: BIT10 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT11_Pos                (11UL)                    /*!< GPIOn IN: BIT11 (Bit 11)                              */
#define GPIOn_IN_BIT11_Msk                (0x800UL)                 /*!< GPIOn IN: BIT11 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT12_Pos                (12UL)                    /*!< GPIOn IN: BIT12 (Bit 12)                              */
#define GPIOn_IN_BIT12_Msk                (0x1000UL)                /*!< GPIOn IN: BIT12 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT13_Pos                (13UL)                    /*!< GPIOn IN: BIT13 (Bit 13)                              */
#define GPIOn_IN_BIT13_Msk                (0x2000UL)                /*!< GPIOn IN: BIT13 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT14_Pos                (14UL)                    /*!< GPIOn IN: BIT14 (Bit 14)                              */
#define GPIOn_IN_BIT14_Msk                (0x4000UL)                /*!< GPIOn IN: BIT14 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT15_Pos                (15UL)                    /*!< GPIOn IN: BIT15 (Bit 15)                              */
#define GPIOn_IN_BIT15_Msk                (0x8000UL)                /*!< GPIOn IN: BIT15 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT16_Pos                (16UL)                    /*!< GPIOn IN: BIT16 (Bit 16)                              */
#define GPIOn_IN_BIT16_Msk                (0x10000UL)               /*!< GPIOn IN: BIT16 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT17_Pos                (17UL)                    /*!< GPIOn IN: BIT17 (Bit 17)                              */
#define GPIOn_IN_BIT17_Msk                (0x20000UL)               /*!< GPIOn IN: BIT17 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT18_Pos                (18UL)                    /*!< GPIOn IN: BIT18 (Bit 18)                              */
#define GPIOn_IN_BIT18_Msk                (0x40000UL)               /*!< GPIOn IN: BIT18 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT19_Pos                (19UL)                    /*!< GPIOn IN: BIT19 (Bit 19)                              */
#define GPIOn_IN_BIT19_Msk                (0x80000UL)               /*!< GPIOn IN: BIT19 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT20_Pos                (20UL)                    /*!< GPIOn IN: BIT20 (Bit 20)                              */
#define GPIOn_IN_BIT20_Msk                (0x100000UL)              /*!< GPIOn IN: BIT20 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT21_Pos                (21UL)                    /*!< GPIOn IN: BIT21 (Bit 21)                              */
#define GPIOn_IN_BIT21_Msk                (0x200000UL)              /*!< GPIOn IN: BIT21 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT22_Pos                (22UL)                    /*!< GPIOn IN: BIT22 (Bit 22)                              */
#define GPIOn_IN_BIT22_Msk                (0x400000UL)              /*!< GPIOn IN: BIT22 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT23_Pos                (23UL)                    /*!< GPIOn IN: BIT23 (Bit 23)                              */
#define GPIOn_IN_BIT23_Msk                (0x800000UL)              /*!< GPIOn IN: BIT23 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT24_Pos                (24UL)                    /*!< GPIOn IN: BIT24 (Bit 24)                              */
#define GPIOn_IN_BIT24_Msk                (0x1000000UL)             /*!< GPIOn IN: BIT24 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT25_Pos                (25UL)                    /*!< GPIOn IN: BIT25 (Bit 25)                              */
#define GPIOn_IN_BIT25_Msk                (0x2000000UL)             /*!< GPIOn IN: BIT25 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT26_Pos                (26UL)                    /*!< GPIOn IN: BIT26 (Bit 26)                              */
#define GPIOn_IN_BIT26_Msk                (0x4000000UL)             /*!< GPIOn IN: BIT26 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT27_Pos                (27UL)                    /*!< GPIOn IN: BIT27 (Bit 27)                              */
#define GPIOn_IN_BIT27_Msk                (0x8000000UL)             /*!< GPIOn IN: BIT27 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT28_Pos                (28UL)                    /*!< GPIOn IN: BIT28 (Bit 28)                              */
#define GPIOn_IN_BIT28_Msk                (0x10000000UL)            /*!< GPIOn IN: BIT28 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT29_Pos                (29UL)                    /*!< GPIOn IN: BIT29 (Bit 29)                              */
#define GPIOn_IN_BIT29_Msk                (0x20000000UL)            /*!< GPIOn IN: BIT29 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT30_Pos                (30UL)                    /*!< GPIOn IN: BIT30 (Bit 30)                              */
#define GPIOn_IN_BIT30_Msk                (0x40000000UL)            /*!< GPIOn IN: BIT30 (Bitfield-Mask: 0x01)                 */
#define GPIOn_IN_BIT31_Pos                (31UL)                    /*!< GPIOn IN: BIT31 (Bit 31)                              */
#define GPIOn_IN_BIT31_Msk                (0x80000000UL)            /*!< GPIOn IN: BIT31 (Bitfield-Mask: 0x01)                 */
/* ========================================================  INT_MOD  ======================================================== */
#define GPIOn_INT_MOD_BIT0_Pos            (0UL)                     /*!< GPIOn INT_MOD: BIT0 (Bit 0)                           */
#define GPIOn_INT_MOD_BIT0_Msk            (0x1UL)                   /*!< GPIOn INT_MOD: BIT0 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_MOD_BIT1_Pos            (1UL)                     /*!< GPIOn INT_MOD: BIT1 (Bit 1)                           */
#define GPIOn_INT_MOD_BIT1_Msk            (0x2UL)                   /*!< GPIOn INT_MOD: BIT1 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_MOD_BIT2_Pos            (2UL)                     /*!< GPIOn INT_MOD: BIT2 (Bit 2)                           */
#define GPIOn_INT_MOD_BIT2_Msk            (0x4UL)                   /*!< GPIOn INT_MOD: BIT2 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_MOD_BIT3_Pos            (3UL)                     /*!< GPIOn INT_MOD: BIT3 (Bit 3)                           */
#define GPIOn_INT_MOD_BIT3_Msk            (0x8UL)                   /*!< GPIOn INT_MOD: BIT3 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_MOD_BIT4_Pos            (4UL)                     /*!< GPIOn INT_MOD: BIT4 (Bit 4)                           */
#define GPIOn_INT_MOD_BIT4_Msk            (0x10UL)                  /*!< GPIOn INT_MOD: BIT4 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_MOD_BIT5_Pos            (5UL)                     /*!< GPIOn INT_MOD: BIT5 (Bit 5)                           */
#define GPIOn_INT_MOD_BIT5_Msk            (0x20UL)                  /*!< GPIOn INT_MOD: BIT5 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_MOD_BIT6_Pos            (6UL)                     /*!< GPIOn INT_MOD: BIT6 (Bit 6)                           */
#define GPIOn_INT_MOD_BIT6_Msk            (0x40UL)                  /*!< GPIOn INT_MOD: BIT6 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_MOD_BIT7_Pos            (7UL)                     /*!< GPIOn INT_MOD: BIT7 (Bit 7)                           */
#define GPIOn_INT_MOD_BIT7_Msk            (0x80UL)                  /*!< GPIOn INT_MOD: BIT7 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_MOD_BIT8_Pos            (8UL)                     /*!< GPIOn INT_MOD: BIT8 (Bit 8)                           */
#define GPIOn_INT_MOD_BIT8_Msk            (0x100UL)                 /*!< GPIOn INT_MOD: BIT8 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_MOD_BIT9_Pos            (9UL)                     /*!< GPIOn INT_MOD: BIT9 (Bit 9)                           */
#define GPIOn_INT_MOD_BIT9_Msk            (0x200UL)                 /*!< GPIOn INT_MOD: BIT9 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_MOD_BIT10_Pos           (10UL)                    /*!< GPIOn INT_MOD: BIT10 (Bit 10)                         */
#define GPIOn_INT_MOD_BIT10_Msk           (0x400UL)                 /*!< GPIOn INT_MOD: BIT10 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT11_Pos           (11UL)                    /*!< GPIOn INT_MOD: BIT11 (Bit 11)                         */
#define GPIOn_INT_MOD_BIT11_Msk           (0x800UL)                 /*!< GPIOn INT_MOD: BIT11 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT12_Pos           (12UL)                    /*!< GPIOn INT_MOD: BIT12 (Bit 12)                         */
#define GPIOn_INT_MOD_BIT12_Msk           (0x1000UL)                /*!< GPIOn INT_MOD: BIT12 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT13_Pos           (13UL)                    /*!< GPIOn INT_MOD: BIT13 (Bit 13)                         */
#define GPIOn_INT_MOD_BIT13_Msk           (0x2000UL)                /*!< GPIOn INT_MOD: BIT13 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT14_Pos           (14UL)                    /*!< GPIOn INT_MOD: BIT14 (Bit 14)                         */
#define GPIOn_INT_MOD_BIT14_Msk           (0x4000UL)                /*!< GPIOn INT_MOD: BIT14 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT15_Pos           (15UL)                    /*!< GPIOn INT_MOD: BIT15 (Bit 15)                         */
#define GPIOn_INT_MOD_BIT15_Msk           (0x8000UL)                /*!< GPIOn INT_MOD: BIT15 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT16_Pos           (16UL)                    /*!< GPIOn INT_MOD: BIT16 (Bit 16)                         */
#define GPIOn_INT_MOD_BIT16_Msk           (0x10000UL)               /*!< GPIOn INT_MOD: BIT16 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT17_Pos           (17UL)                    /*!< GPIOn INT_MOD: BIT17 (Bit 17)                         */
#define GPIOn_INT_MOD_BIT17_Msk           (0x20000UL)               /*!< GPIOn INT_MOD: BIT17 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT18_Pos           (18UL)                    /*!< GPIOn INT_MOD: BIT18 (Bit 18)                         */
#define GPIOn_INT_MOD_BIT18_Msk           (0x40000UL)               /*!< GPIOn INT_MOD: BIT18 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT19_Pos           (19UL)                    /*!< GPIOn INT_MOD: BIT19 (Bit 19)                         */
#define GPIOn_INT_MOD_BIT19_Msk           (0x80000UL)               /*!< GPIOn INT_MOD: BIT19 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT20_Pos           (20UL)                    /*!< GPIOn INT_MOD: BIT20 (Bit 20)                         */
#define GPIOn_INT_MOD_BIT20_Msk           (0x100000UL)              /*!< GPIOn INT_MOD: BIT20 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT21_Pos           (21UL)                    /*!< GPIOn INT_MOD: BIT21 (Bit 21)                         */
#define GPIOn_INT_MOD_BIT21_Msk           (0x200000UL)              /*!< GPIOn INT_MOD: BIT21 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT22_Pos           (22UL)                    /*!< GPIOn INT_MOD: BIT22 (Bit 22)                         */
#define GPIOn_INT_MOD_BIT22_Msk           (0x400000UL)              /*!< GPIOn INT_MOD: BIT22 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT23_Pos           (23UL)                    /*!< GPIOn INT_MOD: BIT23 (Bit 23)                         */
#define GPIOn_INT_MOD_BIT23_Msk           (0x800000UL)              /*!< GPIOn INT_MOD: BIT23 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT24_Pos           (24UL)                    /*!< GPIOn INT_MOD: BIT24 (Bit 24)                         */
#define GPIOn_INT_MOD_BIT24_Msk           (0x1000000UL)             /*!< GPIOn INT_MOD: BIT24 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT25_Pos           (25UL)                    /*!< GPIOn INT_MOD: BIT25 (Bit 25)                         */
#define GPIOn_INT_MOD_BIT25_Msk           (0x2000000UL)             /*!< GPIOn INT_MOD: BIT25 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT26_Pos           (26UL)                    /*!< GPIOn INT_MOD: BIT26 (Bit 26)                         */
#define GPIOn_INT_MOD_BIT26_Msk           (0x4000000UL)             /*!< GPIOn INT_MOD: BIT26 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT27_Pos           (27UL)                    /*!< GPIOn INT_MOD: BIT27 (Bit 27)                         */
#define GPIOn_INT_MOD_BIT27_Msk           (0x8000000UL)             /*!< GPIOn INT_MOD: BIT27 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT28_Pos           (28UL)                    /*!< GPIOn INT_MOD: BIT28 (Bit 28)                         */
#define GPIOn_INT_MOD_BIT28_Msk           (0x10000000UL)            /*!< GPIOn INT_MOD: BIT28 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT29_Pos           (29UL)                    /*!< GPIOn INT_MOD: BIT29 (Bit 29)                         */
#define GPIOn_INT_MOD_BIT29_Msk           (0x20000000UL)            /*!< GPIOn INT_MOD: BIT29 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT30_Pos           (30UL)                    /*!< GPIOn INT_MOD: BIT30 (Bit 30)                         */
#define GPIOn_INT_MOD_BIT30_Msk           (0x40000000UL)            /*!< GPIOn INT_MOD: BIT30 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_MOD_BIT31_Pos           (31UL)                    /*!< GPIOn INT_MOD: BIT31 (Bit 31)                         */
#define GPIOn_INT_MOD_BIT31_Msk           (0x80000000UL)            /*!< GPIOn INT_MOD: BIT31 (Bitfield-Mask: 0x01)            */
/* ========================================================  INT_POL  ======================================================== */
#define GPIOn_INT_POL_BIT0_Pos            (0UL)                     /*!< GPIOn INT_POL: BIT0 (Bit 0)                           */
#define GPIOn_INT_POL_BIT0_Msk            (0x1UL)                   /*!< GPIOn INT_POL: BIT0 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_POL_BIT1_Pos            (1UL)                     /*!< GPIOn INT_POL: BIT1 (Bit 1)                           */
#define GPIOn_INT_POL_BIT1_Msk            (0x2UL)                   /*!< GPIOn INT_POL: BIT1 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_POL_BIT2_Pos            (2UL)                     /*!< GPIOn INT_POL: BIT2 (Bit 2)                           */
#define GPIOn_INT_POL_BIT2_Msk            (0x4UL)                   /*!< GPIOn INT_POL: BIT2 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_POL_BIT3_Pos            (3UL)                     /*!< GPIOn INT_POL: BIT3 (Bit 3)                           */
#define GPIOn_INT_POL_BIT3_Msk            (0x8UL)                   /*!< GPIOn INT_POL: BIT3 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_POL_BIT4_Pos            (4UL)                     /*!< GPIOn INT_POL: BIT4 (Bit 4)                           */
#define GPIOn_INT_POL_BIT4_Msk            (0x10UL)                  /*!< GPIOn INT_POL: BIT4 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_POL_BIT5_Pos            (5UL)                     /*!< GPIOn INT_POL: BIT5 (Bit 5)                           */
#define GPIOn_INT_POL_BIT5_Msk            (0x20UL)                  /*!< GPIOn INT_POL: BIT5 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_POL_BIT6_Pos            (6UL)                     /*!< GPIOn INT_POL: BIT6 (Bit 6)                           */
#define GPIOn_INT_POL_BIT6_Msk            (0x40UL)                  /*!< GPIOn INT_POL: BIT6 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_POL_BIT7_Pos            (7UL)                     /*!< GPIOn INT_POL: BIT7 (Bit 7)                           */
#define GPIOn_INT_POL_BIT7_Msk            (0x80UL)                  /*!< GPIOn INT_POL: BIT7 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_POL_BIT8_Pos            (8UL)                     /*!< GPIOn INT_POL: BIT8 (Bit 8)                           */
#define GPIOn_INT_POL_BIT8_Msk            (0x100UL)                 /*!< GPIOn INT_POL: BIT8 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_POL_BIT9_Pos            (9UL)                     /*!< GPIOn INT_POL: BIT9 (Bit 9)                           */
#define GPIOn_INT_POL_BIT9_Msk            (0x200UL)                 /*!< GPIOn INT_POL: BIT9 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_POL_BIT10_Pos           (10UL)                    /*!< GPIOn INT_POL: BIT10 (Bit 10)                         */
#define GPIOn_INT_POL_BIT10_Msk           (0x400UL)                 /*!< GPIOn INT_POL: BIT10 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT11_Pos           (11UL)                    /*!< GPIOn INT_POL: BIT11 (Bit 11)                         */
#define GPIOn_INT_POL_BIT11_Msk           (0x800UL)                 /*!< GPIOn INT_POL: BIT11 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT12_Pos           (12UL)                    /*!< GPIOn INT_POL: BIT12 (Bit 12)                         */
#define GPIOn_INT_POL_BIT12_Msk           (0x1000UL)                /*!< GPIOn INT_POL: BIT12 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT13_Pos           (13UL)                    /*!< GPIOn INT_POL: BIT13 (Bit 13)                         */
#define GPIOn_INT_POL_BIT13_Msk           (0x2000UL)                /*!< GPIOn INT_POL: BIT13 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT14_Pos           (14UL)                    /*!< GPIOn INT_POL: BIT14 (Bit 14)                         */
#define GPIOn_INT_POL_BIT14_Msk           (0x4000UL)                /*!< GPIOn INT_POL: BIT14 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT15_Pos           (15UL)                    /*!< GPIOn INT_POL: BIT15 (Bit 15)                         */
#define GPIOn_INT_POL_BIT15_Msk           (0x8000UL)                /*!< GPIOn INT_POL: BIT15 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT16_Pos           (16UL)                    /*!< GPIOn INT_POL: BIT16 (Bit 16)                         */
#define GPIOn_INT_POL_BIT16_Msk           (0x10000UL)               /*!< GPIOn INT_POL: BIT16 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT17_Pos           (17UL)                    /*!< GPIOn INT_POL: BIT17 (Bit 17)                         */
#define GPIOn_INT_POL_BIT17_Msk           (0x20000UL)               /*!< GPIOn INT_POL: BIT17 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT18_Pos           (18UL)                    /*!< GPIOn INT_POL: BIT18 (Bit 18)                         */
#define GPIOn_INT_POL_BIT18_Msk           (0x40000UL)               /*!< GPIOn INT_POL: BIT18 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT19_Pos           (19UL)                    /*!< GPIOn INT_POL: BIT19 (Bit 19)                         */
#define GPIOn_INT_POL_BIT19_Msk           (0x80000UL)               /*!< GPIOn INT_POL: BIT19 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT20_Pos           (20UL)                    /*!< GPIOn INT_POL: BIT20 (Bit 20)                         */
#define GPIOn_INT_POL_BIT20_Msk           (0x100000UL)              /*!< GPIOn INT_POL: BIT20 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT21_Pos           (21UL)                    /*!< GPIOn INT_POL: BIT21 (Bit 21)                         */
#define GPIOn_INT_POL_BIT21_Msk           (0x200000UL)              /*!< GPIOn INT_POL: BIT21 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT22_Pos           (22UL)                    /*!< GPIOn INT_POL: BIT22 (Bit 22)                         */
#define GPIOn_INT_POL_BIT22_Msk           (0x400000UL)              /*!< GPIOn INT_POL: BIT22 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT23_Pos           (23UL)                    /*!< GPIOn INT_POL: BIT23 (Bit 23)                         */
#define GPIOn_INT_POL_BIT23_Msk           (0x800000UL)              /*!< GPIOn INT_POL: BIT23 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT24_Pos           (24UL)                    /*!< GPIOn INT_POL: BIT24 (Bit 24)                         */
#define GPIOn_INT_POL_BIT24_Msk           (0x1000000UL)             /*!< GPIOn INT_POL: BIT24 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT25_Pos           (25UL)                    /*!< GPIOn INT_POL: BIT25 (Bit 25)                         */
#define GPIOn_INT_POL_BIT25_Msk           (0x2000000UL)             /*!< GPIOn INT_POL: BIT25 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT26_Pos           (26UL)                    /*!< GPIOn INT_POL: BIT26 (Bit 26)                         */
#define GPIOn_INT_POL_BIT26_Msk           (0x4000000UL)             /*!< GPIOn INT_POL: BIT26 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT27_Pos           (27UL)                    /*!< GPIOn INT_POL: BIT27 (Bit 27)                         */
#define GPIOn_INT_POL_BIT27_Msk           (0x8000000UL)             /*!< GPIOn INT_POL: BIT27 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT28_Pos           (28UL)                    /*!< GPIOn INT_POL: BIT28 (Bit 28)                         */
#define GPIOn_INT_POL_BIT28_Msk           (0x10000000UL)            /*!< GPIOn INT_POL: BIT28 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT29_Pos           (29UL)                    /*!< GPIOn INT_POL: BIT29 (Bit 29)                         */
#define GPIOn_INT_POL_BIT29_Msk           (0x20000000UL)            /*!< GPIOn INT_POL: BIT29 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT30_Pos           (30UL)                    /*!< GPIOn INT_POL: BIT30 (Bit 30)                         */
#define GPIOn_INT_POL_BIT30_Msk           (0x40000000UL)            /*!< GPIOn INT_POL: BIT30 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_POL_BIT31_Pos           (31UL)                    /*!< GPIOn INT_POL: BIT31 (Bit 31)                         */
#define GPIOn_INT_POL_BIT31_Msk           (0x80000000UL)            /*!< GPIOn INT_POL: BIT31 (Bitfield-Mask: 0x01)            */
/* ========================================================  INT_EN  ========================================================= */
#define GPIOn_INT_EN_BIT0_Pos             (0UL)                     /*!< GPIOn INT_EN: BIT0 (Bit 0)                            */
#define GPIOn_INT_EN_BIT0_Msk             (0x1UL)                   /*!< GPIOn INT_EN: BIT0 (Bitfield-Mask: 0x01)              */
#define GPIOn_INT_EN_BIT1_Pos             (1UL)                     /*!< GPIOn INT_EN: BIT1 (Bit 1)                            */
#define GPIOn_INT_EN_BIT1_Msk             (0x2UL)                   /*!< GPIOn INT_EN: BIT1 (Bitfield-Mask: 0x01)              */
#define GPIOn_INT_EN_BIT2_Pos             (2UL)                     /*!< GPIOn INT_EN: BIT2 (Bit 2)                            */
#define GPIOn_INT_EN_BIT2_Msk             (0x4UL)                   /*!< GPIOn INT_EN: BIT2 (Bitfield-Mask: 0x01)              */
#define GPIOn_INT_EN_BIT3_Pos             (3UL)                     /*!< GPIOn INT_EN: BIT3 (Bit 3)                            */
#define GPIOn_INT_EN_BIT3_Msk             (0x8UL)                   /*!< GPIOn INT_EN: BIT3 (Bitfield-Mask: 0x01)              */
#define GPIOn_INT_EN_BIT4_Pos             (4UL)                     /*!< GPIOn INT_EN: BIT4 (Bit 4)                            */
#define GPIOn_INT_EN_BIT4_Msk             (0x10UL)                  /*!< GPIOn INT_EN: BIT4 (Bitfield-Mask: 0x01)              */
#define GPIOn_INT_EN_BIT5_Pos             (5UL)                     /*!< GPIOn INT_EN: BIT5 (Bit 5)                            */
#define GPIOn_INT_EN_BIT5_Msk             (0x20UL)                  /*!< GPIOn INT_EN: BIT5 (Bitfield-Mask: 0x01)              */
#define GPIOn_INT_EN_BIT6_Pos             (6UL)                     /*!< GPIOn INT_EN: BIT6 (Bit 6)                            */
#define GPIOn_INT_EN_BIT6_Msk             (0x40UL)                  /*!< GPIOn INT_EN: BIT6 (Bitfield-Mask: 0x01)              */
#define GPIOn_INT_EN_BIT7_Pos             (7UL)                     /*!< GPIOn INT_EN: BIT7 (Bit 7)                            */
#define GPIOn_INT_EN_BIT7_Msk             (0x80UL)                  /*!< GPIOn INT_EN: BIT7 (Bitfield-Mask: 0x01)              */
#define GPIOn_INT_EN_BIT8_Pos             (8UL)                     /*!< GPIOn INT_EN: BIT8 (Bit 8)                            */
#define GPIOn_INT_EN_BIT8_Msk             (0x100UL)                 /*!< GPIOn INT_EN: BIT8 (Bitfield-Mask: 0x01)              */
#define GPIOn_INT_EN_BIT9_Pos             (9UL)                     /*!< GPIOn INT_EN: BIT9 (Bit 9)                            */
#define GPIOn_INT_EN_BIT9_Msk             (0x200UL)                 /*!< GPIOn INT_EN: BIT9 (Bitfield-Mask: 0x01)              */
#define GPIOn_INT_EN_BIT10_Pos            (10UL)                    /*!< GPIOn INT_EN: BIT10 (Bit 10)                          */
#define GPIOn_INT_EN_BIT10_Msk            (0x400UL)                 /*!< GPIOn INT_EN: BIT10 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT11_Pos            (11UL)                    /*!< GPIOn INT_EN: BIT11 (Bit 11)                          */
#define GPIOn_INT_EN_BIT11_Msk            (0x800UL)                 /*!< GPIOn INT_EN: BIT11 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT12_Pos            (12UL)                    /*!< GPIOn INT_EN: BIT12 (Bit 12)                          */
#define GPIOn_INT_EN_BIT12_Msk            (0x1000UL)                /*!< GPIOn INT_EN: BIT12 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT13_Pos            (13UL)                    /*!< GPIOn INT_EN: BIT13 (Bit 13)                          */
#define GPIOn_INT_EN_BIT13_Msk            (0x2000UL)                /*!< GPIOn INT_EN: BIT13 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT14_Pos            (14UL)                    /*!< GPIOn INT_EN: BIT14 (Bit 14)                          */
#define GPIOn_INT_EN_BIT14_Msk            (0x4000UL)                /*!< GPIOn INT_EN: BIT14 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT15_Pos            (15UL)                    /*!< GPIOn INT_EN: BIT15 (Bit 15)                          */
#define GPIOn_INT_EN_BIT15_Msk            (0x8000UL)                /*!< GPIOn INT_EN: BIT15 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT16_Pos            (16UL)                    /*!< GPIOn INT_EN: BIT16 (Bit 16)                          */
#define GPIOn_INT_EN_BIT16_Msk            (0x10000UL)               /*!< GPIOn INT_EN: BIT16 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT17_Pos            (17UL)                    /*!< GPIOn INT_EN: BIT17 (Bit 17)                          */
#define GPIOn_INT_EN_BIT17_Msk            (0x20000UL)               /*!< GPIOn INT_EN: BIT17 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT18_Pos            (18UL)                    /*!< GPIOn INT_EN: BIT18 (Bit 18)                          */
#define GPIOn_INT_EN_BIT18_Msk            (0x40000UL)               /*!< GPIOn INT_EN: BIT18 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT19_Pos            (19UL)                    /*!< GPIOn INT_EN: BIT19 (Bit 19)                          */
#define GPIOn_INT_EN_BIT19_Msk            (0x80000UL)               /*!< GPIOn INT_EN: BIT19 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT20_Pos            (20UL)                    /*!< GPIOn INT_EN: BIT20 (Bit 20)                          */
#define GPIOn_INT_EN_BIT20_Msk            (0x100000UL)              /*!< GPIOn INT_EN: BIT20 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT21_Pos            (21UL)                    /*!< GPIOn INT_EN: BIT21 (Bit 21)                          */
#define GPIOn_INT_EN_BIT21_Msk            (0x200000UL)              /*!< GPIOn INT_EN: BIT21 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT22_Pos            (22UL)                    /*!< GPIOn INT_EN: BIT22 (Bit 22)                          */
#define GPIOn_INT_EN_BIT22_Msk            (0x400000UL)              /*!< GPIOn INT_EN: BIT22 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT23_Pos            (23UL)                    /*!< GPIOn INT_EN: BIT23 (Bit 23)                          */
#define GPIOn_INT_EN_BIT23_Msk            (0x800000UL)              /*!< GPIOn INT_EN: BIT23 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT24_Pos            (24UL)                    /*!< GPIOn INT_EN: BIT24 (Bit 24)                          */
#define GPIOn_INT_EN_BIT24_Msk            (0x1000000UL)             /*!< GPIOn INT_EN: BIT24 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT25_Pos            (25UL)                    /*!< GPIOn INT_EN: BIT25 (Bit 25)                          */
#define GPIOn_INT_EN_BIT25_Msk            (0x2000000UL)             /*!< GPIOn INT_EN: BIT25 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT26_Pos            (26UL)                    /*!< GPIOn INT_EN: BIT26 (Bit 26)                          */
#define GPIOn_INT_EN_BIT26_Msk            (0x4000000UL)             /*!< GPIOn INT_EN: BIT26 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT27_Pos            (27UL)                    /*!< GPIOn INT_EN: BIT27 (Bit 27)                          */
#define GPIOn_INT_EN_BIT27_Msk            (0x8000000UL)             /*!< GPIOn INT_EN: BIT27 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT28_Pos            (28UL)                    /*!< GPIOn INT_EN: BIT28 (Bit 28)                          */
#define GPIOn_INT_EN_BIT28_Msk            (0x10000000UL)            /*!< GPIOn INT_EN: BIT28 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT29_Pos            (29UL)                    /*!< GPIOn INT_EN: BIT29 (Bit 29)                          */
#define GPIOn_INT_EN_BIT29_Msk            (0x20000000UL)            /*!< GPIOn INT_EN: BIT29 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT30_Pos            (30UL)                    /*!< GPIOn INT_EN: BIT30 (Bit 30)                          */
#define GPIOn_INT_EN_BIT30_Msk            (0x40000000UL)            /*!< GPIOn INT_EN: BIT30 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_EN_BIT31_Pos            (31UL)                    /*!< GPIOn INT_EN: BIT31 (Bit 31)                          */
#define GPIOn_INT_EN_BIT31_Msk            (0x80000000UL)            /*!< GPIOn INT_EN: BIT31 (Bitfield-Mask: 0x01)             */
/* ======================================================  INT_EN_SET  ======================================================= */
#define GPIOn_INT_EN_SET_BIT0_Pos         (0UL)                     /*!< GPIOn INT_EN_SET: BIT0 (Bit 0)                        */
#define GPIOn_INT_EN_SET_BIT0_Msk         (0x1UL)                   /*!< GPIOn INT_EN_SET: BIT0 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_SET_BIT1_Pos         (1UL)                     /*!< GPIOn INT_EN_SET: BIT1 (Bit 1)                        */
#define GPIOn_INT_EN_SET_BIT1_Msk         (0x2UL)                   /*!< GPIOn INT_EN_SET: BIT1 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_SET_BIT2_Pos         (2UL)                     /*!< GPIOn INT_EN_SET: BIT2 (Bit 2)                        */
#define GPIOn_INT_EN_SET_BIT2_Msk         (0x4UL)                   /*!< GPIOn INT_EN_SET: BIT2 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_SET_BIT3_Pos         (3UL)                     /*!< GPIOn INT_EN_SET: BIT3 (Bit 3)                        */
#define GPIOn_INT_EN_SET_BIT3_Msk         (0x8UL)                   /*!< GPIOn INT_EN_SET: BIT3 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_SET_BIT4_Pos         (4UL)                     /*!< GPIOn INT_EN_SET: BIT4 (Bit 4)                        */
#define GPIOn_INT_EN_SET_BIT4_Msk         (0x10UL)                  /*!< GPIOn INT_EN_SET: BIT4 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_SET_BIT5_Pos         (5UL)                     /*!< GPIOn INT_EN_SET: BIT5 (Bit 5)                        */
#define GPIOn_INT_EN_SET_BIT5_Msk         (0x20UL)                  /*!< GPIOn INT_EN_SET: BIT5 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_SET_BIT6_Pos         (6UL)                     /*!< GPIOn INT_EN_SET: BIT6 (Bit 6)                        */
#define GPIOn_INT_EN_SET_BIT6_Msk         (0x40UL)                  /*!< GPIOn INT_EN_SET: BIT6 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_SET_BIT7_Pos         (7UL)                     /*!< GPIOn INT_EN_SET: BIT7 (Bit 7)                        */
#define GPIOn_INT_EN_SET_BIT7_Msk         (0x80UL)                  /*!< GPIOn INT_EN_SET: BIT7 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_SET_BIT8_Pos         (8UL)                     /*!< GPIOn INT_EN_SET: BIT8 (Bit 8)                        */
#define GPIOn_INT_EN_SET_BIT8_Msk         (0x100UL)                 /*!< GPIOn INT_EN_SET: BIT8 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_SET_BIT9_Pos         (9UL)                     /*!< GPIOn INT_EN_SET: BIT9 (Bit 9)                        */
#define GPIOn_INT_EN_SET_BIT9_Msk         (0x200UL)                 /*!< GPIOn INT_EN_SET: BIT9 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_SET_BIT10_Pos        (10UL)                    /*!< GPIOn INT_EN_SET: BIT10 (Bit 10)                      */
#define GPIOn_INT_EN_SET_BIT10_Msk        (0x400UL)                 /*!< GPIOn INT_EN_SET: BIT10 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT11_Pos        (11UL)                    /*!< GPIOn INT_EN_SET: BIT11 (Bit 11)                      */
#define GPIOn_INT_EN_SET_BIT11_Msk        (0x800UL)                 /*!< GPIOn INT_EN_SET: BIT11 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT12_Pos        (12UL)                    /*!< GPIOn INT_EN_SET: BIT12 (Bit 12)                      */
#define GPIOn_INT_EN_SET_BIT12_Msk        (0x1000UL)                /*!< GPIOn INT_EN_SET: BIT12 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT13_Pos        (13UL)                    /*!< GPIOn INT_EN_SET: BIT13 (Bit 13)                      */
#define GPIOn_INT_EN_SET_BIT13_Msk        (0x2000UL)                /*!< GPIOn INT_EN_SET: BIT13 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT14_Pos        (14UL)                    /*!< GPIOn INT_EN_SET: BIT14 (Bit 14)                      */
#define GPIOn_INT_EN_SET_BIT14_Msk        (0x4000UL)                /*!< GPIOn INT_EN_SET: BIT14 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT15_Pos        (15UL)                    /*!< GPIOn INT_EN_SET: BIT15 (Bit 15)                      */
#define GPIOn_INT_EN_SET_BIT15_Msk        (0x8000UL)                /*!< GPIOn INT_EN_SET: BIT15 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT16_Pos        (16UL)                    /*!< GPIOn INT_EN_SET: BIT16 (Bit 16)                      */
#define GPIOn_INT_EN_SET_BIT16_Msk        (0x10000UL)               /*!< GPIOn INT_EN_SET: BIT16 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT17_Pos        (17UL)                    /*!< GPIOn INT_EN_SET: BIT17 (Bit 17)                      */
#define GPIOn_INT_EN_SET_BIT17_Msk        (0x20000UL)               /*!< GPIOn INT_EN_SET: BIT17 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT18_Pos        (18UL)                    /*!< GPIOn INT_EN_SET: BIT18 (Bit 18)                      */
#define GPIOn_INT_EN_SET_BIT18_Msk        (0x40000UL)               /*!< GPIOn INT_EN_SET: BIT18 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT19_Pos        (19UL)                    /*!< GPIOn INT_EN_SET: BIT19 (Bit 19)                      */
#define GPIOn_INT_EN_SET_BIT19_Msk        (0x80000UL)               /*!< GPIOn INT_EN_SET: BIT19 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT20_Pos        (20UL)                    /*!< GPIOn INT_EN_SET: BIT20 (Bit 20)                      */
#define GPIOn_INT_EN_SET_BIT20_Msk        (0x100000UL)              /*!< GPIOn INT_EN_SET: BIT20 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT21_Pos        (21UL)                    /*!< GPIOn INT_EN_SET: BIT21 (Bit 21)                      */
#define GPIOn_INT_EN_SET_BIT21_Msk        (0x200000UL)              /*!< GPIOn INT_EN_SET: BIT21 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT22_Pos        (22UL)                    /*!< GPIOn INT_EN_SET: BIT22 (Bit 22)                      */
#define GPIOn_INT_EN_SET_BIT22_Msk        (0x400000UL)              /*!< GPIOn INT_EN_SET: BIT22 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT23_Pos        (23UL)                    /*!< GPIOn INT_EN_SET: BIT23 (Bit 23)                      */
#define GPIOn_INT_EN_SET_BIT23_Msk        (0x800000UL)              /*!< GPIOn INT_EN_SET: BIT23 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT24_Pos        (24UL)                    /*!< GPIOn INT_EN_SET: BIT24 (Bit 24)                      */
#define GPIOn_INT_EN_SET_BIT24_Msk        (0x1000000UL)             /*!< GPIOn INT_EN_SET: BIT24 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT25_Pos        (25UL)                    /*!< GPIOn INT_EN_SET: BIT25 (Bit 25)                      */
#define GPIOn_INT_EN_SET_BIT25_Msk        (0x2000000UL)             /*!< GPIOn INT_EN_SET: BIT25 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT26_Pos        (26UL)                    /*!< GPIOn INT_EN_SET: BIT26 (Bit 26)                      */
#define GPIOn_INT_EN_SET_BIT26_Msk        (0x4000000UL)             /*!< GPIOn INT_EN_SET: BIT26 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT27_Pos        (27UL)                    /*!< GPIOn INT_EN_SET: BIT27 (Bit 27)                      */
#define GPIOn_INT_EN_SET_BIT27_Msk        (0x8000000UL)             /*!< GPIOn INT_EN_SET: BIT27 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT28_Pos        (28UL)                    /*!< GPIOn INT_EN_SET: BIT28 (Bit 28)                      */
#define GPIOn_INT_EN_SET_BIT28_Msk        (0x10000000UL)            /*!< GPIOn INT_EN_SET: BIT28 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT29_Pos        (29UL)                    /*!< GPIOn INT_EN_SET: BIT29 (Bit 29)                      */
#define GPIOn_INT_EN_SET_BIT29_Msk        (0x20000000UL)            /*!< GPIOn INT_EN_SET: BIT29 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT30_Pos        (30UL)                    /*!< GPIOn INT_EN_SET: BIT30 (Bit 30)                      */
#define GPIOn_INT_EN_SET_BIT30_Msk        (0x40000000UL)            /*!< GPIOn INT_EN_SET: BIT30 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_SET_BIT31_Pos        (31UL)                    /*!< GPIOn INT_EN_SET: BIT31 (Bit 31)                      */
#define GPIOn_INT_EN_SET_BIT31_Msk        (0x80000000UL)            /*!< GPIOn INT_EN_SET: BIT31 (Bitfield-Mask: 0x01)         */
/* ======================================================  INT_EN_CLR  ======================================================= */
#define GPIOn_INT_EN_CLR_BIT0_Pos         (0UL)                     /*!< GPIOn INT_EN_CLR: BIT0 (Bit 0)                        */
#define GPIOn_INT_EN_CLR_BIT0_Msk         (0x1UL)                   /*!< GPIOn INT_EN_CLR: BIT0 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_CLR_BIT1_Pos         (1UL)                     /*!< GPIOn INT_EN_CLR: BIT1 (Bit 1)                        */
#define GPIOn_INT_EN_CLR_BIT1_Msk         (0x2UL)                   /*!< GPIOn INT_EN_CLR: BIT1 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_CLR_BIT2_Pos         (2UL)                     /*!< GPIOn INT_EN_CLR: BIT2 (Bit 2)                        */
#define GPIOn_INT_EN_CLR_BIT2_Msk         (0x4UL)                   /*!< GPIOn INT_EN_CLR: BIT2 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_CLR_BIT3_Pos         (3UL)                     /*!< GPIOn INT_EN_CLR: BIT3 (Bit 3)                        */
#define GPIOn_INT_EN_CLR_BIT3_Msk         (0x8UL)                   /*!< GPIOn INT_EN_CLR: BIT3 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_CLR_BIT4_Pos         (4UL)                     /*!< GPIOn INT_EN_CLR: BIT4 (Bit 4)                        */
#define GPIOn_INT_EN_CLR_BIT4_Msk         (0x10UL)                  /*!< GPIOn INT_EN_CLR: BIT4 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_CLR_BIT5_Pos         (5UL)                     /*!< GPIOn INT_EN_CLR: BIT5 (Bit 5)                        */
#define GPIOn_INT_EN_CLR_BIT5_Msk         (0x20UL)                  /*!< GPIOn INT_EN_CLR: BIT5 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_CLR_BIT6_Pos         (6UL)                     /*!< GPIOn INT_EN_CLR: BIT6 (Bit 6)                        */
#define GPIOn_INT_EN_CLR_BIT6_Msk         (0x40UL)                  /*!< GPIOn INT_EN_CLR: BIT6 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_CLR_BIT7_Pos         (7UL)                     /*!< GPIOn INT_EN_CLR: BIT7 (Bit 7)                        */
#define GPIOn_INT_EN_CLR_BIT7_Msk         (0x80UL)                  /*!< GPIOn INT_EN_CLR: BIT7 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_CLR_BIT8_Pos         (8UL)                     /*!< GPIOn INT_EN_CLR: BIT8 (Bit 8)                        */
#define GPIOn_INT_EN_CLR_BIT8_Msk         (0x100UL)                 /*!< GPIOn INT_EN_CLR: BIT8 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_CLR_BIT9_Pos         (9UL)                     /*!< GPIOn INT_EN_CLR: BIT9 (Bit 9)                        */
#define GPIOn_INT_EN_CLR_BIT9_Msk         (0x200UL)                 /*!< GPIOn INT_EN_CLR: BIT9 (Bitfield-Mask: 0x01)          */
#define GPIOn_INT_EN_CLR_BIT10_Pos        (10UL)                    /*!< GPIOn INT_EN_CLR: BIT10 (Bit 10)                      */
#define GPIOn_INT_EN_CLR_BIT10_Msk        (0x400UL)                 /*!< GPIOn INT_EN_CLR: BIT10 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT11_Pos        (11UL)                    /*!< GPIOn INT_EN_CLR: BIT11 (Bit 11)                      */
#define GPIOn_INT_EN_CLR_BIT11_Msk        (0x800UL)                 /*!< GPIOn INT_EN_CLR: BIT11 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT12_Pos        (12UL)                    /*!< GPIOn INT_EN_CLR: BIT12 (Bit 12)                      */
#define GPIOn_INT_EN_CLR_BIT12_Msk        (0x1000UL)                /*!< GPIOn INT_EN_CLR: BIT12 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT13_Pos        (13UL)                    /*!< GPIOn INT_EN_CLR: BIT13 (Bit 13)                      */
#define GPIOn_INT_EN_CLR_BIT13_Msk        (0x2000UL)                /*!< GPIOn INT_EN_CLR: BIT13 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT14_Pos        (14UL)                    /*!< GPIOn INT_EN_CLR: BIT14 (Bit 14)                      */
#define GPIOn_INT_EN_CLR_BIT14_Msk        (0x4000UL)                /*!< GPIOn INT_EN_CLR: BIT14 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT15_Pos        (15UL)                    /*!< GPIOn INT_EN_CLR: BIT15 (Bit 15)                      */
#define GPIOn_INT_EN_CLR_BIT15_Msk        (0x8000UL)                /*!< GPIOn INT_EN_CLR: BIT15 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT16_Pos        (16UL)                    /*!< GPIOn INT_EN_CLR: BIT16 (Bit 16)                      */
#define GPIOn_INT_EN_CLR_BIT16_Msk        (0x10000UL)               /*!< GPIOn INT_EN_CLR: BIT16 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT17_Pos        (17UL)                    /*!< GPIOn INT_EN_CLR: BIT17 (Bit 17)                      */
#define GPIOn_INT_EN_CLR_BIT17_Msk        (0x20000UL)               /*!< GPIOn INT_EN_CLR: BIT17 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT18_Pos        (18UL)                    /*!< GPIOn INT_EN_CLR: BIT18 (Bit 18)                      */
#define GPIOn_INT_EN_CLR_BIT18_Msk        (0x40000UL)               /*!< GPIOn INT_EN_CLR: BIT18 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT19_Pos        (19UL)                    /*!< GPIOn INT_EN_CLR: BIT19 (Bit 19)                      */
#define GPIOn_INT_EN_CLR_BIT19_Msk        (0x80000UL)               /*!< GPIOn INT_EN_CLR: BIT19 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT20_Pos        (20UL)                    /*!< GPIOn INT_EN_CLR: BIT20 (Bit 20)                      */
#define GPIOn_INT_EN_CLR_BIT20_Msk        (0x100000UL)              /*!< GPIOn INT_EN_CLR: BIT20 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT21_Pos        (21UL)                    /*!< GPIOn INT_EN_CLR: BIT21 (Bit 21)                      */
#define GPIOn_INT_EN_CLR_BIT21_Msk        (0x200000UL)              /*!< GPIOn INT_EN_CLR: BIT21 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT22_Pos        (22UL)                    /*!< GPIOn INT_EN_CLR: BIT22 (Bit 22)                      */
#define GPIOn_INT_EN_CLR_BIT22_Msk        (0x400000UL)              /*!< GPIOn INT_EN_CLR: BIT22 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT23_Pos        (23UL)                    /*!< GPIOn INT_EN_CLR: BIT23 (Bit 23)                      */
#define GPIOn_INT_EN_CLR_BIT23_Msk        (0x800000UL)              /*!< GPIOn INT_EN_CLR: BIT23 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT24_Pos        (24UL)                    /*!< GPIOn INT_EN_CLR: BIT24 (Bit 24)                      */
#define GPIOn_INT_EN_CLR_BIT24_Msk        (0x1000000UL)             /*!< GPIOn INT_EN_CLR: BIT24 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT25_Pos        (25UL)                    /*!< GPIOn INT_EN_CLR: BIT25 (Bit 25)                      */
#define GPIOn_INT_EN_CLR_BIT25_Msk        (0x2000000UL)             /*!< GPIOn INT_EN_CLR: BIT25 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT26_Pos        (26UL)                    /*!< GPIOn INT_EN_CLR: BIT26 (Bit 26)                      */
#define GPIOn_INT_EN_CLR_BIT26_Msk        (0x4000000UL)             /*!< GPIOn INT_EN_CLR: BIT26 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT27_Pos        (27UL)                    /*!< GPIOn INT_EN_CLR: BIT27 (Bit 27)                      */
#define GPIOn_INT_EN_CLR_BIT27_Msk        (0x8000000UL)             /*!< GPIOn INT_EN_CLR: BIT27 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT28_Pos        (28UL)                    /*!< GPIOn INT_EN_CLR: BIT28 (Bit 28)                      */
#define GPIOn_INT_EN_CLR_BIT28_Msk        (0x10000000UL)            /*!< GPIOn INT_EN_CLR: BIT28 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT29_Pos        (29UL)                    /*!< GPIOn INT_EN_CLR: BIT29 (Bit 29)                      */
#define GPIOn_INT_EN_CLR_BIT29_Msk        (0x20000000UL)            /*!< GPIOn INT_EN_CLR: BIT29 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT30_Pos        (30UL)                    /*!< GPIOn INT_EN_CLR: BIT30 (Bit 30)                      */
#define GPIOn_INT_EN_CLR_BIT30_Msk        (0x40000000UL)            /*!< GPIOn INT_EN_CLR: BIT30 (Bitfield-Mask: 0x01)         */
#define GPIOn_INT_EN_CLR_BIT31_Pos        (31UL)                    /*!< GPIOn INT_EN_CLR: BIT31 (Bit 31)                      */
#define GPIOn_INT_EN_CLR_BIT31_Msk        (0x80000000UL)            /*!< GPIOn INT_EN_CLR: BIT31 (Bitfield-Mask: 0x01)         */
/* =======================================================  INT_STAT  ======================================================== */
#define GPIOn_INT_STAT_BIT0_Pos           (0UL)                     /*!< GPIOn INT_STAT: BIT0 (Bit 0)                          */
#define GPIOn_INT_STAT_BIT0_Msk           (0x1UL)                   /*!< GPIOn INT_STAT: BIT0 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_STAT_BIT1_Pos           (1UL)                     /*!< GPIOn INT_STAT: BIT1 (Bit 1)                          */
#define GPIOn_INT_STAT_BIT1_Msk           (0x2UL)                   /*!< GPIOn INT_STAT: BIT1 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_STAT_BIT2_Pos           (2UL)                     /*!< GPIOn INT_STAT: BIT2 (Bit 2)                          */
#define GPIOn_INT_STAT_BIT2_Msk           (0x4UL)                   /*!< GPIOn INT_STAT: BIT2 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_STAT_BIT3_Pos           (3UL)                     /*!< GPIOn INT_STAT: BIT3 (Bit 3)                          */
#define GPIOn_INT_STAT_BIT3_Msk           (0x8UL)                   /*!< GPIOn INT_STAT: BIT3 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_STAT_BIT4_Pos           (4UL)                     /*!< GPIOn INT_STAT: BIT4 (Bit 4)                          */
#define GPIOn_INT_STAT_BIT4_Msk           (0x10UL)                  /*!< GPIOn INT_STAT: BIT4 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_STAT_BIT5_Pos           (5UL)                     /*!< GPIOn INT_STAT: BIT5 (Bit 5)                          */
#define GPIOn_INT_STAT_BIT5_Msk           (0x20UL)                  /*!< GPIOn INT_STAT: BIT5 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_STAT_BIT6_Pos           (6UL)                     /*!< GPIOn INT_STAT: BIT6 (Bit 6)                          */
#define GPIOn_INT_STAT_BIT6_Msk           (0x40UL)                  /*!< GPIOn INT_STAT: BIT6 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_STAT_BIT7_Pos           (7UL)                     /*!< GPIOn INT_STAT: BIT7 (Bit 7)                          */
#define GPIOn_INT_STAT_BIT7_Msk           (0x80UL)                  /*!< GPIOn INT_STAT: BIT7 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_STAT_BIT8_Pos           (8UL)                     /*!< GPIOn INT_STAT: BIT8 (Bit 8)                          */
#define GPIOn_INT_STAT_BIT8_Msk           (0x100UL)                 /*!< GPIOn INT_STAT: BIT8 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_STAT_BIT9_Pos           (9UL)                     /*!< GPIOn INT_STAT: BIT9 (Bit 9)                          */
#define GPIOn_INT_STAT_BIT9_Msk           (0x200UL)                 /*!< GPIOn INT_STAT: BIT9 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_STAT_BIT10_Pos          (10UL)                    /*!< GPIOn INT_STAT: BIT10 (Bit 10)                        */
#define GPIOn_INT_STAT_BIT10_Msk          (0x400UL)                 /*!< GPIOn INT_STAT: BIT10 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT11_Pos          (11UL)                    /*!< GPIOn INT_STAT: BIT11 (Bit 11)                        */
#define GPIOn_INT_STAT_BIT11_Msk          (0x800UL)                 /*!< GPIOn INT_STAT: BIT11 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT12_Pos          (12UL)                    /*!< GPIOn INT_STAT: BIT12 (Bit 12)                        */
#define GPIOn_INT_STAT_BIT12_Msk          (0x1000UL)                /*!< GPIOn INT_STAT: BIT12 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT13_Pos          (13UL)                    /*!< GPIOn INT_STAT: BIT13 (Bit 13)                        */
#define GPIOn_INT_STAT_BIT13_Msk          (0x2000UL)                /*!< GPIOn INT_STAT: BIT13 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT14_Pos          (14UL)                    /*!< GPIOn INT_STAT: BIT14 (Bit 14)                        */
#define GPIOn_INT_STAT_BIT14_Msk          (0x4000UL)                /*!< GPIOn INT_STAT: BIT14 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT15_Pos          (15UL)                    /*!< GPIOn INT_STAT: BIT15 (Bit 15)                        */
#define GPIOn_INT_STAT_BIT15_Msk          (0x8000UL)                /*!< GPIOn INT_STAT: BIT15 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT16_Pos          (16UL)                    /*!< GPIOn INT_STAT: BIT16 (Bit 16)                        */
#define GPIOn_INT_STAT_BIT16_Msk          (0x10000UL)               /*!< GPIOn INT_STAT: BIT16 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT17_Pos          (17UL)                    /*!< GPIOn INT_STAT: BIT17 (Bit 17)                        */
#define GPIOn_INT_STAT_BIT17_Msk          (0x20000UL)               /*!< GPIOn INT_STAT: BIT17 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT18_Pos          (18UL)                    /*!< GPIOn INT_STAT: BIT18 (Bit 18)                        */
#define GPIOn_INT_STAT_BIT18_Msk          (0x40000UL)               /*!< GPIOn INT_STAT: BIT18 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT19_Pos          (19UL)                    /*!< GPIOn INT_STAT: BIT19 (Bit 19)                        */
#define GPIOn_INT_STAT_BIT19_Msk          (0x80000UL)               /*!< GPIOn INT_STAT: BIT19 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT20_Pos          (20UL)                    /*!< GPIOn INT_STAT: BIT20 (Bit 20)                        */
#define GPIOn_INT_STAT_BIT20_Msk          (0x100000UL)              /*!< GPIOn INT_STAT: BIT20 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT21_Pos          (21UL)                    /*!< GPIOn INT_STAT: BIT21 (Bit 21)                        */
#define GPIOn_INT_STAT_BIT21_Msk          (0x200000UL)              /*!< GPIOn INT_STAT: BIT21 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT22_Pos          (22UL)                    /*!< GPIOn INT_STAT: BIT22 (Bit 22)                        */
#define GPIOn_INT_STAT_BIT22_Msk          (0x400000UL)              /*!< GPIOn INT_STAT: BIT22 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT23_Pos          (23UL)                    /*!< GPIOn INT_STAT: BIT23 (Bit 23)                        */
#define GPIOn_INT_STAT_BIT23_Msk          (0x800000UL)              /*!< GPIOn INT_STAT: BIT23 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT24_Pos          (24UL)                    /*!< GPIOn INT_STAT: BIT24 (Bit 24)                        */
#define GPIOn_INT_STAT_BIT24_Msk          (0x1000000UL)             /*!< GPIOn INT_STAT: BIT24 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT25_Pos          (25UL)                    /*!< GPIOn INT_STAT: BIT25 (Bit 25)                        */
#define GPIOn_INT_STAT_BIT25_Msk          (0x2000000UL)             /*!< GPIOn INT_STAT: BIT25 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT26_Pos          (26UL)                    /*!< GPIOn INT_STAT: BIT26 (Bit 26)                        */
#define GPIOn_INT_STAT_BIT26_Msk          (0x4000000UL)             /*!< GPIOn INT_STAT: BIT26 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT27_Pos          (27UL)                    /*!< GPIOn INT_STAT: BIT27 (Bit 27)                        */
#define GPIOn_INT_STAT_BIT27_Msk          (0x8000000UL)             /*!< GPIOn INT_STAT: BIT27 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT28_Pos          (28UL)                    /*!< GPIOn INT_STAT: BIT28 (Bit 28)                        */
#define GPIOn_INT_STAT_BIT28_Msk          (0x10000000UL)            /*!< GPIOn INT_STAT: BIT28 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT29_Pos          (29UL)                    /*!< GPIOn INT_STAT: BIT29 (Bit 29)                        */
#define GPIOn_INT_STAT_BIT29_Msk          (0x20000000UL)            /*!< GPIOn INT_STAT: BIT29 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT30_Pos          (30UL)                    /*!< GPIOn INT_STAT: BIT30 (Bit 30)                        */
#define GPIOn_INT_STAT_BIT30_Msk          (0x40000000UL)            /*!< GPIOn INT_STAT: BIT30 (Bitfield-Mask: 0x01)           */
#define GPIOn_INT_STAT_BIT31_Pos          (31UL)                    /*!< GPIOn INT_STAT: BIT31 (Bit 31)                        */
#define GPIOn_INT_STAT_BIT31_Msk          (0x80000000UL)            /*!< GPIOn INT_STAT: BIT31 (Bitfield-Mask: 0x01)           */
/* ========================================================  INT_CLR  ======================================================== */
#define GPIOn_INT_CLR_BIT0_Pos            (0UL)                     /*!< GPIOn INT_CLR: BIT0 (Bit 0)                           */
#define GPIOn_INT_CLR_BIT0_Msk            (0x1UL)                   /*!< GPIOn INT_CLR: BIT0 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_CLR_BIT1_Pos            (1UL)                     /*!< GPIOn INT_CLR: BIT1 (Bit 1)                           */
#define GPIOn_INT_CLR_BIT1_Msk            (0x2UL)                   /*!< GPIOn INT_CLR: BIT1 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_CLR_BIT2_Pos            (2UL)                     /*!< GPIOn INT_CLR: BIT2 (Bit 2)                           */
#define GPIOn_INT_CLR_BIT2_Msk            (0x4UL)                   /*!< GPIOn INT_CLR: BIT2 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_CLR_BIT3_Pos            (3UL)                     /*!< GPIOn INT_CLR: BIT3 (Bit 3)                           */
#define GPIOn_INT_CLR_BIT3_Msk            (0x8UL)                   /*!< GPIOn INT_CLR: BIT3 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_CLR_BIT4_Pos            (4UL)                     /*!< GPIOn INT_CLR: BIT4 (Bit 4)                           */
#define GPIOn_INT_CLR_BIT4_Msk            (0x10UL)                  /*!< GPIOn INT_CLR: BIT4 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_CLR_BIT5_Pos            (5UL)                     /*!< GPIOn INT_CLR: BIT5 (Bit 5)                           */
#define GPIOn_INT_CLR_BIT5_Msk            (0x20UL)                  /*!< GPIOn INT_CLR: BIT5 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_CLR_BIT6_Pos            (6UL)                     /*!< GPIOn INT_CLR: BIT6 (Bit 6)                           */
#define GPIOn_INT_CLR_BIT6_Msk            (0x40UL)                  /*!< GPIOn INT_CLR: BIT6 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_CLR_BIT7_Pos            (7UL)                     /*!< GPIOn INT_CLR: BIT7 (Bit 7)                           */
#define GPIOn_INT_CLR_BIT7_Msk            (0x80UL)                  /*!< GPIOn INT_CLR: BIT7 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_CLR_BIT8_Pos            (8UL)                     /*!< GPIOn INT_CLR: BIT8 (Bit 8)                           */
#define GPIOn_INT_CLR_BIT8_Msk            (0x100UL)                 /*!< GPIOn INT_CLR: BIT8 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_CLR_BIT9_Pos            (9UL)                     /*!< GPIOn INT_CLR: BIT9 (Bit 9)                           */
#define GPIOn_INT_CLR_BIT9_Msk            (0x200UL)                 /*!< GPIOn INT_CLR: BIT9 (Bitfield-Mask: 0x01)             */
#define GPIOn_INT_CLR_BIT10_Pos           (10UL)                    /*!< GPIOn INT_CLR: BIT10 (Bit 10)                         */
#define GPIOn_INT_CLR_BIT10_Msk           (0x400UL)                 /*!< GPIOn INT_CLR: BIT10 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT11_Pos           (11UL)                    /*!< GPIOn INT_CLR: BIT11 (Bit 11)                         */
#define GPIOn_INT_CLR_BIT11_Msk           (0x800UL)                 /*!< GPIOn INT_CLR: BIT11 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT12_Pos           (12UL)                    /*!< GPIOn INT_CLR: BIT12 (Bit 12)                         */
#define GPIOn_INT_CLR_BIT12_Msk           (0x1000UL)                /*!< GPIOn INT_CLR: BIT12 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT13_Pos           (13UL)                    /*!< GPIOn INT_CLR: BIT13 (Bit 13)                         */
#define GPIOn_INT_CLR_BIT13_Msk           (0x2000UL)                /*!< GPIOn INT_CLR: BIT13 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT14_Pos           (14UL)                    /*!< GPIOn INT_CLR: BIT14 (Bit 14)                         */
#define GPIOn_INT_CLR_BIT14_Msk           (0x4000UL)                /*!< GPIOn INT_CLR: BIT14 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT15_Pos           (15UL)                    /*!< GPIOn INT_CLR: BIT15 (Bit 15)                         */
#define GPIOn_INT_CLR_BIT15_Msk           (0x8000UL)                /*!< GPIOn INT_CLR: BIT15 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT16_Pos           (16UL)                    /*!< GPIOn INT_CLR: BIT16 (Bit 16)                         */
#define GPIOn_INT_CLR_BIT16_Msk           (0x10000UL)               /*!< GPIOn INT_CLR: BIT16 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT17_Pos           (17UL)                    /*!< GPIOn INT_CLR: BIT17 (Bit 17)                         */
#define GPIOn_INT_CLR_BIT17_Msk           (0x20000UL)               /*!< GPIOn INT_CLR: BIT17 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT18_Pos           (18UL)                    /*!< GPIOn INT_CLR: BIT18 (Bit 18)                         */
#define GPIOn_INT_CLR_BIT18_Msk           (0x40000UL)               /*!< GPIOn INT_CLR: BIT18 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT19_Pos           (19UL)                    /*!< GPIOn INT_CLR: BIT19 (Bit 19)                         */
#define GPIOn_INT_CLR_BIT19_Msk           (0x80000UL)               /*!< GPIOn INT_CLR: BIT19 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT20_Pos           (20UL)                    /*!< GPIOn INT_CLR: BIT20 (Bit 20)                         */
#define GPIOn_INT_CLR_BIT20_Msk           (0x100000UL)              /*!< GPIOn INT_CLR: BIT20 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT21_Pos           (21UL)                    /*!< GPIOn INT_CLR: BIT21 (Bit 21)                         */
#define GPIOn_INT_CLR_BIT21_Msk           (0x200000UL)              /*!< GPIOn INT_CLR: BIT21 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT22_Pos           (22UL)                    /*!< GPIOn INT_CLR: BIT22 (Bit 22)                         */
#define GPIOn_INT_CLR_BIT22_Msk           (0x400000UL)              /*!< GPIOn INT_CLR: BIT22 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT23_Pos           (23UL)                    /*!< GPIOn INT_CLR: BIT23 (Bit 23)                         */
#define GPIOn_INT_CLR_BIT23_Msk           (0x800000UL)              /*!< GPIOn INT_CLR: BIT23 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT24_Pos           (24UL)                    /*!< GPIOn INT_CLR: BIT24 (Bit 24)                         */
#define GPIOn_INT_CLR_BIT24_Msk           (0x1000000UL)             /*!< GPIOn INT_CLR: BIT24 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT25_Pos           (25UL)                    /*!< GPIOn INT_CLR: BIT25 (Bit 25)                         */
#define GPIOn_INT_CLR_BIT25_Msk           (0x2000000UL)             /*!< GPIOn INT_CLR: BIT25 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT26_Pos           (26UL)                    /*!< GPIOn INT_CLR: BIT26 (Bit 26)                         */
#define GPIOn_INT_CLR_BIT26_Msk           (0x4000000UL)             /*!< GPIOn INT_CLR: BIT26 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT27_Pos           (27UL)                    /*!< GPIOn INT_CLR: BIT27 (Bit 27)                         */
#define GPIOn_INT_CLR_BIT27_Msk           (0x8000000UL)             /*!< GPIOn INT_CLR: BIT27 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT28_Pos           (28UL)                    /*!< GPIOn INT_CLR: BIT28 (Bit 28)                         */
#define GPIOn_INT_CLR_BIT28_Msk           (0x10000000UL)            /*!< GPIOn INT_CLR: BIT28 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT29_Pos           (29UL)                    /*!< GPIOn INT_CLR: BIT29 (Bit 29)                         */
#define GPIOn_INT_CLR_BIT29_Msk           (0x20000000UL)            /*!< GPIOn INT_CLR: BIT29 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT30_Pos           (30UL)                    /*!< GPIOn INT_CLR: BIT30 (Bit 30)                         */
#define GPIOn_INT_CLR_BIT30_Msk           (0x40000000UL)            /*!< GPIOn INT_CLR: BIT30 (Bitfield-Mask: 0x01)            */
#define GPIOn_INT_CLR_BIT31_Pos           (31UL)                    /*!< GPIOn INT_CLR: BIT31 (Bit 31)                         */
#define GPIOn_INT_CLR_BIT31_Msk           (0x80000000UL)            /*!< GPIOn INT_CLR: BIT31 (Bitfield-Mask: 0x01)            */
/* ========================================================  WAKE_EN  ======================================================== */
#define GPIOn_WAKE_EN_BIT0_Pos            (0UL)                     /*!< GPIOn WAKE_EN: BIT0 (Bit 0)                           */
#define GPIOn_WAKE_EN_BIT0_Msk            (0x1UL)                   /*!< GPIOn WAKE_EN: BIT0 (Bitfield-Mask: 0x01)             */
#define GPIOn_WAKE_EN_BIT1_Pos            (1UL)                     /*!< GPIOn WAKE_EN: BIT1 (Bit 1)                           */
#define GPIOn_WAKE_EN_BIT1_Msk            (0x2UL)                   /*!< GPIOn WAKE_EN: BIT1 (Bitfield-Mask: 0x01)             */
#define GPIOn_WAKE_EN_BIT2_Pos            (2UL)                     /*!< GPIOn WAKE_EN: BIT2 (Bit 2)                           */
#define GPIOn_WAKE_EN_BIT2_Msk            (0x4UL)                   /*!< GPIOn WAKE_EN: BIT2 (Bitfield-Mask: 0x01)             */
#define GPIOn_WAKE_EN_BIT3_Pos            (3UL)                     /*!< GPIOn WAKE_EN: BIT3 (Bit 3)                           */
#define GPIOn_WAKE_EN_BIT3_Msk            (0x8UL)                   /*!< GPIOn WAKE_EN: BIT3 (Bitfield-Mask: 0x01)             */
#define GPIOn_WAKE_EN_BIT4_Pos            (4UL)                     /*!< GPIOn WAKE_EN: BIT4 (Bit 4)                           */
#define GPIOn_WAKE_EN_BIT4_Msk            (0x10UL)                  /*!< GPIOn WAKE_EN: BIT4 (Bitfield-Mask: 0x01)             */
#define GPIOn_WAKE_EN_BIT5_Pos            (5UL)                     /*!< GPIOn WAKE_EN: BIT5 (Bit 5)                           */
#define GPIOn_WAKE_EN_BIT5_Msk            (0x20UL)                  /*!< GPIOn WAKE_EN: BIT5 (Bitfield-Mask: 0x01)             */
#define GPIOn_WAKE_EN_BIT6_Pos            (6UL)                     /*!< GPIOn WAKE_EN: BIT6 (Bit 6)                           */
#define GPIOn_WAKE_EN_BIT6_Msk            (0x40UL)                  /*!< GPIOn WAKE_EN: BIT6 (Bitfield-Mask: 0x01)             */
#define GPIOn_WAKE_EN_BIT7_Pos            (7UL)                     /*!< GPIOn WAKE_EN: BIT7 (Bit 7)                           */
#define GPIOn_WAKE_EN_BIT7_Msk            (0x80UL)                  /*!< GPIOn WAKE_EN: BIT7 (Bitfield-Mask: 0x01)             */
#define GPIOn_WAKE_EN_BIT8_Pos            (8UL)                     /*!< GPIOn WAKE_EN: BIT8 (Bit 8)                           */
#define GPIOn_WAKE_EN_BIT8_Msk            (0x100UL)                 /*!< GPIOn WAKE_EN: BIT8 (Bitfield-Mask: 0x01)             */
#define GPIOn_WAKE_EN_BIT9_Pos            (9UL)                     /*!< GPIOn WAKE_EN: BIT9 (Bit 9)                           */
#define GPIOn_WAKE_EN_BIT9_Msk            (0x200UL)                 /*!< GPIOn WAKE_EN: BIT9 (Bitfield-Mask: 0x01)             */
#define GPIOn_WAKE_EN_BIT10_Pos           (10UL)                    /*!< GPIOn WAKE_EN: BIT10 (Bit 10)                         */
#define GPIOn_WAKE_EN_BIT10_Msk           (0x400UL)                 /*!< GPIOn WAKE_EN: BIT10 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT11_Pos           (11UL)                    /*!< GPIOn WAKE_EN: BIT11 (Bit 11)                         */
#define GPIOn_WAKE_EN_BIT11_Msk           (0x800UL)                 /*!< GPIOn WAKE_EN: BIT11 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT12_Pos           (12UL)                    /*!< GPIOn WAKE_EN: BIT12 (Bit 12)                         */
#define GPIOn_WAKE_EN_BIT12_Msk           (0x1000UL)                /*!< GPIOn WAKE_EN: BIT12 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT13_Pos           (13UL)                    /*!< GPIOn WAKE_EN: BIT13 (Bit 13)                         */
#define GPIOn_WAKE_EN_BIT13_Msk           (0x2000UL)                /*!< GPIOn WAKE_EN: BIT13 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT14_Pos           (14UL)                    /*!< GPIOn WAKE_EN: BIT14 (Bit 14)                         */
#define GPIOn_WAKE_EN_BIT14_Msk           (0x4000UL)                /*!< GPIOn WAKE_EN: BIT14 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT15_Pos           (15UL)                    /*!< GPIOn WAKE_EN: BIT15 (Bit 15)                         */
#define GPIOn_WAKE_EN_BIT15_Msk           (0x8000UL)                /*!< GPIOn WAKE_EN: BIT15 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT16_Pos           (16UL)                    /*!< GPIOn WAKE_EN: BIT16 (Bit 16)                         */
#define GPIOn_WAKE_EN_BIT16_Msk           (0x10000UL)               /*!< GPIOn WAKE_EN: BIT16 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT17_Pos           (17UL)                    /*!< GPIOn WAKE_EN: BIT17 (Bit 17)                         */
#define GPIOn_WAKE_EN_BIT17_Msk           (0x20000UL)               /*!< GPIOn WAKE_EN: BIT17 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT18_Pos           (18UL)                    /*!< GPIOn WAKE_EN: BIT18 (Bit 18)                         */
#define GPIOn_WAKE_EN_BIT18_Msk           (0x40000UL)               /*!< GPIOn WAKE_EN: BIT18 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT19_Pos           (19UL)                    /*!< GPIOn WAKE_EN: BIT19 (Bit 19)                         */
#define GPIOn_WAKE_EN_BIT19_Msk           (0x80000UL)               /*!< GPIOn WAKE_EN: BIT19 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT20_Pos           (20UL)                    /*!< GPIOn WAKE_EN: BIT20 (Bit 20)                         */
#define GPIOn_WAKE_EN_BIT20_Msk           (0x100000UL)              /*!< GPIOn WAKE_EN: BIT20 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT21_Pos           (21UL)                    /*!< GPIOn WAKE_EN: BIT21 (Bit 21)                         */
#define GPIOn_WAKE_EN_BIT21_Msk           (0x200000UL)              /*!< GPIOn WAKE_EN: BIT21 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT22_Pos           (22UL)                    /*!< GPIOn WAKE_EN: BIT22 (Bit 22)                         */
#define GPIOn_WAKE_EN_BIT22_Msk           (0x400000UL)              /*!< GPIOn WAKE_EN: BIT22 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT23_Pos           (23UL)                    /*!< GPIOn WAKE_EN: BIT23 (Bit 23)                         */
#define GPIOn_WAKE_EN_BIT23_Msk           (0x800000UL)              /*!< GPIOn WAKE_EN: BIT23 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT24_Pos           (24UL)                    /*!< GPIOn WAKE_EN: BIT24 (Bit 24)                         */
#define GPIOn_WAKE_EN_BIT24_Msk           (0x1000000UL)             /*!< GPIOn WAKE_EN: BIT24 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT25_Pos           (25UL)                    /*!< GPIOn WAKE_EN: BIT25 (Bit 25)                         */
#define GPIOn_WAKE_EN_BIT25_Msk           (0x2000000UL)             /*!< GPIOn WAKE_EN: BIT25 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT26_Pos           (26UL)                    /*!< GPIOn WAKE_EN: BIT26 (Bit 26)                         */
#define GPIOn_WAKE_EN_BIT26_Msk           (0x4000000UL)             /*!< GPIOn WAKE_EN: BIT26 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT27_Pos           (27UL)                    /*!< GPIOn WAKE_EN: BIT27 (Bit 27)                         */
#define GPIOn_WAKE_EN_BIT27_Msk           (0x8000000UL)             /*!< GPIOn WAKE_EN: BIT27 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT28_Pos           (28UL)                    /*!< GPIOn WAKE_EN: BIT28 (Bit 28)                         */
#define GPIOn_WAKE_EN_BIT28_Msk           (0x10000000UL)            /*!< GPIOn WAKE_EN: BIT28 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT29_Pos           (29UL)                    /*!< GPIOn WAKE_EN: BIT29 (Bit 29)                         */
#define GPIOn_WAKE_EN_BIT29_Msk           (0x20000000UL)            /*!< GPIOn WAKE_EN: BIT29 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT30_Pos           (30UL)                    /*!< GPIOn WAKE_EN: BIT30 (Bit 30)                         */
#define GPIOn_WAKE_EN_BIT30_Msk           (0x40000000UL)            /*!< GPIOn WAKE_EN: BIT30 (Bitfield-Mask: 0x01)            */
#define GPIOn_WAKE_EN_BIT31_Pos           (31UL)                    /*!< GPIOn WAKE_EN: BIT31 (Bit 31)                         */
#define GPIOn_WAKE_EN_BIT31_Msk           (0x80000000UL)            /*!< GPIOn WAKE_EN: BIT31 (Bitfield-Mask: 0x01)            */
/* =====================================================  INT_DUAL_EDGE  ===================================================== */
#define GPIOn_INT_DUAL_EDGE_BIT0_Pos      (0UL)                     /*!< GPIOn INT_DUAL_EDGE: BIT0 (Bit 0)                     */
#define GPIOn_INT_DUAL_EDGE_BIT0_Msk      (0x1UL)                   /*!< GPIOn INT_DUAL_EDGE: BIT0 (Bitfield-Mask: 0x01)       */
#define GPIOn_INT_DUAL_EDGE_BIT1_Pos      (1UL)                     /*!< GPIOn INT_DUAL_EDGE: BIT1 (Bit 1)                     */
#define GPIOn_INT_DUAL_EDGE_BIT1_Msk      (0x2UL)                   /*!< GPIOn INT_DUAL_EDGE: BIT1 (Bitfield-Mask: 0x01)       */
#define GPIOn_INT_DUAL_EDGE_BIT2_Pos      (2UL)                     /*!< GPIOn INT_DUAL_EDGE: BIT2 (Bit 2)                     */
#define GPIOn_INT_DUAL_EDGE_BIT2_Msk      (0x4UL)                   /*!< GPIOn INT_DUAL_EDGE: BIT2 (Bitfield-Mask: 0x01)       */
#define GPIOn_INT_DUAL_EDGE_BIT3_Pos      (3UL)                     /*!< GPIOn INT_DUAL_EDGE: BIT3 (Bit 3)                     */
#define GPIOn_INT_DUAL_EDGE_BIT3_Msk      (0x8UL)                   /*!< GPIOn INT_DUAL_EDGE: BIT3 (Bitfield-Mask: 0x01)       */
#define GPIOn_INT_DUAL_EDGE_BIT4_Pos      (4UL)                     /*!< GPIOn INT_DUAL_EDGE: BIT4 (Bit 4)                     */
#define GPIOn_INT_DUAL_EDGE_BIT4_Msk      (0x10UL)                  /*!< GPIOn INT_DUAL_EDGE: BIT4 (Bitfield-Mask: 0x01)       */
#define GPIOn_INT_DUAL_EDGE_BIT5_Pos      (5UL)                     /*!< GPIOn INT_DUAL_EDGE: BIT5 (Bit 5)                     */
#define GPIOn_INT_DUAL_EDGE_BIT5_Msk      (0x20UL)                  /*!< GPIOn INT_DUAL_EDGE: BIT5 (Bitfield-Mask: 0x01)       */
#define GPIOn_INT_DUAL_EDGE_BIT6_Pos      (6UL)                     /*!< GPIOn INT_DUAL_EDGE: BIT6 (Bit 6)                     */
#define GPIOn_INT_DUAL_EDGE_BIT6_Msk      (0x40UL)                  /*!< GPIOn INT_DUAL_EDGE: BIT6 (Bitfield-Mask: 0x01)       */
#define GPIOn_INT_DUAL_EDGE_BIT7_Pos      (7UL)                     /*!< GPIOn INT_DUAL_EDGE: BIT7 (Bit 7)                     */
#define GPIOn_INT_DUAL_EDGE_BIT7_Msk      (0x80UL)                  /*!< GPIOn INT_DUAL_EDGE: BIT7 (Bitfield-Mask: 0x01)       */
#define GPIOn_INT_DUAL_EDGE_BIT8_Pos      (8UL)                     /*!< GPIOn INT_DUAL_EDGE: BIT8 (Bit 8)                     */
#define GPIOn_INT_DUAL_EDGE_BIT8_Msk      (0x100UL)                 /*!< GPIOn INT_DUAL_EDGE: BIT8 (Bitfield-Mask: 0x01)       */
#define GPIOn_INT_DUAL_EDGE_BIT9_Pos      (9UL)                     /*!< GPIOn INT_DUAL_EDGE: BIT9 (Bit 9)                     */
#define GPIOn_INT_DUAL_EDGE_BIT9_Msk      (0x200UL)                 /*!< GPIOn INT_DUAL_EDGE: BIT9 (Bitfield-Mask: 0x01)       */
#define GPIOn_INT_DUAL_EDGE_BIT10_Pos     (10UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT10 (Bit 10)                   */
#define GPIOn_INT_DUAL_EDGE_BIT10_Msk     (0x400UL)                 /*!< GPIOn INT_DUAL_EDGE: BIT10 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT11_Pos     (11UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT11 (Bit 11)                   */
#define GPIOn_INT_DUAL_EDGE_BIT11_Msk     (0x800UL)                 /*!< GPIOn INT_DUAL_EDGE: BIT11 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT12_Pos     (12UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT12 (Bit 12)                   */
#define GPIOn_INT_DUAL_EDGE_BIT12_Msk     (0x1000UL)                /*!< GPIOn INT_DUAL_EDGE: BIT12 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT13_Pos     (13UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT13 (Bit 13)                   */
#define GPIOn_INT_DUAL_EDGE_BIT13_Msk     (0x2000UL)                /*!< GPIOn INT_DUAL_EDGE: BIT13 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT14_Pos     (14UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT14 (Bit 14)                   */
#define GPIOn_INT_DUAL_EDGE_BIT14_Msk     (0x4000UL)                /*!< GPIOn INT_DUAL_EDGE: BIT14 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT15_Pos     (15UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT15 (Bit 15)                   */
#define GPIOn_INT_DUAL_EDGE_BIT15_Msk     (0x8000UL)                /*!< GPIOn INT_DUAL_EDGE: BIT15 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT16_Pos     (16UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT16 (Bit 16)                   */
#define GPIOn_INT_DUAL_EDGE_BIT16_Msk     (0x10000UL)               /*!< GPIOn INT_DUAL_EDGE: BIT16 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT17_Pos     (17UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT17 (Bit 17)                   */
#define GPIOn_INT_DUAL_EDGE_BIT17_Msk     (0x20000UL)               /*!< GPIOn INT_DUAL_EDGE: BIT17 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT18_Pos     (18UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT18 (Bit 18)                   */
#define GPIOn_INT_DUAL_EDGE_BIT18_Msk     (0x40000UL)               /*!< GPIOn INT_DUAL_EDGE: BIT18 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT19_Pos     (19UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT19 (Bit 19)                   */
#define GPIOn_INT_DUAL_EDGE_BIT19_Msk     (0x80000UL)               /*!< GPIOn INT_DUAL_EDGE: BIT19 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT20_Pos     (20UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT20 (Bit 20)                   */
#define GPIOn_INT_DUAL_EDGE_BIT20_Msk     (0x100000UL)              /*!< GPIOn INT_DUAL_EDGE: BIT20 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT21_Pos     (21UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT21 (Bit 21)                   */
#define GPIOn_INT_DUAL_EDGE_BIT21_Msk     (0x200000UL)              /*!< GPIOn INT_DUAL_EDGE: BIT21 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT22_Pos     (22UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT22 (Bit 22)                   */
#define GPIOn_INT_DUAL_EDGE_BIT22_Msk     (0x400000UL)              /*!< GPIOn INT_DUAL_EDGE: BIT22 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT23_Pos     (23UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT23 (Bit 23)                   */
#define GPIOn_INT_DUAL_EDGE_BIT23_Msk     (0x800000UL)              /*!< GPIOn INT_DUAL_EDGE: BIT23 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT24_Pos     (24UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT24 (Bit 24)                   */
#define GPIOn_INT_DUAL_EDGE_BIT24_Msk     (0x1000000UL)             /*!< GPIOn INT_DUAL_EDGE: BIT24 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT25_Pos     (25UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT25 (Bit 25)                   */
#define GPIOn_INT_DUAL_EDGE_BIT25_Msk     (0x2000000UL)             /*!< GPIOn INT_DUAL_EDGE: BIT25 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT26_Pos     (26UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT26 (Bit 26)                   */
#define GPIOn_INT_DUAL_EDGE_BIT26_Msk     (0x4000000UL)             /*!< GPIOn INT_DUAL_EDGE: BIT26 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT27_Pos     (27UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT27 (Bit 27)                   */
#define GPIOn_INT_DUAL_EDGE_BIT27_Msk     (0x8000000UL)             /*!< GPIOn INT_DUAL_EDGE: BIT27 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT28_Pos     (28UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT28 (Bit 28)                   */
#define GPIOn_INT_DUAL_EDGE_BIT28_Msk     (0x10000000UL)            /*!< GPIOn INT_DUAL_EDGE: BIT28 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT29_Pos     (29UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT29 (Bit 29)                   */
#define GPIOn_INT_DUAL_EDGE_BIT29_Msk     (0x20000000UL)            /*!< GPIOn INT_DUAL_EDGE: BIT29 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT30_Pos     (30UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT30 (Bit 30)                   */
#define GPIOn_INT_DUAL_EDGE_BIT30_Msk     (0x40000000UL)            /*!< GPIOn INT_DUAL_EDGE: BIT30 (Bitfield-Mask: 0x01)      */
#define GPIOn_INT_DUAL_EDGE_BIT31_Pos     (31UL)                    /*!< GPIOn INT_DUAL_EDGE: BIT31 (Bit 31)                   */
#define GPIOn_INT_DUAL_EDGE_BIT31_Msk     (0x80000000UL)            /*!< GPIOn INT_DUAL_EDGE: BIT31 (Bitfield-Mask: 0x01)      */
/* =======================================================  PAD_CFG1  ======================================================== */
#define GPIOn_PAD_CFG1_BIT0_Pos           (0UL)                     /*!< GPIOn PAD_CFG1: BIT0 (Bit 0)                          */
#define GPIOn_PAD_CFG1_BIT0_Msk           (0x1UL)                   /*!< GPIOn PAD_CFG1: BIT0 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG1_BIT1_Pos           (1UL)                     /*!< GPIOn PAD_CFG1: BIT1 (Bit 1)                          */
#define GPIOn_PAD_CFG1_BIT1_Msk           (0x2UL)                   /*!< GPIOn PAD_CFG1: BIT1 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG1_BIT2_Pos           (2UL)                     /*!< GPIOn PAD_CFG1: BIT2 (Bit 2)                          */
#define GPIOn_PAD_CFG1_BIT2_Msk           (0x4UL)                   /*!< GPIOn PAD_CFG1: BIT2 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG1_BIT3_Pos           (3UL)                     /*!< GPIOn PAD_CFG1: BIT3 (Bit 3)                          */
#define GPIOn_PAD_CFG1_BIT3_Msk           (0x8UL)                   /*!< GPIOn PAD_CFG1: BIT3 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG1_BIT4_Pos           (4UL)                     /*!< GPIOn PAD_CFG1: BIT4 (Bit 4)                          */
#define GPIOn_PAD_CFG1_BIT4_Msk           (0x10UL)                  /*!< GPIOn PAD_CFG1: BIT4 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG1_BIT5_Pos           (5UL)                     /*!< GPIOn PAD_CFG1: BIT5 (Bit 5)                          */
#define GPIOn_PAD_CFG1_BIT5_Msk           (0x20UL)                  /*!< GPIOn PAD_CFG1: BIT5 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG1_BIT6_Pos           (6UL)                     /*!< GPIOn PAD_CFG1: BIT6 (Bit 6)                          */
#define GPIOn_PAD_CFG1_BIT6_Msk           (0x40UL)                  /*!< GPIOn PAD_CFG1: BIT6 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG1_BIT7_Pos           (7UL)                     /*!< GPIOn PAD_CFG1: BIT7 (Bit 7)                          */
#define GPIOn_PAD_CFG1_BIT7_Msk           (0x80UL)                  /*!< GPIOn PAD_CFG1: BIT7 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG1_BIT8_Pos           (8UL)                     /*!< GPIOn PAD_CFG1: BIT8 (Bit 8)                          */
#define GPIOn_PAD_CFG1_BIT8_Msk           (0x100UL)                 /*!< GPIOn PAD_CFG1: BIT8 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG1_BIT9_Pos           (9UL)                     /*!< GPIOn PAD_CFG1: BIT9 (Bit 9)                          */
#define GPIOn_PAD_CFG1_BIT9_Msk           (0x200UL)                 /*!< GPIOn PAD_CFG1: BIT9 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG1_BIT10_Pos          (10UL)                    /*!< GPIOn PAD_CFG1: BIT10 (Bit 10)                        */
#define GPIOn_PAD_CFG1_BIT10_Msk          (0x400UL)                 /*!< GPIOn PAD_CFG1: BIT10 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT11_Pos          (11UL)                    /*!< GPIOn PAD_CFG1: BIT11 (Bit 11)                        */
#define GPIOn_PAD_CFG1_BIT11_Msk          (0x800UL)                 /*!< GPIOn PAD_CFG1: BIT11 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT12_Pos          (12UL)                    /*!< GPIOn PAD_CFG1: BIT12 (Bit 12)                        */
#define GPIOn_PAD_CFG1_BIT12_Msk          (0x1000UL)                /*!< GPIOn PAD_CFG1: BIT12 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT13_Pos          (13UL)                    /*!< GPIOn PAD_CFG1: BIT13 (Bit 13)                        */
#define GPIOn_PAD_CFG1_BIT13_Msk          (0x2000UL)                /*!< GPIOn PAD_CFG1: BIT13 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT14_Pos          (14UL)                    /*!< GPIOn PAD_CFG1: BIT14 (Bit 14)                        */
#define GPIOn_PAD_CFG1_BIT14_Msk          (0x4000UL)                /*!< GPIOn PAD_CFG1: BIT14 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT15_Pos          (15UL)                    /*!< GPIOn PAD_CFG1: BIT15 (Bit 15)                        */
#define GPIOn_PAD_CFG1_BIT15_Msk          (0x8000UL)                /*!< GPIOn PAD_CFG1: BIT15 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT16_Pos          (16UL)                    /*!< GPIOn PAD_CFG1: BIT16 (Bit 16)                        */
#define GPIOn_PAD_CFG1_BIT16_Msk          (0x10000UL)               /*!< GPIOn PAD_CFG1: BIT16 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT17_Pos          (17UL)                    /*!< GPIOn PAD_CFG1: BIT17 (Bit 17)                        */
#define GPIOn_PAD_CFG1_BIT17_Msk          (0x20000UL)               /*!< GPIOn PAD_CFG1: BIT17 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT18_Pos          (18UL)                    /*!< GPIOn PAD_CFG1: BIT18 (Bit 18)                        */
#define GPIOn_PAD_CFG1_BIT18_Msk          (0x40000UL)               /*!< GPIOn PAD_CFG1: BIT18 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT19_Pos          (19UL)                    /*!< GPIOn PAD_CFG1: BIT19 (Bit 19)                        */
#define GPIOn_PAD_CFG1_BIT19_Msk          (0x80000UL)               /*!< GPIOn PAD_CFG1: BIT19 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT20_Pos          (20UL)                    /*!< GPIOn PAD_CFG1: BIT20 (Bit 20)                        */
#define GPIOn_PAD_CFG1_BIT20_Msk          (0x100000UL)              /*!< GPIOn PAD_CFG1: BIT20 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT21_Pos          (21UL)                    /*!< GPIOn PAD_CFG1: BIT21 (Bit 21)                        */
#define GPIOn_PAD_CFG1_BIT21_Msk          (0x200000UL)              /*!< GPIOn PAD_CFG1: BIT21 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT22_Pos          (22UL)                    /*!< GPIOn PAD_CFG1: BIT22 (Bit 22)                        */
#define GPIOn_PAD_CFG1_BIT22_Msk          (0x400000UL)              /*!< GPIOn PAD_CFG1: BIT22 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT23_Pos          (23UL)                    /*!< GPIOn PAD_CFG1: BIT23 (Bit 23)                        */
#define GPIOn_PAD_CFG1_BIT23_Msk          (0x800000UL)              /*!< GPIOn PAD_CFG1: BIT23 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT24_Pos          (24UL)                    /*!< GPIOn PAD_CFG1: BIT24 (Bit 24)                        */
#define GPIOn_PAD_CFG1_BIT24_Msk          (0x1000000UL)             /*!< GPIOn PAD_CFG1: BIT24 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT25_Pos          (25UL)                    /*!< GPIOn PAD_CFG1: BIT25 (Bit 25)                        */
#define GPIOn_PAD_CFG1_BIT25_Msk          (0x2000000UL)             /*!< GPIOn PAD_CFG1: BIT25 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT26_Pos          (26UL)                    /*!< GPIOn PAD_CFG1: BIT26 (Bit 26)                        */
#define GPIOn_PAD_CFG1_BIT26_Msk          (0x4000000UL)             /*!< GPIOn PAD_CFG1: BIT26 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT27_Pos          (27UL)                    /*!< GPIOn PAD_CFG1: BIT27 (Bit 27)                        */
#define GPIOn_PAD_CFG1_BIT27_Msk          (0x8000000UL)             /*!< GPIOn PAD_CFG1: BIT27 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT28_Pos          (28UL)                    /*!< GPIOn PAD_CFG1: BIT28 (Bit 28)                        */
#define GPIOn_PAD_CFG1_BIT28_Msk          (0x10000000UL)            /*!< GPIOn PAD_CFG1: BIT28 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT29_Pos          (29UL)                    /*!< GPIOn PAD_CFG1: BIT29 (Bit 29)                        */
#define GPIOn_PAD_CFG1_BIT29_Msk          (0x20000000UL)            /*!< GPIOn PAD_CFG1: BIT29 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT30_Pos          (30UL)                    /*!< GPIOn PAD_CFG1: BIT30 (Bit 30)                        */
#define GPIOn_PAD_CFG1_BIT30_Msk          (0x40000000UL)            /*!< GPIOn PAD_CFG1: BIT30 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG1_BIT31_Pos          (31UL)                    /*!< GPIOn PAD_CFG1: BIT31 (Bit 31)                        */
#define GPIOn_PAD_CFG1_BIT31_Msk          (0x80000000UL)            /*!< GPIOn PAD_CFG1: BIT31 (Bitfield-Mask: 0x01)           */
/* =======================================================  PAD_CFG2  ======================================================== */
#define GPIOn_PAD_CFG2_BIT0_Pos           (0UL)                     /*!< GPIOn PAD_CFG2: BIT0 (Bit 0)                          */
#define GPIOn_PAD_CFG2_BIT0_Msk           (0x1UL)                   /*!< GPIOn PAD_CFG2: BIT0 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG2_BIT1_Pos           (1UL)                     /*!< GPIOn PAD_CFG2: BIT1 (Bit 1)                          */
#define GPIOn_PAD_CFG2_BIT1_Msk           (0x2UL)                   /*!< GPIOn PAD_CFG2: BIT1 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG2_BIT2_Pos           (2UL)                     /*!< GPIOn PAD_CFG2: BIT2 (Bit 2)                          */
#define GPIOn_PAD_CFG2_BIT2_Msk           (0x4UL)                   /*!< GPIOn PAD_CFG2: BIT2 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG2_BIT3_Pos           (3UL)                     /*!< GPIOn PAD_CFG2: BIT3 (Bit 3)                          */
#define GPIOn_PAD_CFG2_BIT3_Msk           (0x8UL)                   /*!< GPIOn PAD_CFG2: BIT3 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG2_BIT4_Pos           (4UL)                     /*!< GPIOn PAD_CFG2: BIT4 (Bit 4)                          */
#define GPIOn_PAD_CFG2_BIT4_Msk           (0x10UL)                  /*!< GPIOn PAD_CFG2: BIT4 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG2_BIT5_Pos           (5UL)                     /*!< GPIOn PAD_CFG2: BIT5 (Bit 5)                          */
#define GPIOn_PAD_CFG2_BIT5_Msk           (0x20UL)                  /*!< GPIOn PAD_CFG2: BIT5 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG2_BIT6_Pos           (6UL)                     /*!< GPIOn PAD_CFG2: BIT6 (Bit 6)                          */
#define GPIOn_PAD_CFG2_BIT6_Msk           (0x40UL)                  /*!< GPIOn PAD_CFG2: BIT6 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG2_BIT7_Pos           (7UL)                     /*!< GPIOn PAD_CFG2: BIT7 (Bit 7)                          */
#define GPIOn_PAD_CFG2_BIT7_Msk           (0x80UL)                  /*!< GPIOn PAD_CFG2: BIT7 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG2_BIT8_Pos           (8UL)                     /*!< GPIOn PAD_CFG2: BIT8 (Bit 8)                          */
#define GPIOn_PAD_CFG2_BIT8_Msk           (0x100UL)                 /*!< GPIOn PAD_CFG2: BIT8 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG2_BIT9_Pos           (9UL)                     /*!< GPIOn PAD_CFG2: BIT9 (Bit 9)                          */
#define GPIOn_PAD_CFG2_BIT9_Msk           (0x200UL)                 /*!< GPIOn PAD_CFG2: BIT9 (Bitfield-Mask: 0x01)            */
#define GPIOn_PAD_CFG2_BIT10_Pos          (10UL)                    /*!< GPIOn PAD_CFG2: BIT10 (Bit 10)                        */
#define GPIOn_PAD_CFG2_BIT10_Msk          (0x400UL)                 /*!< GPIOn PAD_CFG2: BIT10 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT11_Pos          (11UL)                    /*!< GPIOn PAD_CFG2: BIT11 (Bit 11)                        */
#define GPIOn_PAD_CFG2_BIT11_Msk          (0x800UL)                 /*!< GPIOn PAD_CFG2: BIT11 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT12_Pos          (12UL)                    /*!< GPIOn PAD_CFG2: BIT12 (Bit 12)                        */
#define GPIOn_PAD_CFG2_BIT12_Msk          (0x1000UL)                /*!< GPIOn PAD_CFG2: BIT12 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT13_Pos          (13UL)                    /*!< GPIOn PAD_CFG2: BIT13 (Bit 13)                        */
#define GPIOn_PAD_CFG2_BIT13_Msk          (0x2000UL)                /*!< GPIOn PAD_CFG2: BIT13 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT14_Pos          (14UL)                    /*!< GPIOn PAD_CFG2: BIT14 (Bit 14)                        */
#define GPIOn_PAD_CFG2_BIT14_Msk          (0x4000UL)                /*!< GPIOn PAD_CFG2: BIT14 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT15_Pos          (15UL)                    /*!< GPIOn PAD_CFG2: BIT15 (Bit 15)                        */
#define GPIOn_PAD_CFG2_BIT15_Msk          (0x8000UL)                /*!< GPIOn PAD_CFG2: BIT15 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT16_Pos          (16UL)                    /*!< GPIOn PAD_CFG2: BIT16 (Bit 16)                        */
#define GPIOn_PAD_CFG2_BIT16_Msk          (0x10000UL)               /*!< GPIOn PAD_CFG2: BIT16 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT17_Pos          (17UL)                    /*!< GPIOn PAD_CFG2: BIT17 (Bit 17)                        */
#define GPIOn_PAD_CFG2_BIT17_Msk          (0x20000UL)               /*!< GPIOn PAD_CFG2: BIT17 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT18_Pos          (18UL)                    /*!< GPIOn PAD_CFG2: BIT18 (Bit 18)                        */
#define GPIOn_PAD_CFG2_BIT18_Msk          (0x40000UL)               /*!< GPIOn PAD_CFG2: BIT18 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT19_Pos          (19UL)                    /*!< GPIOn PAD_CFG2: BIT19 (Bit 19)                        */
#define GPIOn_PAD_CFG2_BIT19_Msk          (0x80000UL)               /*!< GPIOn PAD_CFG2: BIT19 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT20_Pos          (20UL)                    /*!< GPIOn PAD_CFG2: BIT20 (Bit 20)                        */
#define GPIOn_PAD_CFG2_BIT20_Msk          (0x100000UL)              /*!< GPIOn PAD_CFG2: BIT20 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT21_Pos          (21UL)                    /*!< GPIOn PAD_CFG2: BIT21 (Bit 21)                        */
#define GPIOn_PAD_CFG2_BIT21_Msk          (0x200000UL)              /*!< GPIOn PAD_CFG2: BIT21 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT22_Pos          (22UL)                    /*!< GPIOn PAD_CFG2: BIT22 (Bit 22)                        */
#define GPIOn_PAD_CFG2_BIT22_Msk          (0x400000UL)              /*!< GPIOn PAD_CFG2: BIT22 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT23_Pos          (23UL)                    /*!< GPIOn PAD_CFG2: BIT23 (Bit 23)                        */
#define GPIOn_PAD_CFG2_BIT23_Msk          (0x800000UL)              /*!< GPIOn PAD_CFG2: BIT23 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT24_Pos          (24UL)                    /*!< GPIOn PAD_CFG2: BIT24 (Bit 24)                        */
#define GPIOn_PAD_CFG2_BIT24_Msk          (0x1000000UL)             /*!< GPIOn PAD_CFG2: BIT24 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT25_Pos          (25UL)                    /*!< GPIOn PAD_CFG2: BIT25 (Bit 25)                        */
#define GPIOn_PAD_CFG2_BIT25_Msk          (0x2000000UL)             /*!< GPIOn PAD_CFG2: BIT25 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT26_Pos          (26UL)                    /*!< GPIOn PAD_CFG2: BIT26 (Bit 26)                        */
#define GPIOn_PAD_CFG2_BIT26_Msk          (0x4000000UL)             /*!< GPIOn PAD_CFG2: BIT26 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT27_Pos          (27UL)                    /*!< GPIOn PAD_CFG2: BIT27 (Bit 27)                        */
#define GPIOn_PAD_CFG2_BIT27_Msk          (0x8000000UL)             /*!< GPIOn PAD_CFG2: BIT27 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT28_Pos          (28UL)                    /*!< GPIOn PAD_CFG2: BIT28 (Bit 28)                        */
#define GPIOn_PAD_CFG2_BIT28_Msk          (0x10000000UL)            /*!< GPIOn PAD_CFG2: BIT28 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT29_Pos          (29UL)                    /*!< GPIOn PAD_CFG2: BIT29 (Bit 29)                        */
#define GPIOn_PAD_CFG2_BIT29_Msk          (0x20000000UL)            /*!< GPIOn PAD_CFG2: BIT29 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT30_Pos          (30UL)                    /*!< GPIOn PAD_CFG2: BIT30 (Bit 30)                        */
#define GPIOn_PAD_CFG2_BIT30_Msk          (0x40000000UL)            /*!< GPIOn PAD_CFG2: BIT30 (Bitfield-Mask: 0x01)           */
#define GPIOn_PAD_CFG2_BIT31_Pos          (31UL)                    /*!< GPIOn PAD_CFG2: BIT31 (Bit 31)                        */
#define GPIOn_PAD_CFG2_BIT31_Msk          (0x80000000UL)            /*!< GPIOn PAD_CFG2: BIT31 (Bitfield-Mask: 0x01)           */
/* ==========================================================  EN1  ========================================================== */
#define GPIOn_EN1_BIT0_Pos                (0UL)                     /*!< GPIOn EN1: BIT0 (Bit 0)                               */
#define GPIOn_EN1_BIT0_Msk                (0x1UL)                   /*!< GPIOn EN1: BIT0 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN1_BIT1_Pos                (1UL)                     /*!< GPIOn EN1: BIT1 (Bit 1)                               */
#define GPIOn_EN1_BIT1_Msk                (0x2UL)                   /*!< GPIOn EN1: BIT1 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN1_BIT2_Pos                (2UL)                     /*!< GPIOn EN1: BIT2 (Bit 2)                               */
#define GPIOn_EN1_BIT2_Msk                (0x4UL)                   /*!< GPIOn EN1: BIT2 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN1_BIT3_Pos                (3UL)                     /*!< GPIOn EN1: BIT3 (Bit 3)                               */
#define GPIOn_EN1_BIT3_Msk                (0x8UL)                   /*!< GPIOn EN1: BIT3 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN1_BIT4_Pos                (4UL)                     /*!< GPIOn EN1: BIT4 (Bit 4)                               */
#define GPIOn_EN1_BIT4_Msk                (0x10UL)                  /*!< GPIOn EN1: BIT4 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN1_BIT5_Pos                (5UL)                     /*!< GPIOn EN1: BIT5 (Bit 5)                               */
#define GPIOn_EN1_BIT5_Msk                (0x20UL)                  /*!< GPIOn EN1: BIT5 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN1_BIT6_Pos                (6UL)                     /*!< GPIOn EN1: BIT6 (Bit 6)                               */
#define GPIOn_EN1_BIT6_Msk                (0x40UL)                  /*!< GPIOn EN1: BIT6 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN1_BIT7_Pos                (7UL)                     /*!< GPIOn EN1: BIT7 (Bit 7)                               */
#define GPIOn_EN1_BIT7_Msk                (0x80UL)                  /*!< GPIOn EN1: BIT7 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN1_BIT8_Pos                (8UL)                     /*!< GPIOn EN1: BIT8 (Bit 8)                               */
#define GPIOn_EN1_BIT8_Msk                (0x100UL)                 /*!< GPIOn EN1: BIT8 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN1_BIT9_Pos                (9UL)                     /*!< GPIOn EN1: BIT9 (Bit 9)                               */
#define GPIOn_EN1_BIT9_Msk                (0x200UL)                 /*!< GPIOn EN1: BIT9 (Bitfield-Mask: 0x01)                 */
#define GPIOn_EN1_BIT10_Pos               (10UL)                    /*!< GPIOn EN1: BIT10 (Bit 10)                             */
#define GPIOn_EN1_BIT10_Msk               (0x400UL)                 /*!< GPIOn EN1: BIT10 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT11_Pos               (11UL)                    /*!< GPIOn EN1: BIT11 (Bit 11)                             */
#define GPIOn_EN1_BIT11_Msk               (0x800UL)                 /*!< GPIOn EN1: BIT11 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT12_Pos               (12UL)                    /*!< GPIOn EN1: BIT12 (Bit 12)                             */
#define GPIOn_EN1_BIT12_Msk               (0x1000UL)                /*!< GPIOn EN1: BIT12 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT13_Pos               (13UL)                    /*!< GPIOn EN1: BIT13 (Bit 13)                             */
#define GPIOn_EN1_BIT13_Msk               (0x2000UL)                /*!< GPIOn EN1: BIT13 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT14_Pos               (14UL)                    /*!< GPIOn EN1: BIT14 (Bit 14)                             */
#define GPIOn_EN1_BIT14_Msk               (0x4000UL)                /*!< GPIOn EN1: BIT14 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT15_Pos               (15UL)                    /*!< GPIOn EN1: BIT15 (Bit 15)                             */
#define GPIOn_EN1_BIT15_Msk               (0x8000UL)                /*!< GPIOn EN1: BIT15 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT16_Pos               (16UL)                    /*!< GPIOn EN1: BIT16 (Bit 16)                             */
#define GPIOn_EN1_BIT16_Msk               (0x10000UL)               /*!< GPIOn EN1: BIT16 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT17_Pos               (17UL)                    /*!< GPIOn EN1: BIT17 (Bit 17)                             */
#define GPIOn_EN1_BIT17_Msk               (0x20000UL)               /*!< GPIOn EN1: BIT17 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT18_Pos               (18UL)                    /*!< GPIOn EN1: BIT18 (Bit 18)                             */
#define GPIOn_EN1_BIT18_Msk               (0x40000UL)               /*!< GPIOn EN1: BIT18 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT19_Pos               (19UL)                    /*!< GPIOn EN1: BIT19 (Bit 19)                             */
#define GPIOn_EN1_BIT19_Msk               (0x80000UL)               /*!< GPIOn EN1: BIT19 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT20_Pos               (20UL)                    /*!< GPIOn EN1: BIT20 (Bit 20)                             */
#define GPIOn_EN1_BIT20_Msk               (0x100000UL)              /*!< GPIOn EN1: BIT20 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT21_Pos               (21UL)                    /*!< GPIOn EN1: BIT21 (Bit 21)                             */
#define GPIOn_EN1_BIT21_Msk               (0x200000UL)              /*!< GPIOn EN1: BIT21 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT22_Pos               (22UL)                    /*!< GPIOn EN1: BIT22 (Bit 22)                             */
#define GPIOn_EN1_BIT22_Msk               (0x400000UL)              /*!< GPIOn EN1: BIT22 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT23_Pos               (23UL)                    /*!< GPIOn EN1: BIT23 (Bit 23)                             */
#define GPIOn_EN1_BIT23_Msk               (0x800000UL)              /*!< GPIOn EN1: BIT23 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT24_Pos               (24UL)                    /*!< GPIOn EN1: BIT24 (Bit 24)                             */
#define GPIOn_EN1_BIT24_Msk               (0x1000000UL)             /*!< GPIOn EN1: BIT24 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT25_Pos               (25UL)                    /*!< GPIOn EN1: BIT25 (Bit 25)                             */
#define GPIOn_EN1_BIT25_Msk               (0x2000000UL)             /*!< GPIOn EN1: BIT25 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT26_Pos               (26UL)                    /*!< GPIOn EN1: BIT26 (Bit 26)                             */
#define GPIOn_EN1_BIT26_Msk               (0x4000000UL)             /*!< GPIOn EN1: BIT26 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT27_Pos               (27UL)                    /*!< GPIOn EN1: BIT27 (Bit 27)                             */
#define GPIOn_EN1_BIT27_Msk               (0x8000000UL)             /*!< GPIOn EN1: BIT27 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT28_Pos               (28UL)                    /*!< GPIOn EN1: BIT28 (Bit 28)                             */
#define GPIOn_EN1_BIT28_Msk               (0x10000000UL)            /*!< GPIOn EN1: BIT28 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT29_Pos               (29UL)                    /*!< GPIOn EN1: BIT29 (Bit 29)                             */
#define GPIOn_EN1_BIT29_Msk               (0x20000000UL)            /*!< GPIOn EN1: BIT29 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT30_Pos               (30UL)                    /*!< GPIOn EN1: BIT30 (Bit 30)                             */
#define GPIOn_EN1_BIT30_Msk               (0x40000000UL)            /*!< GPIOn EN1: BIT30 (Bitfield-Mask: 0x01)                */
#define GPIOn_EN1_BIT31_Pos               (31UL)                    /*!< GPIOn EN1: BIT31 (Bit 31)                             */
#define GPIOn_EN1_BIT31_Msk               (0x80000000UL)            /*!< GPIOn EN1: BIT31 (Bitfield-Mask: 0x01)                */
/* ==========================================================  DS  =========================================================== */
#define GPIOn_DS_BIT0_Pos                 (0UL)                     /*!< GPIOn DS: BIT0 (Bit 0)                                */
#define GPIOn_DS_BIT0_Msk                 (0x1UL)                   /*!< GPIOn DS: BIT0 (Bitfield-Mask: 0x01)                  */
#define GPIOn_DS_BIT1_Pos                 (1UL)                     /*!< GPIOn DS: BIT1 (Bit 1)                                */
#define GPIOn_DS_BIT1_Msk                 (0x2UL)                   /*!< GPIOn DS: BIT1 (Bitfield-Mask: 0x01)                  */
#define GPIOn_DS_BIT2_Pos                 (2UL)                     /*!< GPIOn DS: BIT2 (Bit 2)                                */
#define GPIOn_DS_BIT2_Msk                 (0x4UL)                   /*!< GPIOn DS: BIT2 (Bitfield-Mask: 0x01)                  */
#define GPIOn_DS_BIT3_Pos                 (3UL)                     /*!< GPIOn DS: BIT3 (Bit 3)                                */
#define GPIOn_DS_BIT3_Msk                 (0x8UL)                   /*!< GPIOn DS: BIT3 (Bitfield-Mask: 0x01)                  */
#define GPIOn_DS_BIT4_Pos                 (4UL)                     /*!< GPIOn DS: BIT4 (Bit 4)                                */
#define GPIOn_DS_BIT4_Msk                 (0x10UL)                  /*!< GPIOn DS: BIT4 (Bitfield-Mask: 0x01)                  */
#define GPIOn_DS_BIT5_Pos                 (5UL)                     /*!< GPIOn DS: BIT5 (Bit 5)                                */
#define GPIOn_DS_BIT5_Msk                 (0x20UL)                  /*!< GPIOn DS: BIT5 (Bitfield-Mask: 0x01)                  */
#define GPIOn_DS_BIT6_Pos                 (6UL)                     /*!< GPIOn DS: BIT6 (Bit 6)                                */
#define GPIOn_DS_BIT6_Msk                 (0x40UL)                  /*!< GPIOn DS: BIT6 (Bitfield-Mask: 0x01)                  */
#define GPIOn_DS_BIT7_Pos                 (7UL)                     /*!< GPIOn DS: BIT7 (Bit 7)                                */
#define GPIOn_DS_BIT7_Msk                 (0x80UL)                  /*!< GPIOn DS: BIT7 (Bitfield-Mask: 0x01)                  */
#define GPIOn_DS_BIT8_Pos                 (8UL)                     /*!< GPIOn DS: BIT8 (Bit 8)                                */
#define GPIOn_DS_BIT8_Msk                 (0x100UL)                 /*!< GPIOn DS: BIT8 (Bitfield-Mask: 0x01)                  */
#define GPIOn_DS_BIT9_Pos                 (9UL)                     /*!< GPIOn DS: BIT9 (Bit 9)                                */
#define GPIOn_DS_BIT9_Msk                 (0x200UL)                 /*!< GPIOn DS: BIT9 (Bitfield-Mask: 0x01)                  */
#define GPIOn_DS_BIT10_Pos                (10UL)                    /*!< GPIOn DS: BIT10 (Bit 10)                              */
#define GPIOn_DS_BIT10_Msk                (0x400UL)                 /*!< GPIOn DS: BIT10 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT11_Pos                (11UL)                    /*!< GPIOn DS: BIT11 (Bit 11)                              */
#define GPIOn_DS_BIT11_Msk                (0x800UL)                 /*!< GPIOn DS: BIT11 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT12_Pos                (12UL)                    /*!< GPIOn DS: BIT12 (Bit 12)                              */
#define GPIOn_DS_BIT12_Msk                (0x1000UL)                /*!< GPIOn DS: BIT12 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT13_Pos                (13UL)                    /*!< GPIOn DS: BIT13 (Bit 13)                              */
#define GPIOn_DS_BIT13_Msk                (0x2000UL)                /*!< GPIOn DS: BIT13 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT14_Pos                (14UL)                    /*!< GPIOn DS: BIT14 (Bit 14)                              */
#define GPIOn_DS_BIT14_Msk                (0x4000UL)                /*!< GPIOn DS: BIT14 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT15_Pos                (15UL)                    /*!< GPIOn DS: BIT15 (Bit 15)                              */
#define GPIOn_DS_BIT15_Msk                (0x8000UL)                /*!< GPIOn DS: BIT15 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT16_Pos                (16UL)                    /*!< GPIOn DS: BIT16 (Bit 16)                              */
#define GPIOn_DS_BIT16_Msk                (0x10000UL)               /*!< GPIOn DS: BIT16 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT17_Pos                (17UL)                    /*!< GPIOn DS: BIT17 (Bit 17)                              */
#define GPIOn_DS_BIT17_Msk                (0x20000UL)               /*!< GPIOn DS: BIT17 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT18_Pos                (18UL)                    /*!< GPIOn DS: BIT18 (Bit 18)                              */
#define GPIOn_DS_BIT18_Msk                (0x40000UL)               /*!< GPIOn DS: BIT18 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT19_Pos                (19UL)                    /*!< GPIOn DS: BIT19 (Bit 19)                              */
#define GPIOn_DS_BIT19_Msk                (0x80000UL)               /*!< GPIOn DS: BIT19 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT20_Pos                (20UL)                    /*!< GPIOn DS: BIT20 (Bit 20)                              */
#define GPIOn_DS_BIT20_Msk                (0x100000UL)              /*!< GPIOn DS: BIT20 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT21_Pos                (21UL)                    /*!< GPIOn DS: BIT21 (Bit 21)                              */
#define GPIOn_DS_BIT21_Msk                (0x200000UL)              /*!< GPIOn DS: BIT21 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT22_Pos                (22UL)                    /*!< GPIOn DS: BIT22 (Bit 22)                              */
#define GPIOn_DS_BIT22_Msk                (0x400000UL)              /*!< GPIOn DS: BIT22 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT23_Pos                (23UL)                    /*!< GPIOn DS: BIT23 (Bit 23)                              */
#define GPIOn_DS_BIT23_Msk                (0x800000UL)              /*!< GPIOn DS: BIT23 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT24_Pos                (24UL)                    /*!< GPIOn DS: BIT24 (Bit 24)                              */
#define GPIOn_DS_BIT24_Msk                (0x1000000UL)             /*!< GPIOn DS: BIT24 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT25_Pos                (25UL)                    /*!< GPIOn DS: BIT25 (Bit 25)                              */
#define GPIOn_DS_BIT25_Msk                (0x2000000UL)             /*!< GPIOn DS: BIT25 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT26_Pos                (26UL)                    /*!< GPIOn DS: BIT26 (Bit 26)                              */
#define GPIOn_DS_BIT26_Msk                (0x4000000UL)             /*!< GPIOn DS: BIT26 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT27_Pos                (27UL)                    /*!< GPIOn DS: BIT27 (Bit 27)                              */
#define GPIOn_DS_BIT27_Msk                (0x8000000UL)             /*!< GPIOn DS: BIT27 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT28_Pos                (28UL)                    /*!< GPIOn DS: BIT28 (Bit 28)                              */
#define GPIOn_DS_BIT28_Msk                (0x10000000UL)            /*!< GPIOn DS: BIT28 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT29_Pos                (29UL)                    /*!< GPIOn DS: BIT29 (Bit 29)                              */
#define GPIOn_DS_BIT29_Msk                (0x20000000UL)            /*!< GPIOn DS: BIT29 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT30_Pos                (30UL)                    /*!< GPIOn DS: BIT30 (Bit 30)                              */
#define GPIOn_DS_BIT30_Msk                (0x40000000UL)            /*!< GPIOn DS: BIT30 (Bitfield-Mask: 0x01)                 */
#define GPIOn_DS_BIT31_Pos                (31UL)                    /*!< GPIOn DS: BIT31 (Bit 31)                              */
#define GPIOn_DS_BIT31_Msk                (0x80000000UL)            /*!< GPIOn DS: BIT31 (Bitfield-Mask: 0x01)                 */


/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CN  =========================================================== */
#define ADC_CN_ADEN_Pos                   (0UL)                     /*!< ADC CN: ADEN (Bit 0)                                  */
#define ADC_CN_ADEN_Msk                   (0x1UL)                   /*!< ADC CN: ADEN (Bitfield-Mask: 0x01)                    */
#define ADC_CN_ADDAIE_Pos                 (1UL)                     /*!< ADC CN: ADDAIE (Bit 1)                                */
#define ADC_CN_ADDAIE_Msk                 (0x2UL)                   /*!< ADC CN: ADDAIE (Bitfield-Mask: 0x01)                  */
#define ADC_CN_ADALGN_Pos                 (2UL)                     /*!< ADC CN: ADALGN (Bit 2)                                */
#define ADC_CN_ADALGN_Msk                 (0x4UL)                   /*!< ADC CN: ADALGN (Bitfield-Mask: 0x01)                  */
#define ADC_CN_ADCH_Pos                   (3UL)                     /*!< ADC CN: ADCH (Bit 3)                                  */
#define ADC_CN_ADCH_Msk                   (0x18UL)                  /*!< ADC CN: ADCH (Bitfield-Mask: 0x03)                    */
#define ADC_CN_ADSCL_Pos                  (5UL)                     /*!< ADC CN: ADSCL (Bit 5)                                 */
#define ADC_CN_ADSCL_Msk                  (0x20UL)                  /*!< ADC CN: ADSCL (Bitfield-Mask: 0x01)                   */
#define ADC_CN_ADREF_Pos                  (6UL)                     /*!< ADC CN: ADREF (Bit 6)                                 */
#define ADC_CN_ADREF_Msk                  (0x40UL)                  /*!< ADC CN: ADREF (Bitfield-Mask: 0x01)                   */
#define ADC_CN_IREFEN_Pos                 (7UL)                     /*!< ADC CN: IREFEN (Bit 7)                                */
#define ADC_CN_IREFEN_Msk                 (0x80UL)                  /*!< ADC CN: IREFEN (Bitfield-Mask: 0x01)                  */
#define ADC_CN_ADCCLK_Pos                 (8UL)                     /*!< ADC CN: ADCCLK (Bit 8)                                */
#define ADC_CN_ADCCLK_Msk                 (0x300UL)                 /*!< ADC CN: ADCCLK (Bitfield-Mask: 0x03)                  */
#define ADC_CN_ADLTIE_Pos                 (10UL)                    /*!< ADC CN: ADLTIE (Bit 10)                               */
#define ADC_CN_ADLTIE_Msk                 (0x400UL)                 /*!< ADC CN: ADLTIE (Bitfield-Mask: 0x01)                  */
#define ADC_CN_ADHTIE_Pos                 (11UL)                    /*!< ADC CN: ADHTIE (Bit 11)                               */
#define ADC_CN_ADHTIE_Msk                 (0x800UL)                 /*!< ADC CN: ADHTIE (Bitfield-Mask: 0x01)                  */
#define ADC_CN_TSEN_Pos                   (12UL)                    /*!< ADC CN: TSEN (Bit 12)                                 */
#define ADC_CN_TSEN_Msk                   (0x1000UL)                /*!< ADC CN: TSEN (Bitfield-Mask: 0x01)                    */
#define ADC_CN_ADOVFDIS_Pos               (15UL)                    /*!< ADC CN: ADOVFDIS (Bit 15)                             */
#define ADC_CN_ADOVFDIS_Msk               (0x8000UL)                /*!< ADC CN: ADOVFDIS (Bitfield-Mask: 0x01)                */
/* ==========================================================  ST  =========================================================== */
#define ADC_ST_ADCONV_Pos                 (0UL)                     /*!< ADC ST: ADCONV (Bit 0)                                */
#define ADC_ST_ADCONV_Msk                 (0x1UL)                   /*!< ADC ST: ADCONV (Bitfield-Mask: 0x01)                  */
#define ADC_ST_ADDAI_Pos                  (1UL)                     /*!< ADC ST: ADDAI (Bit 1)                                 */
#define ADC_ST_ADDAI_Msk                  (0x2UL)                   /*!< ADC ST: ADDAI (Bitfield-Mask: 0x01)                   */
#define ADC_ST_ADOVF_Pos                  (2UL)                     /*!< ADC ST: ADOVF (Bit 2)                                 */
#define ADC_ST_ADOVF_Msk                  (0x4UL)                   /*!< ADC ST: ADOVF (Bitfield-Mask: 0x01)                   */
#define ADC_ST_ADLTIF_Pos                 (3UL)                     /*!< ADC ST: ADLTIF (Bit 3)                                */
#define ADC_ST_ADLTIF_Msk                 (0x8UL)                   /*!< ADC ST: ADLTIF (Bitfield-Mask: 0x01)                  */
#define ADC_ST_ADHTIF_Pos                 (4UL)                     /*!< ADC ST: ADHTIF (Bit 4)                                */
#define ADC_ST_ADHTIF_Msk                 (0x10UL)                  /*!< ADC ST: ADHTIF (Bitfield-Mask: 0x01)                  */
/* =========================================================  DATA  ========================================================== */
#define ADC_DATA_DATA_Pos                 (0UL)                     /*!< ADC DATA: DATA (Bit 0)                                */
#define ADC_DATA_DATA_Msk                 (0xffffUL)                /*!< ADC DATA: DATA (Bitfield-Mask: 0xffff)                */
/* ==========================================================  LT  =========================================================== */
#define ADC_LT_ADLT_Pos                   (0UL)                     /*!< ADC LT: ADLT (Bit 0)                                  */
#define ADC_LT_ADLT_Msk                   (0x3ffUL)                 /*!< ADC LT: ADLT (Bitfield-Mask: 0x3ff)                   */
/* ==========================================================  HT  =========================================================== */
#define ADC_HT_ADHT_Pos                   (0UL)                     /*!< ADC HT: ADHT (Bit 0)                                  */
#define ADC_HT_ADHT_Msk                   (0x3ffUL)                 /*!< ADC HT: ADHT (Bitfield-Mask: 0x3ff)                   */


/* =========================================================================================================================== */
/* ================                                          CRYPTO                                           ================ */
/* =========================================================================================================================== */

/* ======================================================  CRYPTO_CTRL  ====================================================== */
#define CRYPTO_CRYPTO_CTRL_RST_Pos        (0UL)                     /*!< CRYPTO CRYPTO_CTRL: RST (Bit 0)                       */
#define CRYPTO_CRYPTO_CTRL_RST_Msk        (0x1UL)                   /*!< CRYPTO CRYPTO_CTRL: RST (Bitfield-Mask: 0x01)         */
#define CRYPTO_CRYPTO_CTRL_INT_Pos        (1UL)                     /*!< CRYPTO CRYPTO_CTRL: INT (Bit 1)                       */
#define CRYPTO_CRYPTO_CTRL_INT_Msk        (0x2UL)                   /*!< CRYPTO CRYPTO_CTRL: INT (Bitfield-Mask: 0x01)         */
#define CRYPTO_CRYPTO_CTRL_SRC_Pos        (2UL)                     /*!< CRYPTO CRYPTO_CTRL: SRC (Bit 2)                       */
#define CRYPTO_CRYPTO_CTRL_SRC_Msk        (0x4UL)                   /*!< CRYPTO CRYPTO_CTRL: SRC (Bitfield-Mask: 0x01)         */
#define CRYPTO_CRYPTO_CTRL_BSO_Pos        (4UL)                     /*!< CRYPTO CRYPTO_CTRL: BSO (Bit 4)                       */
#define CRYPTO_CRYPTO_CTRL_BSO_Msk        (0x10UL)                  /*!< CRYPTO CRYPTO_CTRL: BSO (Bitfield-Mask: 0x01)         */
#define CRYPTO_CRYPTO_CTRL_BSI_Pos        (5UL)                     /*!< CRYPTO CRYPTO_CTRL: BSI (Bit 5)                       */
#define CRYPTO_CRYPTO_CTRL_BSI_Msk        (0x20UL)                  /*!< CRYPTO CRYPTO_CTRL: BSI (Bitfield-Mask: 0x01)         */
#define CRYPTO_CRYPTO_CTRL_WAIT_EN_Pos    (6UL)                     /*!< CRYPTO CRYPTO_CTRL: WAIT_EN (Bit 6)                   */
#define CRYPTO_CRYPTO_CTRL_WAIT_EN_Msk    (0x40UL)                  /*!< CRYPTO CRYPTO_CTRL: WAIT_EN (Bitfield-Mask: 0x01)     */
#define CRYPTO_CRYPTO_CTRL_WAIT_POL_Pos   (7UL)                     /*!< CRYPTO CRYPTO_CTRL: WAIT_POL (Bit 7)                  */
#define CRYPTO_CRYPTO_CTRL_WAIT_POL_Msk   (0x80UL)                  /*!< CRYPTO CRYPTO_CTRL: WAIT_POL (Bitfield-Mask: 0x01)    */
#define CRYPTO_CRYPTO_CTRL_WRSRC_Pos      (8UL)                     /*!< CRYPTO CRYPTO_CTRL: WRSRC (Bit 8)                     */
#define CRYPTO_CRYPTO_CTRL_WRSRC_Msk      (0x300UL)                 /*!< CRYPTO CRYPTO_CTRL: WRSRC (Bitfield-Mask: 0x03)       */
#define CRYPTO_CRYPTO_CTRL_RDSRC_Pos      (10UL)                    /*!< CRYPTO CRYPTO_CTRL: RDSRC (Bit 10)                    */
#define CRYPTO_CRYPTO_CTRL_RDSRC_Msk      (0xc00UL)                 /*!< CRYPTO CRYPTO_CTRL: RDSRC (Bitfield-Mask: 0x03)       */
#define CRYPTO_CRYPTO_CTRL_DMA_DONE_Pos   (24UL)                    /*!< CRYPTO CRYPTO_CTRL: DMA_DONE (Bit 24)                 */
#define CRYPTO_CRYPTO_CTRL_DMA_DONE_Msk   (0x1000000UL)             /*!< CRYPTO CRYPTO_CTRL: DMA_DONE (Bitfield-Mask: 0x01)    */
#define CRYPTO_CRYPTO_CTRL_GLS_DONE_Pos   (25UL)                    /*!< CRYPTO CRYPTO_CTRL: GLS_DONE (Bit 25)                 */
#define CRYPTO_CRYPTO_CTRL_GLS_DONE_Msk   (0x2000000UL)             /*!< CRYPTO CRYPTO_CTRL: GLS_DONE (Bitfield-Mask: 0x01)    */
#define CRYPTO_CRYPTO_CTRL_HSH_DONE_Pos   (26UL)                    /*!< CRYPTO CRYPTO_CTRL: HSH_DONE (Bit 26)                 */
#define CRYPTO_CRYPTO_CTRL_HSH_DONE_Msk   (0x4000000UL)             /*!< CRYPTO CRYPTO_CTRL: HSH_DONE (Bitfield-Mask: 0x01)    */
#define CRYPTO_CRYPTO_CTRL_CPH_DONE_Pos   (27UL)                    /*!< CRYPTO CRYPTO_CTRL: CPH_DONE (Bit 27)                 */
#define CRYPTO_CRYPTO_CTRL_CPH_DONE_Msk   (0x8000000UL)             /*!< CRYPTO CRYPTO_CTRL: CPH_DONE (Bitfield-Mask: 0x01)    */
#define CRYPTO_CRYPTO_CTRL_MAA_DONE_Pos   (28UL)                    /*!< CRYPTO CRYPTO_CTRL: MAA_DONE (Bit 28)                 */
#define CRYPTO_CRYPTO_CTRL_MAA_DONE_Msk   (0x10000000UL)            /*!< CRYPTO CRYPTO_CTRL: MAA_DONE (Bitfield-Mask: 0x01)    */
#define CRYPTO_CRYPTO_CTRL_ERR_Pos        (29UL)                    /*!< CRYPTO CRYPTO_CTRL: ERR (Bit 29)                      */
#define CRYPTO_CRYPTO_CTRL_ERR_Msk        (0x20000000UL)            /*!< CRYPTO CRYPTO_CTRL: ERR (Bitfield-Mask: 0x01)         */
#define CRYPTO_CRYPTO_CTRL_RDY_Pos        (30UL)                    /*!< CRYPTO CRYPTO_CTRL: RDY (Bit 30)                      */
#define CRYPTO_CRYPTO_CTRL_RDY_Msk        (0x40000000UL)            /*!< CRYPTO CRYPTO_CTRL: RDY (Bitfield-Mask: 0x01)         */
#define CRYPTO_CRYPTO_CTRL_DONE_Pos       (31UL)                    /*!< CRYPTO CRYPTO_CTRL: DONE (Bit 31)                     */
#define CRYPTO_CRYPTO_CTRL_DONE_Msk       (0x80000000UL)            /*!< CRYPTO CRYPTO_CTRL: DONE (Bitfield-Mask: 0x01)        */
/* ======================================================  CIPHER_CTRL  ====================================================== */
#define CRYPTO_CIPHER_CTRL_ENC_Pos        (0UL)                     /*!< CRYPTO CIPHER_CTRL: ENC (Bit 0)                       */
#define CRYPTO_CIPHER_CTRL_ENC_Msk        (0x1UL)                   /*!< CRYPTO CIPHER_CTRL: ENC (Bitfield-Mask: 0x01)         */
#define CRYPTO_CIPHER_CTRL_KEY_Pos        (1UL)                     /*!< CRYPTO CIPHER_CTRL: KEY (Bit 1)                       */
#define CRYPTO_CIPHER_CTRL_KEY_Msk        (0x2UL)                   /*!< CRYPTO CIPHER_CTRL: KEY (Bitfield-Mask: 0x01)         */
#define CRYPTO_CIPHER_CTRL_SRC_Pos        (3UL)                     /*!< CRYPTO CIPHER_CTRL: SRC (Bit 3)                       */
#define CRYPTO_CIPHER_CTRL_SRC_Msk        (0x8UL)                   /*!< CRYPTO CIPHER_CTRL: SRC (Bitfield-Mask: 0x01)         */
#define CRYPTO_CIPHER_CTRL_CIPHER_Pos     (4UL)                     /*!< CRYPTO CIPHER_CTRL: CIPHER (Bit 4)                    */
#define CRYPTO_CIPHER_CTRL_CIPHER_Msk     (0x70UL)                  /*!< CRYPTO CIPHER_CTRL: CIPHER (Bitfield-Mask: 0x07)      */
#define CRYPTO_CIPHER_CTRL_MODE_Pos       (8UL)                     /*!< CRYPTO CIPHER_CTRL: MODE (Bit 8)                      */
#define CRYPTO_CIPHER_CTRL_MODE_Msk       (0x700UL)                 /*!< CRYPTO CIPHER_CTRL: MODE (Bitfield-Mask: 0x07)        */
/* =======================================================  HASH_CTRL  ======================================================= */
#define CRYPTO_HASH_CTRL_INIT_Pos         (0UL)                     /*!< CRYPTO HASH_CTRL: INIT (Bit 0)                        */
#define CRYPTO_HASH_CTRL_INIT_Msk         (0x1UL)                   /*!< CRYPTO HASH_CTRL: INIT (Bitfield-Mask: 0x01)          */
#define CRYPTO_HASH_CTRL_XOR_Pos          (1UL)                     /*!< CRYPTO HASH_CTRL: XOR (Bit 1)                         */
#define CRYPTO_HASH_CTRL_XOR_Msk          (0x2UL)                   /*!< CRYPTO HASH_CTRL: XOR (Bitfield-Mask: 0x01)           */
#define CRYPTO_HASH_CTRL_HASH_Pos         (2UL)                     /*!< CRYPTO HASH_CTRL: HASH (Bit 2)                        */
#define CRYPTO_HASH_CTRL_HASH_Msk         (0x1cUL)                  /*!< CRYPTO HASH_CTRL: HASH (Bitfield-Mask: 0x07)          */
#define CRYPTO_HASH_CTRL_LAST_Pos         (5UL)                     /*!< CRYPTO HASH_CTRL: LAST (Bit 5)                        */
#define CRYPTO_HASH_CTRL_LAST_Msk         (0x20UL)                  /*!< CRYPTO HASH_CTRL: LAST (Bitfield-Mask: 0x01)          */
/* =======================================================  CRC_CTRL  ======================================================== */
#define CRYPTO_CRC_CTRL_CRC_Pos           (0UL)                     /*!< CRYPTO CRC_CTRL: CRC (Bit 0)                          */
#define CRYPTO_CRC_CTRL_CRC_Msk           (0x1UL)                   /*!< CRYPTO CRC_CTRL: CRC (Bitfield-Mask: 0x01)            */
#define CRYPTO_CRC_CTRL_MSB_Pos           (1UL)                     /*!< CRYPTO CRC_CTRL: MSB (Bit 1)                          */
#define CRYPTO_CRC_CTRL_MSB_Msk           (0x2UL)                   /*!< CRYPTO CRC_CTRL: MSB (Bitfield-Mask: 0x01)            */
#define CRYPTO_CRC_CTRL_PRNG_Pos          (2UL)                     /*!< CRYPTO CRC_CTRL: PRNG (Bit 2)                         */
#define CRYPTO_CRC_CTRL_PRNG_Msk          (0x4UL)                   /*!< CRYPTO CRC_CTRL: PRNG (Bitfield-Mask: 0x01)           */
#define CRYPTO_CRC_CTRL_ENT_Pos           (3UL)                     /*!< CRYPTO CRC_CTRL: ENT (Bit 3)                          */
#define CRYPTO_CRC_CTRL_ENT_Msk           (0x8UL)                   /*!< CRYPTO CRC_CTRL: ENT (Bitfield-Mask: 0x01)            */
#define CRYPTO_CRC_CTRL_HAM_Pos           (4UL)                     /*!< CRYPTO CRC_CTRL: HAM (Bit 4)                          */
#define CRYPTO_CRC_CTRL_HAM_Msk           (0x10UL)                  /*!< CRYPTO CRC_CTRL: HAM (Bitfield-Mask: 0x01)            */
#define CRYPTO_CRC_CTRL_HRST_Pos          (5UL)                     /*!< CRYPTO CRC_CTRL: HRST (Bit 5)                         */
#define CRYPTO_CRC_CTRL_HRST_Msk          (0x20UL)                  /*!< CRYPTO CRC_CTRL: HRST (Bitfield-Mask: 0x01)           */
/* ========================================================  DMA_SRC  ======================================================== */
/* =======================================================  DMA_DEST  ======================================================== */
/* ========================================================  DMA_CNT  ======================================================== */
/* =======================================================  MAA_CTRL  ======================================================== */
#define CRYPTO_MAA_CTRL_STC_Pos           (0UL)                     /*!< CRYPTO MAA_CTRL: STC (Bit 0)                          */
#define CRYPTO_MAA_CTRL_STC_Msk           (0x1UL)                   /*!< CRYPTO MAA_CTRL: STC (Bitfield-Mask: 0x01)            */
#define CRYPTO_MAA_CTRL_CLC_Pos           (1UL)                     /*!< CRYPTO MAA_CTRL: CLC (Bit 1)                          */
#define CRYPTO_MAA_CTRL_CLC_Msk           (0xeUL)                   /*!< CRYPTO MAA_CTRL: CLC (Bitfield-Mask: 0x07)            */
#define CRYPTO_MAA_CTRL_OCALC_Pos         (4UL)                     /*!< CRYPTO MAA_CTRL: OCALC (Bit 4)                        */
#define CRYPTO_MAA_CTRL_OCALC_Msk         (0x10UL)                  /*!< CRYPTO MAA_CTRL: OCALC (Bitfield-Mask: 0x01)          */
#define CRYPTO_MAA_CTRL_MAAER_Pos         (7UL)                     /*!< CRYPTO MAA_CTRL: MAAER (Bit 7)                        */
#define CRYPTO_MAA_CTRL_MAAER_Msk         (0x80UL)                  /*!< CRYPTO MAA_CTRL: MAAER (Bitfield-Mask: 0x01)          */
#define CRYPTO_MAA_CTRL_AMS_Pos           (8UL)                     /*!< CRYPTO MAA_CTRL: AMS (Bit 8)                          */
#define CRYPTO_MAA_CTRL_AMS_Msk           (0x300UL)                 /*!< CRYPTO MAA_CTRL: AMS (Bitfield-Mask: 0x03)            */
#define CRYPTO_MAA_CTRL_BMS_Pos           (10UL)                    /*!< CRYPTO MAA_CTRL: BMS (Bit 10)                         */
#define CRYPTO_MAA_CTRL_BMS_Msk           (0xc00UL)                 /*!< CRYPTO MAA_CTRL: BMS (Bitfield-Mask: 0x03)            */
#define CRYPTO_MAA_CTRL_EMS_Pos           (12UL)                    /*!< CRYPTO MAA_CTRL: EMS (Bit 12)                         */
#define CRYPTO_MAA_CTRL_EMS_Msk           (0x3000UL)                /*!< CRYPTO MAA_CTRL: EMS (Bitfield-Mask: 0x03)            */
#define CRYPTO_MAA_CTRL_MMS_Pos           (14UL)                    /*!< CRYPTO MAA_CTRL: MMS (Bit 14)                         */
#define CRYPTO_MAA_CTRL_MMS_Msk           (0xc000UL)                /*!< CRYPTO MAA_CTRL: MMS (Bitfield-Mask: 0x03)            */
#define CRYPTO_MAA_CTRL_AMA_Pos           (16UL)                    /*!< CRYPTO MAA_CTRL: AMA (Bit 16)                         */
#define CRYPTO_MAA_CTRL_AMA_Msk           (0xf0000UL)               /*!< CRYPTO MAA_CTRL: AMA (Bitfield-Mask: 0x0f)            */
#define CRYPTO_MAA_CTRL_BMA_Pos           (20UL)                    /*!< CRYPTO MAA_CTRL: BMA (Bit 20)                         */
#define CRYPTO_MAA_CTRL_BMA_Msk           (0xf00000UL)              /*!< CRYPTO MAA_CTRL: BMA (Bitfield-Mask: 0x0f)            */
#define CRYPTO_MAA_CTRL_RMA_Pos           (24UL)                    /*!< CRYPTO MAA_CTRL: RMA (Bit 24)                         */
#define CRYPTO_MAA_CTRL_RMA_Msk           (0xf000000UL)             /*!< CRYPTO MAA_CTRL: RMA (Bitfield-Mask: 0x0f)            */
#define CRYPTO_MAA_CTRL_TMA_Pos           (28UL)                    /*!< CRYPTO MAA_CTRL: TMA (Bit 28)                         */
#define CRYPTO_MAA_CTRL_TMA_Msk           (0xf0000000UL)            /*!< CRYPTO MAA_CTRL: TMA (Bitfield-Mask: 0x0f)            */
/* ======================================================  CRYPTO_DIN_  ====================================================== */
/* =====================================================  CRYPTO_DOUT_  ====================================================== */
/* =======================================================  CRC_POLY  ======================================================== */
/* ========================================================  CRC_VAL  ======================================================== */
/* =======================================================  CRC_PRNG  ======================================================== */
/* ========================================================  HAM_ECC  ======================================================== */
#define CRYPTO_HAM_ECC_ECC_Pos            (0UL)                     /*!< CRYPTO HAM_ECC: ECC (Bit 0)                           */
#define CRYPTO_HAM_ECC_ECC_Msk            (0xffffUL)                /*!< CRYPTO HAM_ECC: ECC (Bitfield-Mask: 0xffff)           */
#define CRYPTO_HAM_ECC_PAR_Pos            (16UL)                    /*!< CRYPTO HAM_ECC: PAR (Bit 16)                          */
#define CRYPTO_HAM_ECC_PAR_Msk            (0x10000UL)               /*!< CRYPTO HAM_ECC: PAR (Bitfield-Mask: 0x01)             */
/* =====================================================  CIPHER_INIT_  ====================================================== */
/* ======================================================  CIPHER_KEY_  ====================================================== */
/* =====================================================  HASH_DIGEST_  ====================================================== */
/* =====================================================  HASH_MSG_SZ_  ====================================================== */
/* =======================================================  MAA_MAWS  ======================================================== */
#define CRYPTO_MAA_MAWS_MAWS_Pos          (0UL)                     /*!< CRYPTO MAA_MAWS: MAWS (Bit 0)                         */
#define CRYPTO_MAA_MAWS_MAWS_Msk          (0xfffUL)                 /*!< CRYPTO MAA_MAWS: MAWS (Bitfield-Mask: 0xfff)          */


/* =========================================================================================================================== */
/* ================                                            DAC                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define DAC_CTRL_DACFAECNT_Pos            (0UL)                     /*!< DAC CTRL: DACFAECNT (Bit 0)                           */
#define DAC_CTRL_DACFAECNT_Msk            (0xfUL)                   /*!< DAC CTRL: DACFAECNT (Bitfield-Mask: 0x0f)             */
#define DAC_CTRL_DACFAF_Pos               (5UL)                     /*!< DAC CTRL: DACFAF (Bit 5)                              */
#define DAC_CTRL_DACFAF_Msk               (0x20UL)                  /*!< DAC CTRL: DACFAF (Bitfield-Mask: 0x01)                */
#define DAC_CTRL_DACFE_Pos                (6UL)                     /*!< DAC CTRL: DACFE (Bit 6)                               */
#define DAC_CTRL_DACFE_Msk                (0x40UL)                  /*!< DAC CTRL: DACFE (Bitfield-Mask: 0x01)                 */
#define DAC_CTRL_DACFAE_Pos               (7UL)                     /*!< DAC CTRL: DACFAE (Bit 7)                              */
#define DAC_CTRL_DACFAE_Msk               (0x80UL)                  /*!< DAC CTRL: DACFAE (Bitfield-Mask: 0x01)                */
#define DAC_CTRL_DACINTERPMODE_Pos        (8UL)                     /*!< DAC CTRL: DACINTERPMODE (Bit 8)                       */
#define DAC_CTRL_DACINTERPMODE_Msk        (0x700UL)                 /*!< DAC CTRL: DACINTERPMODE (Bitfield-Mask: 0x07)         */
#define DAC_CTRL_DACFFCNT_Pos             (12UL)                    /*!< DAC CTRL: DACFFCNT (Bit 12)                           */
#define DAC_CTRL_DACFFCNT_Msk             (0xf000UL)                /*!< DAC CTRL: DACFFCNT (Bitfield-Mask: 0x0f)              */
#define DAC_CTRL_DACSTMODE_Pos            (16UL)                    /*!< DAC CTRL: DACSTMODE (Bit 16)                          */
#define DAC_CTRL_DACSTMODE_Msk            (0x30000UL)               /*!< DAC CTRL: DACSTMODE (Bitfield-Mask: 0x03)             */
#define DAC_CTRL_CPUDACST_Pos             (20UL)                    /*!< DAC CTRL: CPUDACST (Bit 20)                           */
#define DAC_CTRL_CPUDACST_Msk             (0x100000UL)              /*!< DAC CTRL: CPUDACST (Bitfield-Mask: 0x01)              */
#define DAC_CTRL_DACMODE_Pos              (24UL)                    /*!< DAC CTRL: DACMODE (Bit 24)                            */
#define DAC_CTRL_DACMODE_Msk              (0x3000000UL)             /*!< DAC CTRL: DACMODE (Bitfield-Mask: 0x03)               */
#define DAC_CTRL_DACPU_Pos                (28UL)                    /*!< DAC CTRL: DACPU (Bit 28)                              */
#define DAC_CTRL_DACPU_Msk                (0x10000000UL)            /*!< DAC CTRL: DACPU (Bitfield-Mask: 0x01)                 */
#define DAC_CTRL_DACCLKEN_Pos             (29UL)                    /*!< DAC CTRL: DACCLKEN (Bit 29)                           */
#define DAC_CTRL_DACCLKEN_Msk             (0x20000000UL)            /*!< DAC CTRL: DACCLKEN (Bitfield-Mask: 0x01)              */
#define DAC_CTRL_DACRST_Pos               (31UL)                    /*!< DAC CTRL: DACRST (Bit 31)                             */
#define DAC_CTRL_DACRST_Msk               (0x80000000UL)            /*!< DAC CTRL: DACRST (Bitfield-Mask: 0x01)                */
/* =========================================================  RATE  ========================================================== */
#define DAC_RATE_DACRATECNT_Pos           (0UL)                     /*!< DAC RATE: DACRATECNT (Bit 0)                          */
#define DAC_RATE_DACRATECNT_Msk           (0xffffUL)                /*!< DAC RATE: DACRATECNT (Bitfield-Mask: 0xffff)          */
#define DAC_RATE_DACSAMPLECNT_Pos         (16UL)                    /*!< DAC RATE: DACSAMPLECNT (Bit 16)                       */
#define DAC_RATE_DACSAMPLECNT_Msk         (0xffff0000UL)            /*!< DAC RATE: DACSAMPLECNT (Bitfield-Mask: 0xffff)        */
/* ==========================================================  INT  ========================================================== */
#define DAC_INT_DACDONEISR_Pos            (0UL)                     /*!< DAC INT: DACDONEISR (Bit 0)                           */
#define DAC_INT_DACDONEISR_Msk            (0x1UL)                   /*!< DAC INT: DACDONEISR (Bitfield-Mask: 0x01)             */
#define DAC_INT_DACFUFISR_Pos             (1UL)                     /*!< DAC INT: DACFUFISR (Bit 1)                            */
#define DAC_INT_DACFUFISR_Msk             (0x2UL)                   /*!< DAC INT: DACFUFISR (Bitfield-Mask: 0x01)              */
#define DAC_INT_DACFAEISR_Pos             (2UL)                     /*!< DAC INT: DACFAEISR (Bit 2)                            */
#define DAC_INT_DACFAEISR_Msk             (0x4UL)                   /*!< DAC INT: DACFAEISR (Bitfield-Mask: 0x01)              */
#define DAC_INT_DACFUFST_Pos              (3UL)                     /*!< DAC INT: DACFUFST (Bit 3)                             */
#define DAC_INT_DACFUFST_Msk              (0x8UL)                   /*!< DAC INT: DACFUFST (Bitfield-Mask: 0x01)               */
#define DAC_INT_DACDONEIE_Pos             (16UL)                    /*!< DAC INT: DACDONEIE (Bit 16)                           */
#define DAC_INT_DACDONEIE_Msk             (0x10000UL)               /*!< DAC INT: DACDONEIE (Bitfield-Mask: 0x01)              */
#define DAC_INT_DACFUFIE_Pos              (17UL)                    /*!< DAC INT: DACFUFIE (Bit 17)                            */
#define DAC_INT_DACFUFIE_Msk              (0x20000UL)               /*!< DAC INT: DACFUFIE (Bitfield-Mask: 0x01)               */
#define DAC_INT_DACFAEIE_Pos              (18UL)                    /*!< DAC INT: DACFAEIE (Bit 18)                            */
#define DAC_INT_DACFAEIE_Msk              (0x40000UL)               /*!< DAC INT: DACFAEIE (Bitfield-Mask: 0x01)               */

/* =========================================================================================================================== */
/* ================                                         DAC_FIFO                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  REG  ========================================================== */
#define DAC_FIFO_REG_DATA_Pos             (0UL)                     /*!< DAC_FIFO REG: DATA (Bit 0)                            */
#define DAC_FIFO_REG_DATA_Msk             (0xffUL)                  /*!< DAC_FIFO REG: DATA (Bitfield-Mask: 0xff)              */


/* =========================================================================================================================== */
/* ================                                           DMAC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CN  =========================================================== */
#define DMAC_CN_CH0_IEN_Pos               (0UL)                     /*!< DMAC CN: CH0_IEN (Bit 0)                              */
#define DMAC_CN_CH0_IEN_Msk               (0x1UL)                   /*!< DMAC CN: CH0_IEN (Bitfield-Mask: 0x01)                */
#define DMAC_CN_CH1_IEN_Pos               (1UL)                     /*!< DMAC CN: CH1_IEN (Bit 1)                              */
#define DMAC_CN_CH1_IEN_Msk               (0x2UL)                   /*!< DMAC CN: CH1_IEN (Bitfield-Mask: 0x01)                */
#define DMAC_CN_CH2_IEN_Pos               (2UL)                     /*!< DMAC CN: CH2_IEN (Bit 2)                              */
#define DMAC_CN_CH2_IEN_Msk               (0x4UL)                   /*!< DMAC CN: CH2_IEN (Bitfield-Mask: 0x01)                */
#define DMAC_CN_CH3_IEN_Pos               (3UL)                     /*!< DMAC CN: CH3_IEN (Bit 3)                              */
#define DMAC_CN_CH3_IEN_Msk               (0x8UL)                   /*!< DMAC CN: CH3_IEN (Bitfield-Mask: 0x01)                */
/* ==========================================================  INT  ========================================================== */
#define DMAC_INT_CH0_IPEND_Pos            (0UL)                     /*!< DMAC INT: CH0_IPEND (Bit 0)                           */
#define DMAC_INT_CH0_IPEND_Msk            (0x1UL)                   /*!< DMAC INT: CH0_IPEND (Bitfield-Mask: 0x01)             */
#define DMAC_INT_CH1_IPEND_Pos            (1UL)                     /*!< DMAC INT: CH1_IPEND (Bit 1)                           */
#define DMAC_INT_CH1_IPEND_Msk            (0x2UL)                   /*!< DMAC INT: CH1_IPEND (Bitfield-Mask: 0x01)             */
#define DMAC_INT_CH2_IPEND_Pos            (2UL)                     /*!< DMAC INT: CH2_IPEND (Bit 2)                           */
#define DMAC_INT_CH2_IPEND_Msk            (0x4UL)                   /*!< DMAC INT: CH2_IPEND (Bitfield-Mask: 0x01)             */
#define DMAC_INT_CH3_IPEND_Pos            (3UL)                     /*!< DMAC INT: CH3_IPEND (Bit 3)                           */
#define DMAC_INT_CH3_IPEND_Msk            (0x8UL)                   /*!< DMAC INT: CH3_IPEND (Bitfield-Mask: 0x01)             */
/* ========================================================  DMA_CFG  ======================================================== */
#define DMAn_CFG_CHEN_Pos             (0UL)                     /*!< DMAC DMA_CFG: CHEN (Bit 0)                            */
#define DMAn_CFG_CHEN_Msk             (0x1UL)                   /*!< DMAC DMA_CFG: CHEN (Bitfield-Mask: 0x01)              */
#define DMAn_CFG_RLDEN_Pos            (1UL)                     /*!< DMAC DMA_CFG: RLDEN (Bit 1)                           */
#define DMAn_CFG_RLDEN_Msk            (0x2UL)                   /*!< DMAC DMA_CFG: RLDEN (Bitfield-Mask: 0x01)             */
#define DMAn_CFG_PRI_Pos              (2UL)                     /*!< DMAC DMA_CFG: PRI (Bit 2)                             */
#define DMAn_CFG_PRI_Msk              (0xcUL)                   /*!< DMAC DMA_CFG: PRI (Bitfield-Mask: 0x03)               */
#define DMAn_CFG_REQSEL_Pos           (4UL)                     /*!< DMAC DMA_CFG: REQSEL (Bit 4)                          */
#define DMAn_CFG_REQSEL_Msk           (0x3f0UL)                 /*!< DMAC DMA_CFG: REQSEL (Bitfield-Mask: 0x3f)            */
#define DMAn_CFG_REQWAIT_Pos          (10UL)                    /*!< DMAC DMA_CFG: REQWAIT (Bit 10)                        */
#define DMAn_CFG_REQWAIT_Msk          (0x400UL)                 /*!< DMAC DMA_CFG: REQWAIT (Bitfield-Mask: 0x01)           */
#define DMAn_CFG_TOSEL_Pos            (11UL)                    /*!< DMAC DMA_CFG: TOSEL (Bit 11)                          */
#define DMAn_CFG_TOSEL_Msk            (0x3800UL)                /*!< DMAC DMA_CFG: TOSEL (Bitfield-Mask: 0x07)             */
#define DMAn_CFG_PSSEL_Pos            (14UL)                    /*!< DMAC DMA_CFG: PSSEL (Bit 14)                          */
#define DMAn_CFG_PSSEL_Msk            (0xc000UL)                /*!< DMAC DMA_CFG: PSSEL (Bitfield-Mask: 0x03)             */
#define DMAn_CFG_SRCWD_Pos            (16UL)                    /*!< DMAC DMA_CFG: SRCWD (Bit 16)                          */
#define DMAn_CFG_SRCWD_Msk            (0x30000UL)               /*!< DMAC DMA_CFG: SRCWD (Bitfield-Mask: 0x03)             */
#define DMAn_CFG_SRCINC_Pos           (18UL)                    /*!< DMAC DMA_CFG: SRCINC (Bit 18)                         */
#define DMAn_CFG_SRCINC_Msk           (0x40000UL)               /*!< DMAC DMA_CFG: SRCINC (Bitfield-Mask: 0x01)            */
#define DMAn_CFG_DSTWD_Pos            (20UL)                    /*!< DMAC DMA_CFG: DSTWD (Bit 20)                          */
#define DMAn_CFG_DSTWD_Msk            (0x300000UL)              /*!< DMAC DMA_CFG: DSTWD (Bitfield-Mask: 0x03)             */
#define DMAn_CFG_DSTINC_Pos           (22UL)                    /*!< DMAC DMA_CFG: DSTINC (Bit 22)                         */
#define DMAn_CFG_DSTINC_Msk           (0x400000UL)              /*!< DMAC DMA_CFG: DSTINC (Bitfield-Mask: 0x01)            */
#define DMAn_CFG_BRST_Pos             (24UL)                    /*!< DMAC DMA_CFG: BRST (Bit 24)                           */
#define DMAn_CFG_BRST_Msk             (0x1f000000UL)            /*!< DMAC DMA_CFG: BRST (Bitfield-Mask: 0x1f)              */
#define DMAn_CFG_CHDIEN_Pos           (30UL)                    /*!< DMAC DMA_CFG: CHDIEN (Bit 30)                         */
#define DMAn_CFG_CHDIEN_Msk           (0x40000000UL)            /*!< DMAC DMA_CFG: CHDIEN (Bitfield-Mask: 0x01)            */
#define DMAn_CFG_CTZIEN_Pos           (31UL)                    /*!< DMAC DMA_CFG: CTZIEN (Bit 31)                         */
#define DMAn_CFG_CTZIEN_Msk           (0x80000000UL)            /*!< DMAC DMA_CFG: CTZIEN (Bitfield-Mask: 0x01)            */
/* ========================================================  DMA_ST  ========================================================= */
#define DMAn_ST_CH_ST_Pos             (0UL)                     /*!< DMAC DMA_ST: CH_ST (Bit 0)                            */
#define DMAn_ST_CH_ST_Msk             (0x1UL)                   /*!< DMAC DMA_ST: CH_ST (Bitfield-Mask: 0x01)              */
#define DMAn_ST_IPEND_Pos             (1UL)                     /*!< DMAC DMA_ST: IPEND (Bit 1)                            */
#define DMAn_ST_IPEND_Msk             (0x2UL)                   /*!< DMAC DMA_ST: IPEND (Bitfield-Mask: 0x01)              */
#define DMAn_ST_CTZ_ST_Pos            (2UL)                     /*!< DMAC DMA_ST: CTZ_ST (Bit 2)                           */
#define DMAn_ST_CTZ_ST_Msk            (0x4UL)                   /*!< DMAC DMA_ST: CTZ_ST (Bitfield-Mask: 0x01)             */
#define DMAn_ST_RLD_ST_Pos            (3UL)                     /*!< DMAC DMA_ST: RLD_ST (Bit 3)                           */
#define DMAn_ST_RLD_ST_Msk            (0x8UL)                   /*!< DMAC DMA_ST: RLD_ST (Bitfield-Mask: 0x01)             */
#define DMAn_ST_BUS_ERR_Pos           (4UL)                     /*!< DMAC DMA_ST: BUS_ERR (Bit 4)                          */
#define DMAn_ST_BUS_ERR_Msk           (0x10UL)                  /*!< DMAC DMA_ST: BUS_ERR (Bitfield-Mask: 0x01)            */
#define DMAn_ST_TO_ST_Pos             (6UL)                     /*!< DMAC DMA_ST: TO_ST (Bit 6)                            */
#define DMAn_ST_TO_ST_Msk             (0x40UL)                  /*!< DMAC DMA_ST: TO_ST (Bitfield-Mask: 0x01)              */
/* ========================================================  DMA_SRC  ======================================================== */
/* ========================================================  DMA_DST  ======================================================== */
/* ========================================================  DMA_CNT  ======================================================== */
#define DMAn_CNT_CNT_Pos              (0UL)                     /*!< DMAC DMA_CNT: CNT (Bit 0)                             */
#define DMAn_CNT_CNT_Msk              (0xffffffUL)              /*!< DMAC DMA_CNT: CNT (Bitfield-Mask: 0xffffff)           */
/* ======================================================  DMA_SRC_RLD  ====================================================== */
#define DMAn_SRC_RLD_SRC_RLD_Pos      (0UL)                     /*!< DMAC DMA_SRC_RLD: SRC_RLD (Bit 0)                     */
#define DMAn_SRC_RLD_SRC_RLD_Msk      (0x7fffffffUL)            /*!< DMAC DMA_SRC_RLD: SRC_RLD (Bitfield-Mask: 0x7fffffff) */
/* ======================================================  DMA_DST_RLD  ====================================================== */
#define DMAn_DST_RLD_DST_RLD_Pos      (0UL)                     /*!< DMAC DMA_DST_RLD: DST_RLD (Bit 0)                     */
#define DMAn_DST_RLD_DST_RLD_Msk      (0x7fffffffUL)            /*!< DMAC DMA_DST_RLD: DST_RLD (Bitfield-Mask: 0x7fffffff) */
/* ======================================================  DMA_CNT_RLD  ====================================================== */
#define DMAn_CNT_RLD_CNT_RLD_Pos      (0UL)                     /*!< DMAC DMA_CNT_RLD: CNT_RLD (Bit 0)                     */
#define DMAn_CNT_RLD_CNT_RLD_Msk      (0xffffffUL)              /*!< DMAC DMA_CNT_RLD: CNT_RLD (Bitfield-Mask: 0xffffff)   */
#define DMAn_CNT_RLD_RLDEN_Pos        (31UL)                    /*!< DMAC DMA_CNT_RLD: RLDEN (Bit 31)                      */
#define DMAn_CNT_RLD_RLDEN_Msk        (0x80000000UL)            /*!< DMAC DMA_CNT_RLD: RLDEN (Bitfield-Mask: 0x01)         */


/* =========================================================================================================================== */
/* ================                                            FC                                             ================ */
/* =========================================================================================================================== */

/* =======================================================  FLSH_ADDR  ======================================================= */
/* ======================================================  FLSH_CLKDIV  ====================================================== */
#define FC_FLSH_CLKDIV_CLKDIV_Pos         (0UL)                     /*!< FC FLSH_CLKDIV: CLKDIV (Bit 0)                        */
#define FC_FLSH_CLKDIV_CLKDIV_Msk         (0xffUL)                  /*!< FC FLSH_CLKDIV: CLKDIV (Bitfield-Mask: 0xff)          */
/* ========================================================  FLSH_CN  ======================================================== */
#define FC_FLSH_CN_WR_Pos                 (0UL)                     /*!< FC FLSH_CN: WR (Bit 0)                                */
#define FC_FLSH_CN_WR_Msk                 (0x1UL)                   /*!< FC FLSH_CN: WR (Bitfield-Mask: 0x01)                  */
#define FC_FLSH_CN_ME_Pos                 (1UL)                     /*!< FC FLSH_CN: ME (Bit 1)                                */
#define FC_FLSH_CN_ME_Msk                 (0x2UL)                   /*!< FC FLSH_CN: ME (Bitfield-Mask: 0x01)                  */
#define FC_FLSH_CN_PGE_Pos                (2UL)                     /*!< FC FLSH_CN: PGE (Bit 2)                               */
#define FC_FLSH_CN_PGE_Msk                (0x4UL)                   /*!< FC FLSH_CN: PGE (Bitfield-Mask: 0x01)                 */
#define FC_FLSH_CN_WDTH_Pos               (4UL)                     /*!< FC FLSH_CN: WDTH (Bit 4)                              */
#define FC_FLSH_CN_WDTH_Msk               (0x10UL)                  /*!< FC FLSH_CN: WDTH (Bitfield-Mask: 0x01)                */
#define FC_FLSH_CN_ERASE_CODE_Pos         (8UL)                     /*!< FC FLSH_CN: ERASE_CODE (Bit 8)                        */
#define FC_FLSH_CN_ERASE_CODE_Msk         (0xff00UL)                /*!< FC FLSH_CN: ERASE_CODE (Bitfield-Mask: 0xff)          */
#define FC_FLSH_CN_PEND_Pos               (24UL)                    /*!< FC FLSH_CN: PEND (Bit 24)                             */
#define FC_FLSH_CN_PEND_Msk               (0x1000000UL)             /*!< FC FLSH_CN: PEND (Bitfield-Mask: 0x01)                */
#define FC_FLSH_CN_PREBOOT_Pos            (26UL)                    /*!< FC FLSH_CN: PREBOOT (Bit 26)                          */
#define FC_FLSH_CN_PREBOOT_Msk            (0x4000000UL)             /*!< FC FLSH_CN: PREBOOT (Bitfield-Mask: 0x01)             */
#define FC_FLSH_CN_BRST_Pos               (27UL)                    /*!< FC FLSH_CN: BRST (Bit 27)                             */
#define FC_FLSH_CN_BRST_Msk               (0x8000000UL)             /*!< FC FLSH_CN: BRST (Bitfield-Mask: 0x01)                */
#define FC_FLSH_CN_UNLOCK_Pos             (28UL)                    /*!< FC FLSH_CN: UNLOCK (Bit 28)                           */
#define FC_FLSH_CN_UNLOCK_Msk             (0xf0000000UL)            /*!< FC FLSH_CN: UNLOCK (Bitfield-Mask: 0x0f)              */
/* =======================================================  FLSH_INT  ======================================================== */
#define FC_FLSH_INT_DONE_Pos              (0UL)                     /*!< FC FLSH_INT: DONE (Bit 0)                             */
#define FC_FLSH_INT_DONE_Msk              (0x1UL)                   /*!< FC FLSH_INT: DONE (Bitfield-Mask: 0x01)               */
#define FC_FLSH_INT_AF_Pos                (1UL)                     /*!< FC FLSH_INT: AF (Bit 1)                               */
#define FC_FLSH_INT_AF_Msk                (0x2UL)                   /*!< FC FLSH_INT: AF (Bitfield-Mask: 0x01)                 */
#define FC_FLSH_INT_DONEIE_Pos            (8UL)                     /*!< FC FLSH_INT: DONEIE (Bit 8)                           */
#define FC_FLSH_INT_DONEIE_Msk            (0x100UL)                 /*!< FC FLSH_INT: DONEIE (Bitfield-Mask: 0x01)             */
#define FC_FLSH_INT_AFIE_Pos              (9UL)                     /*!< FC FLSH_INT: AFIE (Bit 9)                             */
#define FC_FLSH_INT_AFIE_Msk              (0x200UL)                 /*!< FC FLSH_INT: AFIE (Bitfield-Mask: 0x01)               */
/* =======================================================  FLSH_DATA  ======================================================= */
/* ======================================================  FLSH_ACNTL  ======================================================= */


/* =========================================================================================================================== */
/* ================                                            I2C                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define I2C_CR_RXTHD_Pos                  (0UL)                     /*!< I2C CR: RXTHD (Bit 0)                                 */
#define I2C_CR_RXTHD_Msk                  (0xfUL)                   /*!< I2C CR: RXTHD (Bitfield-Mask: 0x0f)                   */
#define I2C_CR_AUTOSTT_Pos                (4UL)                     /*!< I2C CR: AUTOSTT (Bit 4)                               */
#define I2C_CR_AUTOSTT_Msk                (0x10UL)                  /*!< I2C CR: AUTOSTT (Bitfield-Mask: 0x01)                 */
#define I2C_CR_START_Pos                  (5UL)                     /*!< I2C CR: START (Bit 5)                                 */
#define I2C_CR_START_Msk                  (0x20UL)                  /*!< I2C CR: START (Bitfield-Mask: 0x01)                   */
#define I2C_CR_RESTART_Pos                (6UL)                     /*!< I2C CR: RESTART (Bit 6)                               */
#define I2C_CR_RESTART_Msk                (0x40UL)                  /*!< I2C CR: RESTART (Bitfield-Mask: 0x01)                 */
#define I2C_CR_STOP_Pos                   (7UL)                     /*!< I2C CR: STOP (Bit 7)                                  */
#define I2C_CR_STOP_Msk                   (0x80UL)                  /*!< I2C CR: STOP (Bitfield-Mask: 0x01)                    */
#define I2C_CR_TXFLUSH_Pos                (8UL)                     /*!< I2C CR: TXFLUSH (Bit 8)                               */
#define I2C_CR_TXFLUSH_Msk                (0x100UL)                 /*!< I2C CR: TXFLUSH (Bitfield-Mask: 0x01)                 */
#define I2C_CR_RXFLUSH_Pos                (9UL)                     /*!< I2C CR: RXFLUSH (Bit 9)                               */
#define I2C_CR_RXFLUSH_Msk                (0x200UL)                 /*!< I2C CR: RXFLUSH (Bitfield-Mask: 0x01)                 */
#define I2C_CR_AFREAD_Pos                 (10UL)                    /*!< I2C CR: AFREAD (Bit 10)                               */
#define I2C_CR_AFREAD_Msk                 (0x400UL)                 /*!< I2C CR: AFREAD (Bitfield-Mask: 0x01)                  */
#define I2C_CR_FREEZE_Pos                 (11UL)                    /*!< I2C CR: FREEZE (Bit 11)                               */
#define I2C_CR_FREEZE_Msk                 (0x800UL)                 /*!< I2C CR: FREEZE (Bitfield-Mask: 0x01)                  */
/* ==========================================================  SR  =========================================================== */
#define I2C_SR_BUSY_Pos                   (0UL)                     /*!< I2C SR: BUSY (Bit 0)                                  */
#define I2C_SR_BUSY_Msk                   (0x1UL)                   /*!< I2C SR: BUSY (Bitfield-Mask: 0x01)                    */
#define I2C_SR_FROZEN_Pos                 (1UL)                     /*!< I2C SR: FROZEN (Bit 1)                                */
#define I2C_SR_FROZEN_Msk                 (0x2UL)                   /*!< I2C SR: FROZEN (Bitfield-Mask: 0x01)                  */
#define I2C_SR_RXEMPTY_Pos                (4UL)                     /*!< I2C SR: RXEMPTY (Bit 4)                               */
#define I2C_SR_RXEMPTY_Msk                (0x10UL)                  /*!< I2C SR: RXEMPTY (Bitfield-Mask: 0x01)                 */
#define I2C_SR_RXFULL_Pos                 (5UL)                     /*!< I2C SR: RXFULL (Bit 5)                                */
#define I2C_SR_RXFULL_Msk                 (0x20UL)                  /*!< I2C SR: RXFULL (Bitfield-Mask: 0x01)                  */
#define I2C_SR_TXEMPTY_Pos                (6UL)                     /*!< I2C SR: TXEMPTY (Bit 6)                               */
#define I2C_SR_TXEMPTY_Msk                (0x40UL)                  /*!< I2C SR: TXEMPTY (Bitfield-Mask: 0x01)                 */
#define I2C_SR_TXFULL_Pos                 (7UL)                     /*!< I2C SR: TXFULL (Bit 7)                                */
#define I2C_SR_TXFULL_Msk                 (0x80UL)                  /*!< I2C SR: TXFULL (Bitfield-Mask: 0x01)                  */
#define I2C_SR_RXELT_Pos                  (8UL)                     /*!< I2C SR: RXELT (Bit 8)                                 */
#define I2C_SR_RXELT_Msk                  (0xf00UL)                 /*!< I2C SR: RXELT (Bitfield-Mask: 0x0f)                   */
#define I2C_SR_TXELT_Pos                  (12UL)                    /*!< I2C SR: TXELT (Bit 12)                                */
#define I2C_SR_TXELT_Msk                  (0xf000UL)                /*!< I2C SR: TXELT (Bitfield-Mask: 0x0f)                   */
/* ==========================================================  IER  ========================================================== */
#define I2C_IER_LOSTIE_Pos                (0UL)                     /*!< I2C IER: LOSTIE (Bit 0)                               */
#define I2C_IER_LOSTIE_Msk                (0x1UL)                   /*!< I2C IER: LOSTIE (Bitfield-Mask: 0x01)                 */
#define I2C_IER_NOANSIE_Pos               (1UL)                     /*!< I2C IER: NOANSIE (Bit 1)                              */
#define I2C_IER_NOANSIE_Msk               (0x2UL)                   /*!< I2C IER: NOANSIE (Bitfield-Mask: 0x01)                */
#define I2C_IER_COMENDIE_Pos              (2UL)                     /*!< I2C IER: COMENDIE (Bit 2)                             */
#define I2C_IER_COMENDIE_Msk              (0x4UL)                   /*!< I2C IER: COMENDIE (Bitfield-Mask: 0x01)               */
#define I2C_IER_RDYRDIE_Pos               (3UL)                     /*!< I2C IER: RDYRDIE (Bit 3)                              */
#define I2C_IER_RDYRDIE_Msk               (0x8UL)                   /*!< I2C IER: RDYRDIE (Bitfield-Mask: 0x01)                */
#define I2C_IER_FFRXIE_Pos                (4UL)                     /*!< I2C IER: FFRXIE (Bit 4)                               */
#define I2C_IER_FFRXIE_Msk                (0x10UL)                  /*!< I2C IER: FFRXIE (Bitfield-Mask: 0x01)                 */
#define I2C_IER_FFTXOIE_Pos               (5UL)                     /*!< I2C IER: FFTXOIE (Bit 5)                              */
#define I2C_IER_FFTXOIE_Msk               (0x20UL)                  /*!< I2C IER: FFTXOIE (Bitfield-Mask: 0x01)                */
#define I2C_IER_FFTXHIE_Pos               (6UL)                     /*!< I2C IER: FFTXHIE (Bit 6)                              */
#define I2C_IER_FFTXHIE_Msk               (0x40UL)                  /*!< I2C IER: FFTXHIE (Bitfield-Mask: 0x01)                */
/* ==========================================================  ISR  ========================================================== */
#define I2C_ISR_LOSTIS_Pos                (0UL)                     /*!< I2C ISR: LOSTIS (Bit 0)                               */
#define I2C_ISR_LOSTIS_Msk                (0x1UL)                   /*!< I2C ISR: LOSTIS (Bitfield-Mask: 0x01)                 */
#define I2C_ISR_NOANSIS_Pos               (1UL)                     /*!< I2C ISR: NOANSIS (Bit 1)                              */
#define I2C_ISR_NOANSIS_Msk               (0x2UL)                   /*!< I2C ISR: NOANSIS (Bitfield-Mask: 0x01)                */
#define I2C_ISR_COMENDIS_Pos              (2UL)                     /*!< I2C ISR: COMENDIS (Bit 2)                             */
#define I2C_ISR_COMENDIS_Msk              (0x4UL)                   /*!< I2C ISR: COMENDIS (Bitfield-Mask: 0x01)               */
#define I2C_ISR_RDYRDIS_Pos               (3UL)                     /*!< I2C ISR: RDYRDIS (Bit 3)                              */
#define I2C_ISR_RDYRDIS_Msk               (0x8UL)                   /*!< I2C ISR: RDYRDIS (Bitfield-Mask: 0x01)                */
#define I2C_ISR_FFRXIS_Pos                (4UL)                     /*!< I2C ISR: FFRXIS (Bit 4)                               */
#define I2C_ISR_FFRXIS_Msk                (0x10UL)                  /*!< I2C ISR: FFRXIS (Bitfield-Mask: 0x01)                 */
#define I2C_ISR_FFTXOIS_Pos               (5UL)                     /*!< I2C ISR: FFTXOIS (Bit 5)                              */
#define I2C_ISR_FFTXOIS_Msk               (0x20UL)                  /*!< I2C ISR: FFTXOIS (Bitfield-Mask: 0x01)                */
#define I2C_ISR_FFTXHIS_Pos               (6UL)                     /*!< I2C ISR: FFTXHIS (Bit 6)                              */
#define I2C_ISR_FFTXHIS_Msk               (0x40UL)                  /*!< I2C ISR: FFTXHIS (Bitfield-Mask: 0x01)                */
/* ==========================================================  BRR  ========================================================== */
#define I2C_BRR_DIV_Pos                   (0UL)                     /*!< I2C BRR: DIV (Bit 0)                                  */
#define I2C_BRR_DIV_Msk                   (0x7fUL)                  /*!< I2C BRR: DIV (Bitfield-Mask: 0x7f)                    */
/* ==========================================================  RCR  ========================================================== */
#define I2C_RCR_RXCTN_Pos                 (0UL)                     /*!< I2C RCR: RXCTN (Bit 0)                                */
#define I2C_RCR_RXCTN_Msk                 (0xffffUL)                /*!< I2C RCR: RXCTN (Bitfield-Mask: 0xffff)                */
/* ==========================================================  TXR  ========================================================== */
#define I2C_TXR_DATA_Pos                  (0UL)                     /*!< I2C TXR: DATA (Bit 0)                                 */
#define I2C_TXR_DATA_Msk                  (0xffUL)                  /*!< I2C TXR: DATA (Bitfield-Mask: 0xff)                   */
/* ==========================================================  DR  =========================================================== */
#define I2C_DR_DATA_Pos                   (0UL)                     /*!< I2C DR: DATA (Bit 0)                                  */
#define I2C_DR_DATA_Msk                   (0xffUL)                  /*!< I2C DR: DATA (Bitfield-Mask: 0xff)                    */
/* ==========================================================  DMR  ========================================================== */
#define I2C_DMR_TXCNT_Pos                 (0UL)                     /*!< I2C DMR: TXCNT (Bit 0)                                */
#define I2C_DMR_TXCNT_Msk                 (0xfUL)                   /*!< I2C DMR: TXCNT (Bitfield-Mask: 0x0f)                  */
#define I2C_DMR_TXEN_Pos                  (4UL)                     /*!< I2C DMR: TXEN (Bit 4)                                 */
#define I2C_DMR_TXEN_Msk                  (0x10UL)                  /*!< I2C DMR: TXEN (Bitfield-Mask: 0x01)                   */
#define I2C_DMR_RXCNT_Pos                 (5UL)                     /*!< I2C DMR: RXCNT (Bit 5)                                */
#define I2C_DMR_RXCNT_Msk                 (0x1e0UL)                 /*!< I2C DMR: RXCNT (Bitfield-Mask: 0x0f)                  */
#define I2C_DMR_RXEN_Pos                  (9UL)                     /*!< I2C DMR: RXEN (Bit 9)                                 */
#define I2C_DMR_RXEN_Msk                  (0x200UL)                 /*!< I2C DMR: RXEN (Bitfield-Mask: 0x01)                   */


/* =========================================================================================================================== */
/* ================                                            MSR                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  DSPADDR  ======================================================== */
#define MSR_DSPADDR_ADDR_Pos              (0UL)                     /*!< MSR DSPADDR: ADDR (Bit 0)                             */
#define MSR_DSPADDR_ADDR_Msk              (0xffUL)                  /*!< MSR DSPADDR: ADDR (Bitfield-Mask: 0xff)               */
/* ========================================================  DSPCTRL  ======================================================== */
#define MSR_DSPCTRL_DSPEN_Pos             (0UL)                     /*!< MSR DSPCTRL: DSPEN (Bit 0)                            */
#define MSR_DSPCTRL_DSPEN_Msk             (0x1UL)                   /*!< MSR DSPCTRL: DSPEN (Bitfield-Mask: 0x01)              */
#define MSR_DSPCTRL_DSP_PKDETECT_Pos      (1UL)                     /*!< MSR DSPCTRL: DSP_PKDETECT (Bit 1)                     */
#define MSR_DSPCTRL_DSP_PKDETECT_Msk      (0x2UL)                   /*!< MSR DSPCTRL: DSP_PKDETECT (Bitfield-Mask: 0x01)       */
#define MSR_DSPCTRL_FIFO_INT_EN_Pos       (2UL)                     /*!< MSR DSPCTRL: FIFO_INT_EN (Bit 2)                      */
#define MSR_DSPCTRL_FIFO_INT_EN_Msk       (0x4UL)                   /*!< MSR DSPCTRL: FIFO_INT_EN (Bitfield-Mask: 0x01)        */
#define MSR_DSPCTRL_DSP_INTF_Pos          (4UL)                     /*!< MSR DSPCTRL: DSP_INTF (Bit 4)                         */
#define MSR_DSPCTRL_DSP_INTF_Msk          (0x10UL)                  /*!< MSR DSPCTRL: DSP_INTF (Bitfield-Mask: 0x01)           */
#define MSR_DSPCTRL_T1_INTF_Pos           (5UL)                     /*!< MSR DSPCTRL: T1_INTF (Bit 5)                          */
#define MSR_DSPCTRL_T1_INTF_Msk           (0x20UL)                  /*!< MSR DSPCTRL: T1_INTF (Bitfield-Mask: 0x01)            */
#define MSR_DSPCTRL_T2_INTF_Pos           (6UL)                     /*!< MSR DSPCTRL: T2_INTF (Bit 6)                          */
#define MSR_DSPCTRL_T2_INTF_Msk           (0x40UL)                  /*!< MSR DSPCTRL: T2_INTF (Bitfield-Mask: 0x01)            */
#define MSR_DSPCTRL_T3_INTF_Pos           (7UL)                     /*!< MSR DSPCTRL: T3_INTF (Bit 7)                          */
#define MSR_DSPCTRL_T3_INTF_Msk           (0x80UL)                  /*!< MSR DSPCTRL: T3_INTF (Bitfield-Mask: 0x01)            */
#define MSR_DSPCTRL_DIV_RATIO_Pos         (8UL)                     /*!< MSR DSPCTRL: DIV_RATIO (Bit 8)                        */
#define MSR_DSPCTRL_DIV_RATIO_Msk         (0x7f00UL)                /*!< MSR DSPCTRL: DIV_RATIO (Bitfield-Mask: 0x7f)          */
/* ========================================================  DSPDATA  ======================================================== */
/* =========================================================  TFIFO  ========================================================= */
#define MSR_TFIFO_TnDATA_Pos              (0UL)                     /*!< MSR TFIFO: TnDATA (Bit 0)                             */
#define MSR_TFIFO_TnDATA_Msk              (0xffffUL)                /*!< MSR TFIFO: TnDATA (Bitfield-Mask: 0xffff)             */


/* =========================================================================================================================== */
/* ================                                           MLCD                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CN  =========================================================== */
#define MLCD_CN_TXIE_Pos                  (0UL)                     /*!< MLCD CN: TXIE (Bit 0)                                 */
#define MLCD_CN_TXIE_Msk                  (0x1UL)                   /*!< MLCD CN: TXIE (Bitfield-Mask: 0x01)                   */
#define MLCD_CN_RXIE_Pos                  (1UL)                     /*!< MLCD CN: RXIE (Bit 1)                                 */
#define MLCD_CN_RXIE_Msk                  (0x2UL)                   /*!< MLCD CN: RXIE (Bitfield-Mask: 0x01)                   */
#define MLCD_CN_AE_Pos                    (2UL)                     /*!< MLCD CN: AE (Bit 2)                                   */
#define MLCD_CN_AE_Msk                    (0x4UL)                   /*!< MLCD CN: AE (Bitfield-Mask: 0x01)                     */
#define MLCD_CN_NIBBLE_Pos                (3UL)                     /*!< MLCD CN: NIBBLE (Bit 3)                               */
#define MLCD_CN_NIBBLE_Msk                (0x8UL)                   /*!< MLCD CN: NIBBLE (Bitfield-Mask: 0x01)                 */
#define MLCD_CN_RS_Pos                    (4UL)                     /*!< MLCD CN: RS (Bit 4)                                   */
#define MLCD_CN_RS_Msk                    (0x10UL)                  /*!< MLCD CN: RS (Bitfield-Mask: 0x01)                     */
#define MLCD_CN_RW_Pos                    (5UL)                     /*!< MLCD CN: RW (Bit 5)                                   */
#define MLCD_CN_RW_Msk                    (0x20UL)                  /*!< MLCD CN: RW (Bitfield-Mask: 0x01)                     */
#define MLCD_CN_ENB_Pos                   (6UL)                     /*!< MLCD CN: ENB (Bit 6)                                  */
#define MLCD_CN_ENB_Msk                   (0x40UL)                  /*!< MLCD CN: ENB (Bitfield-Mask: 0x01)                    */
#define MLCD_CN_READ_Pos                  (7UL)                     /*!< MLCD CN: READ (Bit 7)                                 */
#define MLCD_CN_READ_Msk                  (0x80UL)                  /*!< MLCD CN: READ (Bitfield-Mask: 0x01)                   */
/* ==========================================================  EPR  ========================================================== */
#define MLCD_EPR_EP_Pos                   (0UL)                     /*!< MLCD EPR: EP (Bit 0)                                  */
#define MLCD_EPR_EP_Msk                   (0xffUL)                  /*!< MLCD EPR: EP (Bitfield-Mask: 0xff)                    */
/* ==========================================================  SR  =========================================================== */
#define MLCD_SR_TXIS_Pos                  (0UL)                     /*!< MLCD SR: TXIS (Bit 0)                                 */
#define MLCD_SR_TXIS_Msk                  (0x1UL)                   /*!< MLCD SR: TXIS (Bitfield-Mask: 0x01)                   */
#define MLCD_SR_RXIS_Pos                  (1UL)                     /*!< MLCD SR: RXIS (Bit 1)                                 */
#define MLCD_SR_RXIS_Msk                  (0x2UL)                   /*!< MLCD SR: RXIS (Bitfield-Mask: 0x01)                   */
#define MLCD_SR_READY_Pos                 (2UL)                     /*!< MLCD SR: READY (Bit 2)                                */
#define MLCD_SR_READY_Msk                 (0x4UL)                   /*!< MLCD SR: READY (Bitfield-Mask: 0x01)                  */
/* =========================================================  DATA  ========================================================== */
#define MLCD_DATA_DATA_Pos                (0UL)                     /*!< MLCD DATA: DATA (Bit 0)                               */
#define MLCD_DATA_DATA_Msk                (0xffUL)                  /*!< MLCD DATA: DATA (Bitfield-Mask: 0xff)                 */


/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  SEC  ========================================================== */
/* =========================================================  SSEC  ========================================================== */
#define RTC_SSEC_RTSS_Pos                 (0UL)                     /*!< RTC SSEC: RTSS (Bit 0)                                */
#define RTC_SSEC_RTSS_Msk                 (0xffUL)                  /*!< RTC SSEC: RTSS (Bitfield-Mask: 0xff)                  */
/* ==========================================================  RAS  ========================================================== */
#define RTC_RAS_RAS_Pos                   (0UL)                     /*!< RTC RAS: RAS (Bit 0)                                  */
#define RTC_RAS_RAS_Msk                   (0xfffffUL)               /*!< RTC RAS: RAS (Bitfield-Mask: 0xfffff)                 */
/* =========================================================  RSSA  ========================================================== */
#define RTC_RSSA_RSSA_Pos                 (0UL)                     /*!< RTC RSSA: RSSA (Bit 0)                                */
#define RTC_RSSA_RSSA_Msk                 (0xffffUL)                /*!< RTC RSSA: RSSA (Bitfield-Mask: 0xffff)                */
/* ==========================================================  CN  =========================================================== */
#define RTC_CN_RTCE_Pos                   (0UL)                     /*!< RTC CN: RTCE (Bit 0)                                  */
#define RTC_CN_RTCE_Msk                   (0x1UL)                   /*!< RTC CN: RTCE (Bitfield-Mask: 0x01)                    */
#define RTC_CN_ADE_Pos                    (1UL)                     /*!< RTC CN: ADE (Bit 1)                                   */
#define RTC_CN_ADE_Msk                    (0x2UL)                   /*!< RTC CN: ADE (Bitfield-Mask: 0x01)                     */
#define RTC_CN_ASE_Pos                    (2UL)                     /*!< RTC CN: ASE (Bit 2)                                   */
#define RTC_CN_ASE_Msk                    (0x4UL)                   /*!< RTC CN: ASE (Bitfield-Mask: 0x01)                     */
#define RTC_CN_BUSY_Pos                   (3UL)                     /*!< RTC CN: BUSY (Bit 3)                                  */
#define RTC_CN_BUSY_Msk                   (0x8UL)                   /*!< RTC CN: BUSY (Bitfield-Mask: 0x01)                    */
#define RTC_CN_RDY_Pos                    (4UL)                     /*!< RTC CN: RDY (Bit 4)                                   */
#define RTC_CN_RDY_Msk                    (0x10UL)                  /*!< RTC CN: RDY (Bitfield-Mask: 0x01)                     */
#define RTC_CN_RDYE_Pos                   (5UL)                     /*!< RTC CN: RDYE (Bit 5)                                  */
#define RTC_CN_RDYE_Msk                   (0x20UL)                  /*!< RTC CN: RDYE (Bitfield-Mask: 0x01)                    */
#define RTC_CN_ALDF_Pos                   (6UL)                     /*!< RTC CN: ALDF (Bit 6)                                  */
#define RTC_CN_ALDF_Msk                   (0x40UL)                  /*!< RTC CN: ALDF (Bitfield-Mask: 0x01)                    */
#define RTC_CN_ALSF_Pos                   (7UL)                     /*!< RTC CN: ALSF (Bit 7)                                  */
#define RTC_CN_ALSF_Msk                   (0x80UL)                  /*!< RTC CN: ALSF (Bitfield-Mask: 0x01)                    */
#define RTC_CN_SQE_Pos                    (8UL)                     /*!< RTC CN: SQE (Bit 8)                                   */
#define RTC_CN_SQE_Msk                    (0x100UL)                 /*!< RTC CN: SQE (Bitfield-Mask: 0x01)                     */
#define RTC_CN_FT_Pos                     (9UL)                     /*!< RTC CN: FT (Bit 9)                                    */
#define RTC_CN_FT_Msk                     (0x600UL)                 /*!< RTC CN: FT (Bitfield-Mask: 0x03)                      */
#define RTC_CN_X32KMD_Pos                 (11UL)                    /*!< RTC CN: X32KMD (Bit 11)                               */
#define RTC_CN_X32KMD_Msk                 (0x1800UL)                /*!< RTC CN: X32KMD (Bitfield-Mask: 0x03)                  */
#define RTC_CN_WE_Pos                     (15UL)                    /*!< RTC CN: WE (Bit 15)                                   */
#define RTC_CN_WE_Msk                     (0x8000UL)                /*!< RTC CN: WE (Bitfield-Mask: 0x01)                      */
/* =========================================================  TRIM  ========================================================== */
#define RTC_TRIM_TRIM_Pos                 (0UL)                     /*!< RTC TRIM: TRIM (Bit 0)                                */
#define RTC_TRIM_TRIM_Msk                 (0xffUL)                  /*!< RTC TRIM: TRIM (Bitfield-Mask: 0xff)                  */
#define RTC_TRIM_VBATTMR_Pos              (8UL)                     /*!< RTC TRIM: VBATTMR (Bit 8)                             */
#define RTC_TRIM_VBATTMR_Msk              (0xffffff00UL)            /*!< RTC TRIM: VBATTMR (Bitfield-Mask: 0xffffff)           */


/* =========================================================================================================================== */
/* ================                                           SKBD                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR0  ========================================================== */
#define SKBD_CR0_KBDIO_0_Pos              (0UL)                     /*!< SKBD CR0: KBDIO_0 (Bit 0)                             */
#define SKBD_CR0_KBDIO_0_Msk              (0x1UL)                   /*!< SKBD CR0: KBDIO_0 (Bitfield-Mask: 0x01)               */
#define SKBD_CR0_KBDIO_1_Pos              (1UL)                     /*!< SKBD CR0: KBDIO_1 (Bit 1)                             */
#define SKBD_CR0_KBDIO_1_Msk              (0x2UL)                   /*!< SKBD CR0: KBDIO_1 (Bitfield-Mask: 0x01)               */
#define SKBD_CR0_KBDIO_2_Pos              (2UL)                     /*!< SKBD CR0: KBDIO_2 (Bit 2)                             */
#define SKBD_CR0_KBDIO_2_Msk              (0x4UL)                   /*!< SKBD CR0: KBDIO_2 (Bitfield-Mask: 0x01)               */
#define SKBD_CR0_KBDIO_3_Pos              (3UL)                     /*!< SKBD CR0: KBDIO_3 (Bit 3)                             */
#define SKBD_CR0_KBDIO_3_Msk              (0x8UL)                   /*!< SKBD CR0: KBDIO_3 (Bitfield-Mask: 0x01)               */
#define SKBD_CR0_KBDIO_4_Pos              (4UL)                     /*!< SKBD CR0: KBDIO_4 (Bit 4)                             */
#define SKBD_CR0_KBDIO_4_Msk              (0x10UL)                  /*!< SKBD CR0: KBDIO_4 (Bitfield-Mask: 0x01)               */
#define SKBD_CR0_KBDIO_5_Pos              (5UL)                     /*!< SKBD CR0: KBDIO_5 (Bit 5)                             */
#define SKBD_CR0_KBDIO_5_Msk              (0x20UL)                  /*!< SKBD CR0: KBDIO_5 (Bitfield-Mask: 0x01)               */
#define SKBD_CR0_KBDIO_6_Pos              (6UL)                     /*!< SKBD CR0: KBDIO_6 (Bit 6)                             */
#define SKBD_CR0_KBDIO_6_Msk              (0x40UL)                  /*!< SKBD CR0: KBDIO_6 (Bitfield-Mask: 0x01)               */
#define SKBD_CR0_KBDIO_7_Pos              (7UL)                     /*!< SKBD CR0: KBDIO_7 (Bit 7)                             */
#define SKBD_CR0_KBDIO_7_Msk              (0x80UL)                  /*!< SKBD CR0: KBDIO_7 (Bitfield-Mask: 0x01)               */
/* ==========================================================  CR1  ========================================================== */
#define SKBD_CR1_AUTOEN_Pos               (0UL)                     /*!< SKBD CR1: AUTOEN (Bit 0)                              */
#define SKBD_CR1_AUTOEN_Msk               (0x1UL)                   /*!< SKBD CR1: AUTOEN (Bitfield-Mask: 0x01)                */
#define SKBD_CR1_CLEAR_Pos                (1UL)                     /*!< SKBD CR1: CLEAR (Bit 1)                               */
#define SKBD_CR1_CLEAR_Msk                (0x2UL)                   /*!< SKBD CR1: CLEAR (Bitfield-Mask: 0x01)                 */
#define SKBD_CR1_OUTNB_Pos                (8UL)                     /*!< SKBD CR1: OUTNB (Bit 8)                               */
#define SKBD_CR1_OUTNB_Msk                (0x700UL)                 /*!< SKBD CR1: OUTNB (Bitfield-Mask: 0x07)                 */
#define SKBD_CR1_DBTM_Pos                 (13UL)                    /*!< SKBD CR1: DBTM (Bit 13)                               */
#define SKBD_CR1_DBTM_Msk                 (0xe000UL)                /*!< SKBD CR1: DBTM (Bitfield-Mask: 0x07)                  */
/* ==========================================================  SR  =========================================================== */
#define SKBD_SR_BUSY_Pos                  (0UL)                     /*!< SKBD SR: BUSY (Bit 0)                                 */
#define SKBD_SR_BUSY_Msk                  (0x1UL)                   /*!< SKBD SR: BUSY (Bitfield-Mask: 0x01)                   */
/* ==========================================================  IER  ========================================================== */
#define SKBD_IER_PUSHIE_Pos               (0UL)                     /*!< SKBD IER: PUSHIE (Bit 0)                              */
#define SKBD_IER_PUSHIE_Msk               (0x1UL)                   /*!< SKBD IER: PUSHIE (Bitfield-Mask: 0x01)                */
#define SKBD_IER_RELEASEIE_Pos            (1UL)                     /*!< SKBD IER: RELEASEIE (Bit 1)                           */
#define SKBD_IER_RELEASEIE_Msk            (0x2UL)                   /*!< SKBD IER: RELEASEIE (Bitfield-Mask: 0x01)             */
#define SKBD_IER_OVERIE_Pos               (2UL)                     /*!< SKBD IER: OVERIE (Bit 2)                              */
#define SKBD_IER_OVERIE_Msk               (0x4UL)                   /*!< SKBD IER: OVERIE (Bitfield-Mask: 0x01)                */
/* ==========================================================  ISR  ========================================================== */
#define SKBD_ISR_PUSHIS_Pos               (0UL)                     /*!< SKBD ISR: PUSHIS (Bit 0)                              */
#define SKBD_ISR_PUSHIS_Msk               (0x1UL)                   /*!< SKBD ISR: PUSHIS (Bitfield-Mask: 0x01)                */
#define SKBD_ISR_RELEASEIS_Pos            (1UL)                     /*!< SKBD ISR: RELEASEIS (Bit 1)                           */
#define SKBD_ISR_RELEASEIS_Msk            (0x2UL)                   /*!< SKBD ISR: RELEASEIS (Bitfield-Mask: 0x01)             */
#define SKBD_ISR_OVERIS_Pos               (2UL)                     /*!< SKBD ISR: OVERIS (Bit 2)                              */
#define SKBD_ISR_OVERIS_Msk               (0x4UL)                   /*!< SKBD ISR: OVERIS (Bitfield-Mask: 0x01)                */
/* ==========================================================  KR  =========================================================== */
#define SKBD_KR_IOIN_Pos                  (0UL)                     /*!< SKBD KR: IOIN (Bit 0)                                 */
#define SKBD_KR_IOIN_Msk                  (0x7UL)                   /*!< SKBD KR: IOIN (Bitfield-Mask: 0x07)                   */
#define SKBD_KR_IOOUT_Pos                 (5UL)                     /*!< SKBD KR: IOOUT (Bit 5)                                */
#define SKBD_KR_IOOUT_Msk                 (0xe0UL)                  /*!< SKBD KR: IOOUT (Bitfield-Mask: 0x07)                  */
#define SKBD_KR_PUSH_Pos                  (10UL)                    /*!< SKBD KR: PUSH (Bit 10)                                */
#define SKBD_KR_PUSH_Msk                  (0x400UL)                 /*!< SKBD KR: PUSH (Bitfield-Mask: 0x01)                   */
#define SKBD_KR_READ_Pos                  (11UL)                    /*!< SKBD KR: READ (Bit 11)                                */
#define SKBD_KR_READ_Msk                  (0x800UL)                 /*!< SKBD KR: READ (Bitfield-Mask: 0x01)                   */
#define SKBD_KR_NEXT_Pos                  (12UL)                    /*!< SKBD KR: NEXT (Bit 12)                                */
#define SKBD_KR_NEXT_Msk                  (0x1000UL)                /*!< SKBD KR: NEXT (Bitfield-Mask: 0x01)                   */


/* =========================================================================================================================== */
/* ================                                           SMON                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  EXTSCN  ========================================================= */
#define SMON_EXTSCN_EXTS_EN0_Pos          (0UL)                     /*!< SMON EXTSCN: EXTS_EN0 (Bit 0)                         */
#define SMON_EXTSCN_EXTS_EN0_Msk          (0x1UL)                   /*!< SMON EXTSCN: EXTS_EN0 (Bitfield-Mask: 0x01)           */
#define SMON_EXTSCN_EXTS_EN1_Pos          (1UL)                     /*!< SMON EXTSCN: EXTS_EN1 (Bit 1)                         */
#define SMON_EXTSCN_EXTS_EN1_Msk          (0x2UL)                   /*!< SMON EXTSCN: EXTS_EN1 (Bitfield-Mask: 0x01)           */
#define SMON_EXTSCN_EXTS_EN2_Pos          (2UL)                     /*!< SMON EXTSCN: EXTS_EN2 (Bit 2)                         */
#define SMON_EXTSCN_EXTS_EN2_Msk          (0x4UL)                   /*!< SMON EXTSCN: EXTS_EN2 (Bitfield-Mask: 0x01)           */
#define SMON_EXTSCN_EXTS_EN3_Pos          (3UL)                     /*!< SMON EXTSCN: EXTS_EN3 (Bit 3)                         */
#define SMON_EXTSCN_EXTS_EN3_Msk          (0x8UL)                   /*!< SMON EXTSCN: EXTS_EN3 (Bitfield-Mask: 0x01)           */
#define SMON_EXTSCN_EXTS_EN4_Pos          (4UL)                     /*!< SMON EXTSCN: EXTS_EN4 (Bit 4)                         */
#define SMON_EXTSCN_EXTS_EN4_Msk          (0x10UL)                  /*!< SMON EXTSCN: EXTS_EN4 (Bitfield-Mask: 0x01)           */
#define SMON_EXTSCN_EXTS_EN5_Pos          (5UL)                     /*!< SMON EXTSCN: EXTS_EN5 (Bit 5)                         */
#define SMON_EXTSCN_EXTS_EN5_Msk          (0x20UL)                  /*!< SMON EXTSCN: EXTS_EN5 (Bitfield-Mask: 0x01)           */
#define SMON_EXTSCN_EXTCNT_Pos            (16UL)                    /*!< SMON EXTSCN: EXTCNT (Bit 16)                          */
#define SMON_EXTSCN_EXTCNT_Msk            (0x1f0000UL)              /*!< SMON EXTSCN: EXTCNT (Bitfield-Mask: 0x1f)             */
#define SMON_EXTSCN_EXTFRQ_Pos            (21UL)                    /*!< SMON EXTSCN: EXTFRQ (Bit 21)                          */
#define SMON_EXTSCN_EXTFRQ_Msk            (0xe00000UL)              /*!< SMON EXTSCN: EXTFRQ (Bitfield-Mask: 0x07)             */
#define SMON_EXTSCN_DIVCLK_Pos            (24UL)                    /*!< SMON EXTSCN: DIVCLK (Bit 24)                          */
#define SMON_EXTSCN_DIVCLK_Msk            (0x7000000UL)             /*!< SMON EXTSCN: DIVCLK (Bitfield-Mask: 0x07)             */
#define SMON_EXTSCN_BUSY_Pos              (30UL)                    /*!< SMON EXTSCN: BUSY (Bit 30)                            */
#define SMON_EXTSCN_BUSY_Msk              (0x40000000UL)            /*!< SMON EXTSCN: BUSY (Bitfield-Mask: 0x01)               */
#define SMON_EXTSCN_LOCK_Pos              (31UL)                    /*!< SMON EXTSCN: LOCK (Bit 31)                            */
#define SMON_EXTSCN_LOCK_Msk              (0x80000000UL)            /*!< SMON EXTSCN: LOCK (Bitfield-Mask: 0x01)               */
/* ========================================================  INTSCN  ========================================================= */
#define SMON_INTSCN_SHIELD_EN_Pos         (0UL)                     /*!< SMON INTSCN: SHIELD_EN (Bit 0)                        */
#define SMON_INTSCN_SHIELD_EN_Msk         (0x1UL)                   /*!< SMON INTSCN: SHIELD_EN (Bitfield-Mask: 0x01)          */
#define SMON_INTSCN_TEMP_EN_Pos           (1UL)                     /*!< SMON INTSCN: TEMP_EN (Bit 1)                          */
#define SMON_INTSCN_TEMP_EN_Msk           (0x2UL)                   /*!< SMON INTSCN: TEMP_EN (Bitfield-Mask: 0x01)            */
#define SMON_INTSCN_VBAT_EN_Pos           (2UL)                     /*!< SMON INTSCN: VBAT_EN (Bit 2)                          */
#define SMON_INTSCN_VBAT_EN_Msk           (0x4UL)                   /*!< SMON INTSCN: VBAT_EN (Bitfield-Mask: 0x01)            */
#define SMON_INTSCN_LOTEMP_SEL_Pos        (16UL)                    /*!< SMON INTSCN: LOTEMP_SEL (Bit 16)                      */
#define SMON_INTSCN_LOTEMP_SEL_Msk        (0x10000UL)               /*!< SMON INTSCN: LOTEMP_SEL (Bitfield-Mask: 0x01)         */
#define SMON_INTSCN_VCORELOEN_Pos         (18UL)                    /*!< SMON INTSCN: VCORELOEN (Bit 18)                       */
#define SMON_INTSCN_VCORELOEN_Msk         (0x40000UL)               /*!< SMON INTSCN: VCORELOEN (Bitfield-Mask: 0x01)          */
#define SMON_INTSCN_VCOREHIEN_Pos         (19UL)                    /*!< SMON INTSCN: VCOREHIEN (Bit 19)                       */
#define SMON_INTSCN_VCOREHIEN_Msk         (0x80000UL)               /*!< SMON INTSCN: VCOREHIEN (Bitfield-Mask: 0x01)          */
#define SMON_INTSCN_VDDLOEN_Pos           (20UL)                    /*!< SMON INTSCN: VDDLOEN (Bit 20)                         */
#define SMON_INTSCN_VDDLOEN_Msk           (0x100000UL)              /*!< SMON INTSCN: VDDLOEN (Bitfield-Mask: 0x01)            */
#define SMON_INTSCN_VDDHIEN_Pos           (21UL)                    /*!< SMON INTSCN: VDDHIEN (Bit 21)                         */
#define SMON_INTSCN_VDDHIEN_Msk           (0x200000UL)              /*!< SMON INTSCN: VDDHIEN (Bitfield-Mask: 0x01)            */
#define SMON_INTSCN_VGLEN_Pos             (22UL)                    /*!< SMON INTSCN: VGLEN (Bit 22)                           */
#define SMON_INTSCN_VGLEN_Msk             (0x400000UL)              /*!< SMON INTSCN: VGLEN (Bitfield-Mask: 0x01)              */
#define SMON_INTSCN_LOCK_Pos              (31UL)                    /*!< SMON INTSCN: LOCK (Bit 31)                            */
#define SMON_INTSCN_LOCK_Msk              (0x80000000UL)            /*!< SMON INTSCN: LOCK (Bitfield-Mask: 0x01)               */
/* ========================================================  SECALM  ========================================================= */
#define SMON_SECALM_DRS_Pos               (0UL)                     /*!< SMON SECALM: DRS (Bit 0)                              */
#define SMON_SECALM_DRS_Msk               (0x1UL)                   /*!< SMON SECALM: DRS (Bitfield-Mask: 0x01)                */
#define SMON_SECALM_KEYWIPE_Pos           (1UL)                     /*!< SMON SECALM: KEYWIPE (Bit 1)                          */
#define SMON_SECALM_KEYWIPE_Msk           (0x2UL)                   /*!< SMON SECALM: KEYWIPE (Bitfield-Mask: 0x01)            */
#define SMON_SECALM_SHIELDF_Pos           (2UL)                     /*!< SMON SECALM: SHIELDF (Bit 2)                          */
#define SMON_SECALM_SHIELDF_Msk           (0x4UL)                   /*!< SMON SECALM: SHIELDF (Bitfield-Mask: 0x01)            */
#define SMON_SECALM_LOTEMP_Pos            (3UL)                     /*!< SMON SECALM: LOTEMP (Bit 3)                           */
#define SMON_SECALM_LOTEMP_Msk            (0x8UL)                   /*!< SMON SECALM: LOTEMP (Bitfield-Mask: 0x01)             */
#define SMON_SECALM_HITEMP_Pos            (4UL)                     /*!< SMON SECALM: HITEMP (Bit 4)                           */
#define SMON_SECALM_HITEMP_Msk            (0x10UL)                  /*!< SMON SECALM: HITEMP (Bitfield-Mask: 0x01)             */
#define SMON_SECALM_BATLO_Pos             (5UL)                     /*!< SMON SECALM: BATLO (Bit 5)                            */
#define SMON_SECALM_BATLO_Msk             (0x20UL)                  /*!< SMON SECALM: BATLO (Bitfield-Mask: 0x01)              */
#define SMON_SECALM_BATHI_Pos             (6UL)                     /*!< SMON SECALM: BATHI (Bit 6)                            */
#define SMON_SECALM_BATHI_Msk             (0x40UL)                  /*!< SMON SECALM: BATHI (Bitfield-Mask: 0x01)              */
#define SMON_SECALM_EXTF_Pos              (7UL)                     /*!< SMON SECALM: EXTF (Bit 7)                             */
#define SMON_SECALM_EXTF_Msk              (0x80UL)                  /*!< SMON SECALM: EXTF (Bitfield-Mask: 0x01)               */
#define SMON_SECALM_VDDLO_Pos             (8UL)                     /*!< SMON SECALM: VDDLO (Bit 8)                            */
#define SMON_SECALM_VDDLO_Msk             (0x100UL)                 /*!< SMON SECALM: VDDLO (Bitfield-Mask: 0x01)              */
#define SMON_SECALM_VCORELO_Pos           (9UL)                     /*!< SMON SECALM: VCORELO (Bit 9)                          */
#define SMON_SECALM_VCORELO_Msk           (0x200UL)                 /*!< SMON SECALM: VCORELO (Bitfield-Mask: 0x01)            */
#define SMON_SECALM_VCOREHI_Pos           (10UL)                    /*!< SMON SECALM: VCOREHI (Bit 10)                         */
#define SMON_SECALM_VCOREHI_Msk           (0x400UL)                 /*!< SMON SECALM: VCOREHI (Bitfield-Mask: 0x01)            */
#define SMON_SECALM_VDDHI_Pos             (11UL)                    /*!< SMON SECALM: VDDHI (Bit 11)                           */
#define SMON_SECALM_VDDHI_Msk             (0x800UL)                 /*!< SMON SECALM: VDDHI (Bitfield-Mask: 0x01)              */
#define SMON_SECALM_VGL_Pos               (12UL)                    /*!< SMON SECALM: VGL (Bit 12)                             */
#define SMON_SECALM_VGL_Msk               (0x1000UL)                /*!< SMON SECALM: VGL (Bitfield-Mask: 0x01)                */
#define SMON_SECALM_EXTSTAT0_Pos          (16UL)                    /*!< SMON SECALM: EXTSTAT0 (Bit 16)                        */
#define SMON_SECALM_EXTSTAT0_Msk          (0x10000UL)               /*!< SMON SECALM: EXTSTAT0 (Bitfield-Mask: 0x01)           */
#define SMON_SECALM_EXTSTAT1_Pos          (17UL)                    /*!< SMON SECALM: EXTSTAT1 (Bit 17)                        */
#define SMON_SECALM_EXTSTAT1_Msk          (0x20000UL)               /*!< SMON SECALM: EXTSTAT1 (Bitfield-Mask: 0x01)           */
#define SMON_SECALM_EXTSTAT2_Pos          (18UL)                    /*!< SMON SECALM: EXTSTAT2 (Bit 18)                        */
#define SMON_SECALM_EXTSTAT2_Msk          (0x40000UL)               /*!< SMON SECALM: EXTSTAT2 (Bitfield-Mask: 0x01)           */
#define SMON_SECALM_EXTSTAT3_Pos          (19UL)                    /*!< SMON SECALM: EXTSTAT3 (Bit 19)                        */
#define SMON_SECALM_EXTSTAT3_Msk          (0x80000UL)               /*!< SMON SECALM: EXTSTAT3 (Bitfield-Mask: 0x01)           */
#define SMON_SECALM_EXTSTAT4_Pos          (20UL)                    /*!< SMON SECALM: EXTSTAT4 (Bit 20)                        */
#define SMON_SECALM_EXTSTAT4_Msk          (0x100000UL)              /*!< SMON SECALM: EXTSTAT4 (Bitfield-Mask: 0x01)           */
#define SMON_SECALM_EXTSTAT5_Pos          (21UL)                    /*!< SMON SECALM: EXTSTAT5 (Bit 21)                        */
#define SMON_SECALM_EXTSTAT5_Msk          (0x200000UL)              /*!< SMON SECALM: EXTSTAT5 (Bitfield-Mask: 0x01)           */
#define SMON_SECALM_EXTSWARN0_Pos         (24UL)                    /*!< SMON SECALM: EXTSWARN0 (Bit 24)                       */
#define SMON_SECALM_EXTSWARN0_Msk         (0x1000000UL)             /*!< SMON SECALM: EXTSWARN0 (Bitfield-Mask: 0x01)          */
#define SMON_SECALM_EXTSWARN1_Pos         (25UL)                    /*!< SMON SECALM: EXTSWARN1 (Bit 25)                       */
#define SMON_SECALM_EXTSWARN1_Msk         (0x2000000UL)             /*!< SMON SECALM: EXTSWARN1 (Bitfield-Mask: 0x01)          */
#define SMON_SECALM_EXTSWARN2_Pos         (26UL)                    /*!< SMON SECALM: EXTSWARN2 (Bit 26)                       */
#define SMON_SECALM_EXTSWARN2_Msk         (0x4000000UL)             /*!< SMON SECALM: EXTSWARN2 (Bitfield-Mask: 0x01)          */
#define SMON_SECALM_EXTSWARN3_Pos         (27UL)                    /*!< SMON SECALM: EXTSWARN3 (Bit 27)                       */
#define SMON_SECALM_EXTSWARN3_Msk         (0x8000000UL)             /*!< SMON SECALM: EXTSWARN3 (Bitfield-Mask: 0x01)          */
#define SMON_SECALM_EXTSWARN4_Pos         (28UL)                    /*!< SMON SECALM: EXTSWARN4 (Bit 28)                       */
#define SMON_SECALM_EXTSWARN4_Msk         (0x10000000UL)            /*!< SMON SECALM: EXTSWARN4 (Bitfield-Mask: 0x01)          */
#define SMON_SECALM_EXTSWARN5_Pos         (29UL)                    /*!< SMON SECALM: EXTSWARN5 (Bit 29)                       */
#define SMON_SECALM_EXTSWARN5_Msk         (0x20000000UL)            /*!< SMON SECALM: EXTSWARN5 (Bitfield-Mask: 0x01)          */
/* ========================================================  SECDIAG  ======================================================== */
#define SMON_SECDIAG_BORF_Pos             (0UL)                     /*!< SMON SECDIAG: BORF (Bit 0)                            */
#define SMON_SECDIAG_BORF_Msk             (0x1UL)                   /*!< SMON SECDIAG: BORF (Bitfield-Mask: 0x01)              */
#define SMON_SECDIAG_SHIELDF_Pos          (2UL)                     /*!< SMON SECDIAG: SHIELDF (Bit 2)                         */
#define SMON_SECDIAG_SHIELDF_Msk          (0x4UL)                   /*!< SMON SECDIAG: SHIELDF (Bitfield-Mask: 0x01)           */
#define SMON_SECDIAG_LOTEMP_Pos           (3UL)                     /*!< SMON SECDIAG: LOTEMP (Bit 3)                          */
#define SMON_SECDIAG_LOTEMP_Msk           (0x8UL)                   /*!< SMON SECDIAG: LOTEMP (Bitfield-Mask: 0x01)            */
#define SMON_SECDIAG_HITEMP_Pos           (4UL)                     /*!< SMON SECDIAG: HITEMP (Bit 4)                          */
#define SMON_SECDIAG_HITEMP_Msk           (0x10UL)                  /*!< SMON SECDIAG: HITEMP (Bitfield-Mask: 0x01)            */
#define SMON_SECDIAG_BATLO_Pos            (5UL)                     /*!< SMON SECDIAG: BATLO (Bit 5)                           */
#define SMON_SECDIAG_BATLO_Msk            (0x20UL)                  /*!< SMON SECDIAG: BATLO (Bitfield-Mask: 0x01)             */
#define SMON_SECDIAG_BATHI_Pos            (6UL)                     /*!< SMON SECDIAG: BATHI (Bit 6)                           */
#define SMON_SECDIAG_BATHI_Msk            (0x40UL)                  /*!< SMON SECDIAG: BATHI (Bitfield-Mask: 0x01)             */
#define SMON_SECDIAG_DYNF_Pos             (7UL)                     /*!< SMON SECDIAG: DYNF (Bit 7)                            */
#define SMON_SECDIAG_DYNF_Msk             (0x80UL)                  /*!< SMON SECDIAG: DYNF (Bitfield-Mask: 0x01)              */
#define SMON_SECDIAG_AESKT_Pos            (8UL)                     /*!< SMON SECDIAG: AESKT (Bit 8)                           */
#define SMON_SECDIAG_AESKT_Msk            (0x100UL)                 /*!< SMON SECDIAG: AESKT (Bitfield-Mask: 0x01)             */
#define SMON_SECDIAG_EXTSTAT0_Pos         (16UL)                    /*!< SMON SECDIAG: EXTSTAT0 (Bit 16)                       */
#define SMON_SECDIAG_EXTSTAT0_Msk         (0x10000UL)               /*!< SMON SECDIAG: EXTSTAT0 (Bitfield-Mask: 0x01)          */
#define SMON_SECDIAG_EXTSTAT1_Pos         (17UL)                    /*!< SMON SECDIAG: EXTSTAT1 (Bit 17)                       */
#define SMON_SECDIAG_EXTSTAT1_Msk         (0x20000UL)               /*!< SMON SECDIAG: EXTSTAT1 (Bitfield-Mask: 0x01)          */
#define SMON_SECDIAG_EXTSTAT2_Pos         (18UL)                    /*!< SMON SECDIAG: EXTSTAT2 (Bit 18)                       */
#define SMON_SECDIAG_EXTSTAT2_Msk         (0x40000UL)               /*!< SMON SECDIAG: EXTSTAT2 (Bitfield-Mask: 0x01)          */
#define SMON_SECDIAG_EXTSTAT3_Pos         (19UL)                    /*!< SMON SECDIAG: EXTSTAT3 (Bit 19)                       */
#define SMON_SECDIAG_EXTSTAT3_Msk         (0x80000UL)               /*!< SMON SECDIAG: EXTSTAT3 (Bitfield-Mask: 0x01)          */
#define SMON_SECDIAG_EXTSTAT4_Pos         (20UL)                    /*!< SMON SECDIAG: EXTSTAT4 (Bit 20)                       */
#define SMON_SECDIAG_EXTSTAT4_Msk         (0x100000UL)              /*!< SMON SECDIAG: EXTSTAT4 (Bitfield-Mask: 0x01)          */
#define SMON_SECDIAG_EXTSTAT5_Pos         (21UL)                    /*!< SMON SECDIAG: EXTSTAT5 (Bit 21)                       */
#define SMON_SECDIAG_EXTSTAT5_Msk         (0x200000UL)              /*!< SMON SECDIAG: EXTSTAT5 (Bitfield-Mask: 0x01)          */
/* =========================================================  DLRTC  ========================================================= */
/* =========================================================  SECST  ========================================================= */
#define SMON_SECST_EXTSRS_Pos             (0UL)                     /*!< SMON SECST: EXTSRS (Bit 0)                            */
#define SMON_SECST_EXTSRS_Msk             (0x1UL)                   /*!< SMON SECST: EXTSRS (Bitfield-Mask: 0x01)              */
#define SMON_SECST_INTSRS_Pos             (1UL)                     /*!< SMON SECST: INTSRS (Bit 1)                            */
#define SMON_SECST_INTSRS_Msk             (0x2UL)                   /*!< SMON SECST: INTSRS (Bitfield-Mask: 0x01)              */
#define SMON_SECST_SECALRS_Pos            (2UL)                     /*!< SMON SECST: SECALRS (Bit 2)                           */
#define SMON_SECST_SECALRS_Msk            (0x4UL)                   /*!< SMON SECST: SECALRS (Bitfield-Mask: 0x01)             */


/* =========================================================================================================================== */
/* ================                                           SPIn                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  DATA  ========================================================== */
#define SPIn_DATA_DATA_Pos                (0UL)                     /*!< SPIn DATA: DATA (Bit 0)                               */
#define SPIn_DATA_DATA_Msk                (0xffffUL)                /*!< SPIn DATA: DATA (Bitfield-Mask: 0xffff)               */
/* =========================================================  CNTL  ========================================================== */
#define SPIn_CNTL_SPIEN_Pos               (0UL)                     /*!< SPIn CNTL: SPIEN (Bit 0)                              */
#define SPIn_CNTL_SPIEN_Msk               (0x1UL)                   /*!< SPIn CNTL: SPIEN (Bitfield-Mask: 0x01)                */
#define SPIn_CNTL_MMEN_Pos                (1UL)                     /*!< SPIn CNTL: MMEN (Bit 1)                               */
#define SPIn_CNTL_MMEN_Msk                (0x2UL)                   /*!< SPIn CNTL: MMEN (Bitfield-Mask: 0x01)                 */
#define SPIn_CNTL_WOR_Pos                 (2UL)                     /*!< SPIn CNTL: WOR (Bit 2)                                */
#define SPIn_CNTL_WOR_Msk                 (0x4UL)                   /*!< SPIn CNTL: WOR (Bitfield-Mask: 0x01)                  */
#define SPIn_CNTL_CLKPOL_Pos              (3UL)                     /*!< SPIn CNTL: CLKPOL (Bit 3)                             */
#define SPIn_CNTL_CLKPOL_Msk              (0x8UL)                   /*!< SPIn CNTL: CLKPOL (Bitfield-Mask: 0x01)               */
#define SPIn_CNTL_PHASE_Pos               (4UL)                     /*!< SPIn CNTL: PHASE (Bit 4)                              */
#define SPIn_CNTL_PHASE_Msk               (0x10UL)                  /*!< SPIn CNTL: PHASE (Bitfield-Mask: 0x01)                */
#define SPIn_CNTL_BIRQ_Pos                (5UL)                     /*!< SPIn CNTL: BIRQ (Bit 5)                               */
#define SPIn_CNTL_BIRQ_Msk                (0x20UL)                  /*!< SPIn CNTL: BIRQ (Bitfield-Mask: 0x01)                 */
#define SPIn_CNTL_STR_Pos                 (6UL)                     /*!< SPIn CNTL: STR (Bit 6)                                */
#define SPIn_CNTL_STR_Msk                 (0x40UL)                  /*!< SPIn CNTL: STR (Bitfield-Mask: 0x01)                  */
#define SPIn_CNTL_IRQE_Pos                (7UL)                     /*!< SPIn CNTL: IRQE (Bit 7)                               */
#define SPIn_CNTL_IRQE_Msk                (0x80UL)                  /*!< SPIn CNTL: IRQE (Bitfield-Mask: 0x01)                 */
/* ========================================================  STATUS  ========================================================= */
#define SPIn_STATUS_SLAS_Pos              (0UL)                     /*!< SPIn STATUS: SLAS (Bit 0)                             */
#define SPIn_STATUS_SLAS_Msk              (0x1UL)                   /*!< SPIn STATUS: SLAS (Bitfield-Mask: 0x01)               */
#define SPIn_STATUS_TXST_Pos              (1UL)                     /*!< SPIn STATUS: TXST (Bit 1)                             */
#define SPIn_STATUS_TXST_Msk              (0x2UL)                   /*!< SPIn STATUS: TXST (Bitfield-Mask: 0x01)               */
#define SPIn_STATUS_TUND_Pos              (2UL)                     /*!< SPIn STATUS: TUND (Bit 2)                             */
#define SPIn_STATUS_TUND_Msk              (0x4UL)                   /*!< SPIn STATUS: TUND (Bitfield-Mask: 0x01)               */
#define SPIn_STATUS_ROVR_Pos              (3UL)                     /*!< SPIn STATUS: ROVR (Bit 3)                             */
#define SPIn_STATUS_ROVR_Msk              (0x8UL)                   /*!< SPIn STATUS: ROVR (Bitfield-Mask: 0x01)               */
#define SPIn_STATUS_ABT_Pos               (4UL)                     /*!< SPIn STATUS: ABT (Bit 4)                              */
#define SPIn_STATUS_ABT_Msk               (0x10UL)                  /*!< SPIn STATUS: ABT (Bitfield-Mask: 0x01)                */
#define SPIn_STATUS_COL_Pos               (5UL)                     /*!< SPIn STATUS: COL (Bit 5)                              */
#define SPIn_STATUS_COL_Msk               (0x20UL)                  /*!< SPIn STATUS: COL (Bitfield-Mask: 0x01)                */
#define SPIn_STATUS_TOVR_Pos              (6UL)                     /*!< SPIn STATUS: TOVR (Bit 6)                             */
#define SPIn_STATUS_TOVR_Msk              (0x40UL)                  /*!< SPIn STATUS: TOVR (Bitfield-Mask: 0x01)               */
#define SPIn_STATUS_IRQ_Pos               (7UL)                     /*!< SPIn STATUS: IRQ (Bit 7)                              */
#define SPIn_STATUS_IRQ_Msk               (0x80UL)                  /*!< SPIn STATUS: IRQ (Bitfield-Mask: 0x01)                */
/* ==========================================================  MOD  ========================================================== */
#define SPIn_MOD_SSV_Pos                  (0UL)                     /*!< SPIn MOD: SSV (Bit 0)                                 */
#define SPIn_MOD_SSV_Msk                  (0x1UL)                   /*!< SPIn MOD: SSV (Bitfield-Mask: 0x01)                   */
#define SPIn_MOD_SSIO_Pos                 (1UL)                     /*!< SPIn MOD: SSIO (Bit 1)                                */
#define SPIn_MOD_SSIO_Msk                 (0x2UL)                   /*!< SPIn MOD: SSIO (Bitfield-Mask: 0x01)                  */
#define SPIn_MOD_NUMBITS_Pos              (2UL)                     /*!< SPIn MOD: NUMBITS (Bit 2)                             */
#define SPIn_MOD_NUMBITS_Msk              (0x3cUL)                  /*!< SPIn MOD: NUMBITS (Bitfield-Mask: 0x0f)               */
#define SPIn_MOD_TX_LJ_Pos                (7UL)                     /*!< SPIn MOD: TX_LJ (Bit 7)                               */
#define SPIn_MOD_TX_LJ_Msk                (0x80UL)                  /*!< SPIn MOD: TX_LJ (Bitfield-Mask: 0x01)                 */
#define SPIn_MOD_SSL1_Pos                 (8UL)                     /*!< SPIn MOD: SSL1 (Bit 8)                                */
#define SPIn_MOD_SSL1_Msk                 (0x100UL)                 /*!< SPIn MOD: SSL1 (Bitfield-Mask: 0x01)                  */
#define SPIn_MOD_SSL2_Pos                 (9UL)                     /*!< SPIn MOD: SSL2 (Bit 9)                                */
#define SPIn_MOD_SSL2_Msk                 (0x200UL)                 /*!< SPIn MOD: SSL2 (Bitfield-Mask: 0x01)                  */
#define SPIn_MOD_SSL3_Pos                 (10UL)                    /*!< SPIn MOD: SSL3 (Bit 10)                               */
#define SPIn_MOD_SSL3_Msk                 (0x400UL)                 /*!< SPIn MOD: SSL3 (Bitfield-Mask: 0x01)                  */
/* ==========================================================  BRG  ========================================================== */
#define SPIn_BRG_BRG_Pos                  (0UL)                     /*!< SPIn BRG: BRG (Bit 0)                                 */
#define SPIn_BRG_BRG_Msk                  (0xffffUL)                /*!< SPIn BRG: BRG (Bitfield-Mask: 0xffff)                 */
/* ========================================================  DMA_REG  ======================================================== */
#define SPIn_DMA_REG_TX_FIFO_LEVEL_Pos    (0UL)                     /*!< SPIn DMA_REG: TX_FIFO_LEVEL (Bit 0)                   */
#define SPIn_DMA_REG_TX_FIFO_LEVEL_Msk    (0x7UL)                   /*!< SPIn DMA_REG: TX_FIFO_LEVEL (Bitfield-Mask: 0x07)     */
#define SPIn_DMA_REG_TX_FIFO_CLEAR_Pos    (4UL)                     /*!< SPIn DMA_REG: TX_FIFO_CLEAR (Bit 4)                   */
#define SPIn_DMA_REG_TX_FIFO_CLEAR_Msk    (0x10UL)                  /*!< SPIn DMA_REG: TX_FIFO_CLEAR (Bitfield-Mask: 0x01)     */
#define SPIn_DMA_REG_TX_FIFO_CNT_Pos      (8UL)                     /*!< SPIn DMA_REG: TX_FIFO_CNT (Bit 8)                     */
#define SPIn_DMA_REG_TX_FIFO_CNT_Msk      (0xf00UL)                 /*!< SPIn DMA_REG: TX_FIFO_CNT (Bitfield-Mask: 0x0f)       */
#define SPIn_DMA_REG_TX_DMA_EN_Pos        (15UL)                    /*!< SPIn DMA_REG: TX_DMA_EN (Bit 15)                      */
#define SPIn_DMA_REG_TX_DMA_EN_Msk        (0x8000UL)                /*!< SPIn DMA_REG: TX_DMA_EN (Bitfield-Mask: 0x01)         */
#define SPIn_DMA_REG_RX_FIFO_LEVEL_Pos    (16UL)                    /*!< SPIn DMA_REG: RX_FIFO_LEVEL (Bit 16)                  */
#define SPIn_DMA_REG_RX_FIFO_LEVEL_Msk    (0x70000UL)               /*!< SPIn DMA_REG: RX_FIFO_LEVEL (Bitfield-Mask: 0x07)     */
#define SPIn_DMA_REG_RX_FIFO_CLEAR_Pos    (20UL)                    /*!< SPIn DMA_REG: RX_FIFO_CLEAR (Bit 20)                  */
#define SPIn_DMA_REG_RX_FIFO_CLEAR_Msk    (0x100000UL)              /*!< SPIn DMA_REG: RX_FIFO_CLEAR (Bitfield-Mask: 0x01)     */
#define SPIn_DMA_REG_RX_FIFO_CNT_Pos      (24UL)                    /*!< SPIn DMA_REG: RX_FIFO_CNT (Bit 24)                    */
#define SPIn_DMA_REG_RX_FIFO_CNT_Msk      (0xf000000UL)             /*!< SPIn DMA_REG: RX_FIFO_CNT (Bitfield-Mask: 0x0f)       */
#define SPIn_DMA_REG_RX_DMA_EN_Pos        (31UL)                    /*!< SPIn DMA_REG: RX_DMA_EN (Bit 31)                      */
#define SPIn_DMA_REG_RX_DMA_EN_Msk        (0x80000000UL)            /*!< SPIn DMA_REG: RX_DMA_EN (Bitfield-Mask: 0x01)         */
/* =======================================================  I2S_CNTL  ======================================================== */
#define SPIn_I2S_CNTL_I2S_EN_Pos          (0UL)                     /*!< SPIn I2S_CNTL: I2S_EN (Bit 0)                         */
#define SPIn_I2S_CNTL_I2S_EN_Msk          (0x1UL)                   /*!< SPIn I2S_CNTL: I2S_EN (Bitfield-Mask: 0x01)           */
#define SPIn_I2S_CNTL_I2S_MUTE_Pos        (1UL)                     /*!< SPIn I2S_CNTL: I2S_MUTE (Bit 1)                       */
#define SPIn_I2S_CNTL_I2S_MUTE_Msk        (0x2UL)                   /*!< SPIn I2S_CNTL: I2S_MUTE (Bitfield-Mask: 0x01)         */
#define SPIn_I2S_CNTL_I2S_PAUSE_Pos       (2UL)                     /*!< SPIn I2S_CNTL: I2S_PAUSE (Bit 2)                      */
#define SPIn_I2S_CNTL_I2S_PAUSE_Msk       (0x4UL)                   /*!< SPIn I2S_CNTL: I2S_PAUSE (Bitfield-Mask: 0x01)        */
#define SPIn_I2S_CNTL_I2S_MONO_Pos        (3UL)                     /*!< SPIn I2S_CNTL: I2S_MONO (Bit 3)                       */
#define SPIn_I2S_CNTL_I2S_MONO_Msk        (0x8UL)                   /*!< SPIn I2S_CNTL: I2S_MONO (Bitfield-Mask: 0x01)         */
#define SPIn_I2S_CNTL_I2S_LJ_Pos          (4UL)                     /*!< SPIn I2S_CNTL: I2S_LJ (Bit 4)                         */
#define SPIn_I2S_CNTL_I2S_LJ_Msk          (0x10UL)                  /*!< SPIn I2S_CNTL: I2S_LJ (Bitfield-Mask: 0x01)           */


/* =========================================================================================================================== */
/* ================                                            SC                                             ================ */
/* =========================================================================================================================== */

/* =========================================================  SC_CR  ========================================================= */
#define SC_SC_CR_CONV_Pos                 (0UL)                     /*!< SC SC_CR: CONV (Bit 0)                                */
#define SC_SC_CR_CONV_Msk                 (0x1UL)                   /*!< SC SC_CR: CONV (Bitfield-Mask: 0x01)                  */
#define SC_SC_CR_CREP_Pos                 (1UL)                     /*!< SC SC_CR: CREP (Bit 1)                                */
#define SC_SC_CR_CREP_Msk                 (0x2UL)                   /*!< SC SC_CR: CREP (Bitfield-Mask: 0x01)                  */
#define SC_SC_CR_WTEN_Pos                 (2UL)                     /*!< SC SC_CR: WTEN (Bit 2)                                */
#define SC_SC_CR_WTEN_Msk                 (0x4UL)                   /*!< SC SC_CR: WTEN (Bitfield-Mask: 0x01)                  */
#define SC_SC_CR_UART_Pos                 (3UL)                     /*!< SC SC_CR: UART (Bit 3)                                */
#define SC_SC_CR_UART_Msk                 (0x8UL)                   /*!< SC SC_CR: UART (Bitfield-Mask: 0x01)                  */
#define SC_SC_CR_CCEN_Pos                 (4UL)                     /*!< SC SC_CR: CCEN (Bit 4)                                */
#define SC_SC_CR_CCEN_Msk                 (0x10UL)                  /*!< SC SC_CR: CCEN (Bitfield-Mask: 0x01)                  */
#define SC_SC_CR_RXFLUSH_Pos              (5UL)                     /*!< SC SC_CR: RXFLUSH (Bit 5)                             */
#define SC_SC_CR_RXFLUSH_Msk              (0x20UL)                  /*!< SC SC_CR: RXFLUSH (Bitfield-Mask: 0x01)               */
#define SC_SC_CR_TXFLUSH_Pos              (6UL)                     /*!< SC SC_CR: TXFLUSH (Bit 6)                             */
#define SC_SC_CR_TXFLUSH_Msk              (0x40UL)                  /*!< SC SC_CR: TXFLUSH (Bitfield-Mask: 0x01)               */
#define SC_SC_CR_RXTHD_Pos                (8UL)                     /*!< SC SC_CR: RXTHD (Bit 8)                               */
#define SC_SC_CR_RXTHD_Msk                (0xf00UL)                 /*!< SC SC_CR: RXTHD (Bitfield-Mask: 0x0f)                 */
#define SC_SC_CR_TXTHD_Pos                (12UL)                    /*!< SC SC_CR: TXTHD (Bit 12)                              */
#define SC_SC_CR_TXTHD_Msk                (0xf000UL)                /*!< SC SC_CR: TXTHD (Bitfield-Mask: 0x0f)                 */
#define SC_SC_CR_START_Pos                (16UL)                    /*!< SC SC_CR: START (Bit 16)                              */
#define SC_SC_CR_START_Msk                (0x10000UL)               /*!< SC SC_CR: START (Bitfield-Mask: 0x01)                 */
#define SC_SC_CR_BYPASS_PHY_Pos           (17UL)                    /*!< SC SC_CR: BYPASS_PHY (Bit 17)                         */
#define SC_SC_CR_BYPASS_PHY_Msk           (0x20000UL)               /*!< SC SC_CR: BYPASS_PHY (Bitfield-Mask: 0x01)            */
#define SC_SC_CR_PRPOL_Pos                (18UL)                    /*!< SC SC_CR: PRPOL (Bit 18)                              */
#define SC_SC_CR_PRPOL_Msk                (0x40000UL)               /*!< SC SC_CR: PRPOL (Bitfield-Mask: 0x01)                 */
#define SC_SC_CR_DEBNCE_Pos               (19UL)                    /*!< SC SC_CR: DEBNCE (Bit 19)                             */
#define SC_SC_CR_DEBNCE_Msk               (0x80000UL)               /*!< SC SC_CR: DEBNCE (Bitfield-Mask: 0x01)                */
#define SC_SC_CR_BYPASS_SEQ_Pos           (20UL)                    /*!< SC SC_CR: BYPASS_SEQ (Bit 20)                         */
#define SC_SC_CR_BYPASS_SEQ_Msk           (0x100000UL)              /*!< SC SC_CR: BYPASS_SEQ (Bitfield-Mask: 0x01)            */
/* =========================================================  SC_SR  ========================================================= */
#define SC_SC_SR_PAR_Pos                  (0UL)                     /*!< SC SC_SR: PAR (Bit 0)                                 */
#define SC_SC_SR_PAR_Msk                  (0x1UL)                   /*!< SC SC_SR: PAR (Bitfield-Mask: 0x01)                   */
#define SC_SC_SR_WTOV_Pos                 (1UL)                     /*!< SC SC_SR: WTOV (Bit 1)                                */
#define SC_SC_SR_WTOV_Msk                 (0x2UL)                   /*!< SC SC_SR: WTOV (Bitfield-Mask: 0x01)                  */
#define SC_SC_SR_CCOV_Pos                 (2UL)                     /*!< SC SC_SR: CCOV (Bit 2)                                */
#define SC_SC_SR_CCOV_Msk                 (0x4UL)                   /*!< SC SC_SR: CCOV (Bitfield-Mask: 0x01)                  */
#define SC_SC_SR_TXCF_Pos                 (3UL)                     /*!< SC SC_SR: TXCF (Bit 3)                                */
#define SC_SC_SR_TXCF_Msk                 (0x8UL)                   /*!< SC SC_SR: TXCF (Bitfield-Mask: 0x01)                  */
#define SC_SC_SR_RXEMPTY_Pos              (4UL)                     /*!< SC SC_SR: RXEMPTY (Bit 4)                             */
#define SC_SC_SR_RXEMPTY_Msk              (0x10UL)                  /*!< SC SC_SR: RXEMPTY (Bitfield-Mask: 0x01)               */
#define SC_SC_SR_RXFULL_Pos               (5UL)                     /*!< SC SC_SR: RXFULL (Bit 5)                              */
#define SC_SC_SR_RXFULL_Msk               (0x20UL)                  /*!< SC SC_SR: RXFULL (Bitfield-Mask: 0x01)                */
#define SC_SC_SR_TXEMPTY_Pos              (6UL)                     /*!< SC SC_SR: TXEMPTY (Bit 6)                             */
#define SC_SC_SR_TXEMPTY_Msk              (0x40UL)                  /*!< SC SC_SR: TXEMPTY (Bitfield-Mask: 0x01)               */
#define SC_SC_SR_TXFULL_Pos               (7UL)                     /*!< SC SC_SR: TXFULL (Bit 7)                              */
#define SC_SC_SR_TXFULL_Msk               (0x80UL)                  /*!< SC SC_SR: TXFULL (Bitfield-Mask: 0x01)                */
#define SC_SC_SR_RXELT_Pos                (8UL)                     /*!< SC SC_SR: RXELT (Bit 8)                               */
#define SC_SC_SR_RXELT_Msk                (0xf00UL)                 /*!< SC SC_SR: RXELT (Bitfield-Mask: 0x0f)                 */
#define SC_SC_SR_TXELT_Pos                (12UL)                    /*!< SC SC_SR: TXELT (Bit 12)                              */
#define SC_SC_SR_TXELT_Msk                (0xf000UL)                /*!< SC SC_SR: TXELT (Bitfield-Mask: 0x0f)                 */
#define SC_SC_SR_PRES_Pos                 (16UL)                    /*!< SC SC_SR: PRES (Bit 16)                               */
#define SC_SC_SR_PRES_Msk                 (0x10000UL)               /*!< SC SC_SR: PRES (Bitfield-Mask: 0x01)                  */
#define SC_SC_SR_PRC_Pos                  (18UL)                    /*!< SC SC_SR: PRC (Bit 18)                                */
#define SC_SC_SR_PRC_Msk                  (0x40000UL)               /*!< SC SC_SR: PRC (Bitfield-Mask: 0x01)                   */
#define SC_SC_SR_PDL_Pos                  (19UL)                    /*!< SC SC_SR: PDL (Bit 19)                                */
#define SC_SC_SR_PDL_Msk                  (0x80000UL)               /*!< SC SC_SR: PDL (Bitfield-Mask: 0x01)                   */
#define SC_SC_SR_ACTIV_Pos                (20UL)                    /*!< SC SC_SR: ACTIV (Bit 20)                              */
#define SC_SC_SR_ACTIV_Msk                (0x100000UL)              /*!< SC SC_SR: ACTIV (Bitfield-Mask: 0x01)                 */
/* =========================================================  SC_PN  ========================================================= */
#define SC_SC_PN_CRDRST_Pos               (0UL)                     /*!< SC SC_PN: CRDRST (Bit 0)                              */
#define SC_SC_PN_CRDRST_Msk               (0x1UL)                   /*!< SC SC_PN: CRDRST (Bitfield-Mask: 0x01)                */
#define SC_SC_PN_CRDCLK_Pos               (1UL)                     /*!< SC SC_PN: CRDCLK (Bit 1)                              */
#define SC_SC_PN_CRDCLK_Msk               (0x2UL)                   /*!< SC SC_PN: CRDCLK (Bitfield-Mask: 0x01)                */
#define SC_SC_PN_CRDIO_Pos                (2UL)                     /*!< SC SC_PN: CRDIO (Bit 2)                               */
#define SC_SC_PN_CRDIO_Msk                (0x4UL)                   /*!< SC SC_PN: CRDIO (Bitfield-Mask: 0x01)                 */
#define SC_SC_PN_CRDC4_Pos                (3UL)                     /*!< SC SC_PN: CRDC4 (Bit 3)                               */
#define SC_SC_PN_CRDC4_Msk                (0x8UL)                   /*!< SC SC_PN: CRDC4 (Bitfield-Mask: 0x01)                 */
#define SC_SC_PN_CRDC8_Pos                (4UL)                     /*!< SC SC_PN: CRDC8 (Bit 4)                               */
#define SC_SC_PN_CRDC8_Msk                (0x10UL)                  /*!< SC SC_PN: CRDC8 (Bitfield-Mask: 0x01)                 */
#define SC_SC_PN_CLKSEL_Pos               (5UL)                     /*!< SC SC_PN: CLKSEL (Bit 5)                              */
#define SC_SC_PN_CLKSEL_Msk               (0x20UL)                  /*!< SC SC_PN: CLKSEL (Bitfield-Mask: 0x01)                */
#define SC_SC_PN_VCCSEL_Pos               (8UL)                     /*!< SC SC_PN: VCCSEL (Bit 8)                              */
#define SC_SC_PN_VCCSEL_Msk               (0x300UL)                 /*!< SC SC_PN: VCCSEL (Bitfield-Mask: 0x03)                */
#define SC_SC_PN_IO_C48_EN_Pos            (16UL)                    /*!< SC SC_PN: IO_C48_EN (Bit 16)                          */
#define SC_SC_PN_IO_C48_EN_Msk            (0x10000UL)               /*!< SC SC_PN: IO_C48_EN (Bitfield-Mask: 0x01)             */
#define SC_SC_PN_CLK_EN_Pos               (17UL)                    /*!< SC SC_PN: CLK_EN (Bit 17)                             */
#define SC_SC_PN_CLK_EN_Msk               (0x20000UL)               /*!< SC SC_PN: CLK_EN (Bitfield-Mask: 0x01)                */
#define SC_SC_PN_RST_EN_Pos               (18UL)                    /*!< SC SC_PN: RST_EN (Bit 18)                             */
#define SC_SC_PN_RST_EN_Msk               (0x40000UL)               /*!< SC SC_PN: RST_EN (Bitfield-Mask: 0x01)                */
#define SC_SC_PN_VCC_EN_Pos               (19UL)                    /*!< SC SC_PN: VCC_EN (Bit 19)                             */
#define SC_SC_PN_VCC_EN_Msk               (0x80000UL)               /*!< SC SC_PN: VCC_EN (Bitfield-Mask: 0x01)                */
#define SC_SC_PN_RAMP_EN_Pos              (20UL)                    /*!< SC SC_PN: RAMP_EN (Bit 20)                            */
#define SC_SC_PN_RAMP_EN_Msk              (0x100000UL)              /*!< SC SC_PN: RAMP_EN (Bitfield-Mask: 0x01)               */
/* ========================================================  SC_ETUR  ======================================================== */
#define SC_SC_ETUR_ETU_Pos                (0UL)                     /*!< SC SC_ETUR: ETU (Bit 0)                               */
#define SC_SC_ETUR_ETU_Msk                (0x7fffUL)                /*!< SC SC_ETUR: ETU (Bitfield-Mask: 0x7fff)               */
#define SC_SC_ETUR_COMP_Pos               (15UL)                    /*!< SC SC_ETUR: COMP (Bit 15)                             */
#define SC_SC_ETUR_COMP_Msk               (0x8000UL)                /*!< SC SC_ETUR: COMP (Bitfield-Mask: 0x01)                */
#define SC_SC_ETUR_HALF_Pos               (16UL)                    /*!< SC SC_ETUR: HALF (Bit 16)                             */
#define SC_SC_ETUR_HALF_Msk               (0x10000UL)               /*!< SC SC_ETUR: HALF (Bitfield-Mask: 0x01)                */
/* ========================================================  SC_GTR  ========================================================= */
#define SC_SC_GTR_GT_Pos                  (0UL)                     /*!< SC SC_GTR: GT (Bit 0)                                 */
#define SC_SC_GTR_GT_Msk                  (0xffffUL)                /*!< SC SC_GTR: GT (Bitfield-Mask: 0xffff)                 */
/* ========================================================  SC_WT0R  ======================================================== */
#define SC_SC_WT0R_WT_Pos                 (0UL)                     /*!< SC SC_WT0R: WT (Bit 0)                                */
#define SC_SC_WT0R_WT_Msk                 (0xffUL)                  /*!< SC SC_WT0R: WT (Bitfield-Mask: 0xff)                  */
/* ========================================================  SC_WT1R  ======================================================== */
#define SC_SC_WT1R_WT_Pos                 (0UL)                     /*!< SC SC_WT1R: WT (Bit 0)                                */
#define SC_SC_WT1R_WT_Msk                 (0xffUL)                  /*!< SC SC_WT1R: WT (Bitfield-Mask: 0xff)                  */
/* ========================================================  SC_IER  ========================================================= */
#define SC_SC_IER_PARIE_Pos               (0UL)                     /*!< SC SC_IER: PARIE (Bit 0)                              */
#define SC_SC_IER_PARIE_Msk               (0x1UL)                   /*!< SC SC_IER: PARIE (Bitfield-Mask: 0x01)                */
#define SC_SC_IER_WTIE_Pos                (1UL)                     /*!< SC SC_IER: WTIE (Bit 1)                               */
#define SC_SC_IER_WTIE_Msk                (0x2UL)                   /*!< SC SC_IER: WTIE (Bitfield-Mask: 0x01)                 */
#define SC_SC_IER_CTIE_Pos                (2UL)                     /*!< SC SC_IER: CTIE (Bit 2)                               */
#define SC_SC_IER_CTIE_Msk                (0x4UL)                   /*!< SC SC_IER: CTIE (Bitfield-Mask: 0x01)                 */
#define SC_SC_IER_TCIE_Pos                (3UL)                     /*!< SC SC_IER: TCIE (Bit 3)                               */
#define SC_SC_IER_TCIE_Msk                (0x8UL)                   /*!< SC SC_IER: TCIE (Bitfield-Mask: 0x01)                 */
#define SC_SC_IER_RXEIE_Pos               (4UL)                     /*!< SC SC_IER: RXEIE (Bit 4)                              */
#define SC_SC_IER_RXEIE_Msk               (0x10UL)                  /*!< SC SC_IER: RXEIE (Bitfield-Mask: 0x01)                */
#define SC_SC_IER_RXTIE_Pos               (5UL)                     /*!< SC SC_IER: RXTIE (Bit 5)                              */
#define SC_SC_IER_RXTIE_Msk               (0x20UL)                  /*!< SC SC_IER: RXTIE (Bitfield-Mask: 0x01)                */
#define SC_SC_IER_RXFIE_Pos               (6UL)                     /*!< SC SC_IER: RXFIE (Bit 6)                              */
#define SC_SC_IER_RXFIE_Msk               (0x40UL)                  /*!< SC SC_IER: RXFIE (Bitfield-Mask: 0x01)                */
#define SC_SC_IER_TXEIE_Pos               (7UL)                     /*!< SC SC_IER: TXEIE (Bit 7)                              */
#define SC_SC_IER_TXEIE_Msk               (0x80UL)                  /*!< SC SC_IER: TXEIE (Bitfield-Mask: 0x01)                */
#define SC_SC_IER_TXTIE_Pos               (8UL)                     /*!< SC SC_IER: TXTIE (Bit 8)                              */
#define SC_SC_IER_TXTIE_Msk               (0x100UL)                 /*!< SC SC_IER: TXTIE (Bitfield-Mask: 0x01)                */
#define SC_SC_IER_PRCIE_Pos               (9UL)                     /*!< SC SC_IER: PRCIE (Bit 9)                              */
#define SC_SC_IER_PRCIE_Msk               (0x200UL)                 /*!< SC SC_IER: PRCIE (Bitfield-Mask: 0x01)                */
#define SC_SC_IER_PDLIE_Pos               (10UL)                    /*!< SC SC_IER: PDLIE (Bit 10)                             */
#define SC_SC_IER_PDLIE_Msk               (0x400UL)                 /*!< SC SC_IER: PDLIE (Bitfield-Mask: 0x01)                */
#define SC_SC_IER_ACTIVIE_Pos             (11UL)                    /*!< SC SC_IER: ACTIVIE (Bit 11)                           */
#define SC_SC_IER_ACTIVIE_Msk             (0x800UL)                 /*!< SC SC_IER: ACTIVIE (Bitfield-Mask: 0x01)              */
/* ========================================================  SC_ISR  ========================================================= */
#define SC_SC_ISR_PARIS_Pos               (0UL)                     /*!< SC SC_ISR: PARIS (Bit 0)                              */
#define SC_SC_ISR_PARIS_Msk               (0x1UL)                   /*!< SC SC_ISR: PARIS (Bitfield-Mask: 0x01)                */
#define SC_SC_ISR_WTIS_Pos                (1UL)                     /*!< SC SC_ISR: WTIS (Bit 1)                               */
#define SC_SC_ISR_WTIS_Msk                (0x2UL)                   /*!< SC SC_ISR: WTIS (Bitfield-Mask: 0x01)                 */
#define SC_SC_ISR_CTIS_Pos                (2UL)                     /*!< SC SC_ISR: CTIS (Bit 2)                               */
#define SC_SC_ISR_CTIS_Msk                (0x4UL)                   /*!< SC SC_ISR: CTIS (Bitfield-Mask: 0x01)                 */
#define SC_SC_ISR_TCIS_Pos                (3UL)                     /*!< SC SC_ISR: TCIS (Bit 3)                               */
#define SC_SC_ISR_TCIS_Msk                (0x8UL)                   /*!< SC SC_ISR: TCIS (Bitfield-Mask: 0x01)                 */
#define SC_SC_ISR_RXEIS_Pos               (4UL)                     /*!< SC SC_ISR: RXEIS (Bit 4)                              */
#define SC_SC_ISR_RXEIS_Msk               (0x10UL)                  /*!< SC SC_ISR: RXEIS (Bitfield-Mask: 0x01)                */
#define SC_SC_ISR_RXTIS_Pos               (5UL)                     /*!< SC SC_ISR: RXTIS (Bit 5)                              */
#define SC_SC_ISR_RXTIS_Msk               (0x20UL)                  /*!< SC SC_ISR: RXTIS (Bitfield-Mask: 0x01)                */
#define SC_SC_ISR_RXFIS_Pos               (6UL)                     /*!< SC SC_ISR: RXFIS (Bit 6)                              */
#define SC_SC_ISR_RXFIS_Msk               (0x40UL)                  /*!< SC SC_ISR: RXFIS (Bitfield-Mask: 0x01)                */
#define SC_SC_ISR_TXEIS_Pos               (7UL)                     /*!< SC SC_ISR: TXEIS (Bit 7)                              */
#define SC_SC_ISR_TXEIS_Msk               (0x80UL)                  /*!< SC SC_ISR: TXEIS (Bitfield-Mask: 0x01)                */
#define SC_SC_ISR_TXTIS_Pos               (8UL)                     /*!< SC SC_ISR: TXTIS (Bit 8)                              */
#define SC_SC_ISR_TXTIS_Msk               (0x100UL)                 /*!< SC SC_ISR: TXTIS (Bitfield-Mask: 0x01)                */
#define SC_SC_ISR_PRCIS_Pos               (9UL)                     /*!< SC SC_ISR: PRCIS (Bit 9)                              */
#define SC_SC_ISR_PRCIS_Msk               (0x200UL)                 /*!< SC SC_ISR: PRCIS (Bitfield-Mask: 0x01)                */
#define SC_SC_ISR_PDLIS_Pos               (10UL)                    /*!< SC SC_ISR: PDLIS (Bit 10)                             */
#define SC_SC_ISR_PDLIS_Msk               (0x400UL)                 /*!< SC SC_ISR: PDLIS (Bitfield-Mask: 0x01)                */
#define SC_SC_ISR_ACTIVIS_Pos             (11UL)                    /*!< SC SC_ISR: ACTIVIS (Bit 11)                           */
#define SC_SC_ISR_ACTIVIS_Msk             (0x800UL)                 /*!< SC SC_ISR: ACTIVIS (Bitfield-Mask: 0x01)              */
/* ========================================================  SC_TXR  ========================================================= */
#define SC_SC_TXR_DATA_Pos                (0UL)                     /*!< SC SC_TXR: DATA (Bit 0)                               */
#define SC_SC_TXR_DATA_Msk                (0xffUL)                  /*!< SC SC_TXR: DATA (Bitfield-Mask: 0xff)                 */
/* ========================================================  SC_RXR  ========================================================= */
#define SC_SC_RXR_DATA_Pos                (0UL)                     /*!< SC SC_RXR: DATA (Bit 0)                               */
#define SC_SC_RXR_DATA_Msk                (0xffUL)                  /*!< SC SC_RXR: DATA (Bitfield-Mask: 0xff)                 */
#define SC_SC_RXR_PARER_Pos               (8UL)                     /*!< SC SC_RXR: PARER (Bit 8)                              */
#define SC_SC_RXR_PARER_Msk               (0x100UL)                 /*!< SC SC_RXR: PARER (Bitfield-Mask: 0x01)                */
/* ========================================================  SC_CCR  ========================================================= */
#define SC_SC_CCR_CCYC_Pos                (0UL)                     /*!< SC SC_CCR: CCYC (Bit 0)                               */
#define SC_SC_CCR_CCYC_Msk                (0xffffffUL)              /*!< SC SC_CCR: CCYC (Bitfield-Mask: 0xffffff)             */
#define SC_SC_CCR_MAN_Pos                 (31UL)                    /*!< SC SC_CCR: MAN (Bit 31)                               */
#define SC_SC_CCR_MAN_Msk                 (0x80000000UL)            /*!< SC SC_CCR: MAN (Bitfield-Mask: 0x01)                  */


/* =========================================================================================================================== */
/* ================                                           TMRn                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CNT  ========================================================== */
/* ==========================================================  CMP  ========================================================== */
/* ==========================================================  PWM  ========================================================== */
/* ==========================================================  INT  ========================================================== */
#define TMRn_INT_IRQ_CLR_Pos              (0UL)                     /*!< TMRn INT: IRQ_CLR (Bit 0)                             */
#define TMRn_INT_IRQ_CLR_Msk              (0x1UL)                   /*!< TMRn INT: IRQ_CLR (Bitfield-Mask: 0x01)               */
/* ==========================================================  CN  =========================================================== */
#define TMRn_CN_TMODE_Pos                 (0UL)                     /*!< TMRn CN: TMODE (Bit 0)                                */
#define TMRn_CN_TMODE_Msk                 (0x7UL)                   /*!< TMRn CN: TMODE (Bitfield-Mask: 0x07)                  */
#define TMRn_CN_PRES_Pos                  (3UL)                     /*!< TMRn CN: PRES (Bit 3)                                 */
#define TMRn_CN_PRES_Msk                  (0x38UL)                  /*!< TMRn CN: PRES (Bitfield-Mask: 0x07)                   */
#define TMRn_CN_TPOL_Pos                  (6UL)                     /*!< TMRn CN: TPOL (Bit 6)                                 */
#define TMRn_CN_TPOL_Msk                  (0x40UL)                  /*!< TMRn CN: TPOL (Bitfield-Mask: 0x01)                   */
#define TMRn_CN_TEN_Pos                   (7UL)                     /*!< TMRn CN: TEN (Bit 7)                                  */
#define TMRn_CN_TEN_Msk                   (0x80UL)                  /*!< TMRn CN: TEN (Bitfield-Mask: 0x01)                    */
#define TMRn_CN_PRES3_Pos                 (8UL)                     /*!< TMRn CN: PRES3 (Bit 8)                                */
#define TMRn_CN_PRES3_Msk                 (0x100UL)                 /*!< TMRn CN: PRES3 (Bitfield-Mask: 0x01)                  */
#define TMRn_CN_PWMSYNC_Pos               (9UL)                     /*!< TMRn CN: PWMSYNC (Bit 9)                              */
#define TMRn_CN_PWMSYNC_Msk               (0x200UL)                 /*!< TMRn CN: PWMSYNC (Bitfield-Mask: 0x01)                */
#define TMRn_CN_NOLHPOL_Pos               (10UL)                    /*!< TMRn CN: NOLHPOL (Bit 10)                             */
#define TMRn_CN_NOLHPOL_Msk               (0x400UL)                 /*!< TMRn CN: NOLHPOL (Bitfield-Mask: 0x01)                */
#define TMRn_CN_NOLLPOL_Pos               (11UL)                    /*!< TMRn CN: NOLLPOL (Bit 11)                             */
#define TMRn_CN_NOLLPOL_Msk               (0x800UL)                 /*!< TMRn CN: NOLLPOL (Bitfield-Mask: 0x01)                */
/* ========================================================  NOLCMP  ========================================================= */
#define TMRn_NOLCMP_NOLLCMP_Pos           (0UL)                     /*!< TMRn NOLCMP: NOLLCMP (Bit 0)                          */
#define TMRn_NOLCMP_NOLLCMP_Msk           (0xffUL)                  /*!< TMRn NOLCMP: NOLLCMP (Bitfield-Mask: 0xff)            */
#define TMRn_NOLCMP_NOLHCMP_Pos           (8UL)                     /*!< TMRn NOLCMP: NOLHCMP (Bit 8)                          */
#define TMRn_NOLCMP_NOLHCMP_Msk           (0xff00UL)                /*!< TMRn NOLCMP: NOLHCMP (Bitfield-Mask: 0xff)            */


/* =========================================================================================================================== */
/* ================                                           TRNG                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CN  =========================================================== */
#define TRNG_CN_RNG_IE_Pos                (2UL)                     /*!< TRNG CN: RNG_IE (Bit 2)                               */
#define TRNG_CN_RNG_IE_Msk                (0x4UL)                   /*!< TRNG CN: RNG_IE (Bitfield-Mask: 0x01)                 */
#define TRNG_CN_RNG_ISC_Pos               (3UL)                     /*!< TRNG CN: RNG_ISC (Bit 3)                              */
#define TRNG_CN_RNG_ISC_Msk               (0x8UL)                   /*!< TRNG CN: RNG_ISC (Bitfield-Mask: 0x01)                */
#define TRNG_CN_RNG_I4S_Pos               (4UL)                     /*!< TRNG CN: RNG_I4S (Bit 4)                              */
#define TRNG_CN_RNG_I4S_Msk               (0x10UL)                  /*!< TRNG CN: RNG_I4S (Bitfield-Mask: 0x01)                */
#define TRNG_CN_RNG_IS_Pos                (5UL)                     /*!< TRNG CN: RNG_IS (Bit 5)                               */
#define TRNG_CN_RNG_IS_Msk                (0x20UL)                  /*!< TRNG CN: RNG_IS (Bitfield-Mask: 0x01)                 */
#define TRNG_CN_AESKG_Pos                 (6UL)                     /*!< TRNG CN: AESKG (Bit 6)                                */
#define TRNG_CN_AESKG_Msk                 (0x40UL)                  /*!< TRNG CN: AESKG (Bitfield-Mask: 0x01)                  */
/* =========================================================  DATA  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           UARTn                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define UARTn_CTRL_RXTHD_Pos              (0UL)                     /*!< UARTn CTRL: RXTHD (Bit 0)                             */
#define UARTn_CTRL_RXTHD_Msk              (0xfUL)                   /*!< UARTn CTRL: RXTHD (Bitfield-Mask: 0x0f)               */
#define UARTn_CTRL_PAREN_Pos              (4UL)                     /*!< UARTn CTRL: PAREN (Bit 4)                             */
#define UARTn_CTRL_PAREN_Msk              (0x10UL)                  /*!< UARTn CTRL: PAREN (Bitfield-Mask: 0x01)               */
#define UARTn_CTRL_PAREO_Pos              (5UL)                     /*!< UARTn CTRL: PAREO (Bit 5)                             */
#define UARTn_CTRL_PAREO_Msk              (0x20UL)                  /*!< UARTn CTRL: PAREO (Bitfield-Mask: 0x01)               */
#define UARTn_CTRL_PARMD_Pos              (6UL)                     /*!< UARTn CTRL: PARMD (Bit 6)                             */
#define UARTn_CTRL_PARMD_Msk              (0x40UL)                  /*!< UARTn CTRL: PARMD (Bitfield-Mask: 0x01)               */
#define UARTn_CTRL_TXFLUSH_Pos            (8UL)                     /*!< UARTn CTRL: TXFLUSH (Bit 8)                           */
#define UARTn_CTRL_TXFLUSH_Msk            (0x100UL)                 /*!< UARTn CTRL: TXFLUSH (Bitfield-Mask: 0x01)             */
#define UARTn_CTRL_RXFLUSH_Pos            (9UL)                     /*!< UARTn CTRL: RXFLUSH (Bit 9)                           */
#define UARTn_CTRL_RXFLUSH_Msk            (0x200UL)                 /*!< UARTn CTRL: RXFLUSH (Bitfield-Mask: 0x01)             */
#define UARTn_CTRL_SIZE_Pos               (10UL)                    /*!< UARTn CTRL: SIZE (Bit 10)                             */
#define UARTn_CTRL_SIZE_Msk               (0xc00UL)                 /*!< UARTn CTRL: SIZE (Bitfield-Mask: 0x03)                */
#define UARTn_CTRL_STOP_Pos               (12UL)                    /*!< UARTn CTRL: STOP (Bit 12)                             */
#define UARTn_CTRL_STOP_Msk               (0x1000UL)                /*!< UARTn CTRL: STOP (Bitfield-Mask: 0x01)                */
#define UARTn_CTRL_RTSCTSF_Pos            (13UL)                    /*!< UARTn CTRL: RTSCTSF (Bit 13)                          */
#define UARTn_CTRL_RTSCTSF_Msk            (0x2000UL)                /*!< UARTn CTRL: RTSCTSF (Bitfield-Mask: 0x01)             */
/* =========================================================  STAT  ========================================================== */
#define UARTn_STAT_TXBUSY_Pos             (0UL)                     /*!< UARTn STAT: TXBUSY (Bit 0)                            */
#define UARTn_STAT_TXBUSY_Msk             (0x1UL)                   /*!< UARTn STAT: TXBUSY (Bitfield-Mask: 0x01)              */
#define UARTn_STAT_RXBUSY_Pos             (1UL)                     /*!< UARTn STAT: RXBUSY (Bit 1)                            */
#define UARTn_STAT_RXBUSY_Msk             (0x2UL)                   /*!< UARTn STAT: RXBUSY (Bitfield-Mask: 0x01)              */
#define UARTn_STAT_RXEMPTY_Pos            (4UL)                     /*!< UARTn STAT: RXEMPTY (Bit 4)                           */
#define UARTn_STAT_RXEMPTY_Msk            (0x10UL)                  /*!< UARTn STAT: RXEMPTY (Bitfield-Mask: 0x01)             */
#define UARTn_STAT_RXFULL_Pos             (5UL)                     /*!< UARTn STAT: RXFULL (Bit 5)                            */
#define UARTn_STAT_RXFULL_Msk             (0x20UL)                  /*!< UARTn STAT: RXFULL (Bitfield-Mask: 0x01)              */
#define UARTn_STAT_TXEMPTY_Pos            (6UL)                     /*!< UARTn STAT: TXEMPTY (Bit 6)                           */
#define UARTn_STAT_TXEMPTY_Msk            (0x40UL)                  /*!< UARTn STAT: TXEMPTY (Bitfield-Mask: 0x01)             */
#define UARTn_STAT_TXFULL_Pos             (7UL)                     /*!< UARTn STAT: TXFULL (Bit 7)                            */
#define UARTn_STAT_TXFULL_Msk             (0x80UL)                  /*!< UARTn STAT: TXFULL (Bitfield-Mask: 0x01)              */
#define UARTn_STAT_RXELT_Pos              (8UL)                     /*!< UARTn STAT: RXELT (Bit 8)                             */
#define UARTn_STAT_RXELT_Msk              (0xf00UL)                 /*!< UARTn STAT: RXELT (Bitfield-Mask: 0x0f)               */
#define UARTn_STAT_TXELT_Pos              (12UL)                    /*!< UARTn STAT: TXELT (Bit 12)                            */
#define UARTn_STAT_TXELT_Msk              (0xf000UL)                /*!< UARTn STAT: TXELT (Bitfield-Mask: 0x0f)               */
/* ========================================================  INT_EN  ========================================================= */
#define UARTn_INT_EN_FRAMIE_Pos           (0UL)                     /*!< UARTn INT_EN: FRAMIE (Bit 0)                          */
#define UARTn_INT_EN_FRAMIE_Msk           (0x1UL)                   /*!< UARTn INT_EN: FRAMIE (Bitfield-Mask: 0x01)            */
#define UARTn_INT_EN_PARITYIE_Pos         (1UL)                     /*!< UARTn INT_EN: PARITYIE (Bit 1)                        */
#define UARTn_INT_EN_PARITYIE_Msk         (0x2UL)                   /*!< UARTn INT_EN: PARITYIE (Bitfield-Mask: 0x01)          */
#define UARTn_INT_EN_SIGNALIE_Pos         (2UL)                     /*!< UARTn INT_EN: SIGNALIE (Bit 2)                        */
#define UARTn_INT_EN_SIGNALIE_Msk         (0x4UL)                   /*!< UARTn INT_EN: SIGNALIE (Bitfield-Mask: 0x01)          */
#define UARTn_INT_EN_OVERIE_Pos           (3UL)                     /*!< UARTn INT_EN: OVERIE (Bit 3)                          */
#define UARTn_INT_EN_OVERIE_Msk           (0x8UL)                   /*!< UARTn INT_EN: OVERIE (Bitfield-Mask: 0x01)            */
#define UARTn_INT_EN_FFRXIE_Pos           (4UL)                     /*!< UARTn INT_EN: FFRXIE (Bit 4)                          */
#define UARTn_INT_EN_FFRXIE_Msk           (0x10UL)                  /*!< UARTn INT_EN: FFRXIE (Bitfield-Mask: 0x01)            */
#define UARTn_INT_EN_FFTXOIE_Pos          (5UL)                     /*!< UARTn INT_EN: FFTXOIE (Bit 5)                         */
#define UARTn_INT_EN_FFTXOIE_Msk          (0x20UL)                  /*!< UARTn INT_EN: FFTXOIE (Bitfield-Mask: 0x01)           */
#define UARTn_INT_EN_FFTXHIE_Pos          (6UL)                     /*!< UARTn INT_EN: FFTXHIE (Bit 6)                         */
#define UARTn_INT_EN_FFTXHIE_Msk          (0x40UL)                  /*!< UARTn INT_EN: FFTXHIE (Bitfield-Mask: 0x01)           */
/* =======================================================  INT_STAT  ======================================================== */
#define UARTn_INT_STAT_FRAMIS_Pos         (0UL)                     /*!< UARTn INT_STAT: FRAMIS (Bit 0)                        */
#define UARTn_INT_STAT_FRAMIS_Msk         (0x1UL)                   /*!< UARTn INT_STAT: FRAMIS (Bitfield-Mask: 0x01)          */
#define UARTn_INT_STAT_PARITYIS_Pos       (1UL)                     /*!< UARTn INT_STAT: PARITYIS (Bit 1)                      */
#define UARTn_INT_STAT_PARITYIS_Msk       (0x2UL)                   /*!< UARTn INT_STAT: PARITYIS (Bitfield-Mask: 0x01)        */
#define UARTn_INT_STAT_SIGNALIS_Pos       (2UL)                     /*!< UARTn INT_STAT: SIGNALIS (Bit 2)                      */
#define UARTn_INT_STAT_SIGNALIS_Msk       (0x4UL)                   /*!< UARTn INT_STAT: SIGNALIS (Bitfield-Mask: 0x01)        */
#define UARTn_INT_STAT_OVERIS_Pos         (3UL)                     /*!< UARTn INT_STAT: OVERIS (Bit 3)                        */
#define UARTn_INT_STAT_OVERIS_Msk         (0x8UL)                   /*!< UARTn INT_STAT: OVERIS (Bitfield-Mask: 0x01)          */
#define UARTn_INT_STAT_FFRXIS_Pos         (4UL)                     /*!< UARTn INT_STAT: FFRXIS (Bit 4)                        */
#define UARTn_INT_STAT_FFRXIS_Msk         (0x10UL)                  /*!< UARTn INT_STAT: FFRXIS (Bitfield-Mask: 0x01)          */
#define UARTn_INT_STAT_FFTXOIS_Pos        (5UL)                     /*!< UARTn INT_STAT: FFTXOIS (Bit 5)                       */
#define UARTn_INT_STAT_FFTXOIS_Msk        (0x20UL)                  /*!< UARTn INT_STAT: FFTXOIS (Bitfield-Mask: 0x01)         */
#define UARTn_INT_STAT_FFTXHIS_Pos        (6UL)                     /*!< UARTn INT_STAT: FFTXHIS (Bit 6)                       */
#define UARTn_INT_STAT_FFTXHIS_Msk        (0x40UL)                  /*!< UARTn INT_STAT: FFTXHIS (Bitfield-Mask: 0x01)         */
/* =========================================================  BAUD0  ========================================================= */
#define UARTn_BAUD0_IDIV_Pos              (0UL)                     /*!< UARTn BAUD0: IDIV (Bit 0)                             */
#define UARTn_BAUD0_IDIV_Msk              (0xfffUL)                 /*!< UARTn BAUD0: IDIV (Bitfield-Mask: 0xfff)              */
/* =========================================================  BAUD1  ========================================================= */
#define UARTn_BAUD1_DDIV_Pos              (0UL)                     /*!< UARTn BAUD1: DDIV (Bit 0)                             */
#define UARTn_BAUD1_DDIV_Msk              (0x7fUL)                  /*!< UARTn BAUD1: DDIV (Bitfield-Mask: 0x7f)               */
/* ==========================================================  PIN  ========================================================== */
#define UARTn_PIN_CTS_Pos                 (0UL)                     /*!< UARTn PIN: CTS (Bit 0)                                */
#define UARTn_PIN_CTS_Msk                 (0x1UL)                   /*!< UARTn PIN: CTS (Bitfield-Mask: 0x01)                  */
#define UARTn_PIN_RTS_Pos                 (1UL)                     /*!< UARTn PIN: RTS (Bit 1)                                */
#define UARTn_PIN_RTS_Msk                 (0x2UL)                   /*!< UARTn PIN: RTS (Bitfield-Mask: 0x01)                  */
/* =========================================================  DATA  ========================================================== */
#define UARTn_DATA_DATA_Pos               (0UL)                     /*!< UARTn DATA: DATA (Bit 0)                              */
#define UARTn_DATA_DATA_Msk               (0xffUL)                  /*!< UARTn DATA: DATA (Bitfield-Mask: 0xff)                */
#define UARTn_DATA_PARITY_Pos             (8UL)                     /*!< UARTn DATA: PARITY (Bit 8)                            */
#define UARTn_DATA_PARITY_Msk             (0x100UL)                 /*!< UARTn DATA: PARITY (Bitfield-Mask: 0x01)              */
/* ========================================================  DMA_REG  ======================================================== */
#define UARTn_DMA_REG_TXCNT_Pos           (0UL)                     /*!< UARTn DMA_REG: TXCNT (Bit 0)                          */
#define UARTn_DMA_REG_TXCNT_Msk           (0xfUL)                   /*!< UARTn DMA_REG: TXCNT (Bitfield-Mask: 0x0f)            */
#define UARTn_DMA_REG_TXEN_Pos            (4UL)                     /*!< UARTn DMA_REG: TXEN (Bit 4)                           */
#define UARTn_DMA_REG_TXEN_Msk            (0x10UL)                  /*!< UARTn DMA_REG: TXEN (Bitfield-Mask: 0x01)             */
#define UARTn_DMA_REG_RXCNT_Pos           (5UL)                     /*!< UARTn DMA_REG: RXCNT (Bit 5)                          */
#define UARTn_DMA_REG_RXCNT_Msk           (0x1e0UL)                 /*!< UARTn DMA_REG: RXCNT (Bitfield-Mask: 0x0f)            */
#define UARTn_DMA_REG_RXEN_Pos            (9UL)                     /*!< UARTn DMA_REG: RXEN (Bit 9)                           */
#define UARTn_DMA_REG_RXEN_Msk            (0x200UL)                 /*!< UARTn DMA_REG: RXEN (Bitfield-Mask: 0x01)             */


/* =========================================================================================================================== */
/* ================                                            USB                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CN  =========================================================== */
#define USB_CN_USB_EN_Pos                 (0UL)                     /*!< USB CN: USB_EN (Bit 0)                                */
#define USB_CN_USB_EN_Msk                 (0x1UL)                   /*!< USB CN: USB_EN (Bitfield-Mask: 0x01)                  */
/* =======================================================  DEV_ADDR  ======================================================== */
#define USB_DEV_ADDR_DEV_ADDR_Pos         (0UL)                     /*!< USB DEV_ADDR: DEV_ADDR (Bit 0)                        */
#define USB_DEV_ADDR_DEV_ADDR_Msk         (0x7fUL)                  /*!< USB DEV_ADDR: DEV_ADDR (Bitfield-Mask: 0x7f)          */
/* ========================================================  DEV_CN  ========================================================= */
#define USB_DEV_CN_SIGRWU_Pos             (2UL)                     /*!< USB DEV_CN: SIGRWU (Bit 2)                            */
#define USB_DEV_CN_SIGRWU_Msk             (0x4UL)                   /*!< USB DEV_CN: SIGRWU (Bitfield-Mask: 0x01)              */
#define USB_DEV_CN_CONNECT_Pos            (3UL)                     /*!< USB DEV_CN: CONNECT (Bit 3)                           */
#define USB_DEV_CN_CONNECT_Msk            (0x8UL)                   /*!< USB DEV_CN: CONNECT (Bitfield-Mask: 0x01)             */
#define USB_DEV_CN_ULPM_Pos               (4UL)                     /*!< USB DEV_CN: ULPM (Bit 4)                              */
#define USB_DEV_CN_ULPM_Msk               (0x10UL)                  /*!< USB DEV_CN: ULPM (Bitfield-Mask: 0x01)                */
#define USB_DEV_CN_URST_Pos               (5UL)                     /*!< USB DEV_CN: URST (Bit 5)                              */
#define USB_DEV_CN_URST_Msk               (0x20UL)                  /*!< USB DEV_CN: URST (Bitfield-Mask: 0x01)                */
#define USB_DEV_CN_VBGATE_Pos             (6UL)                     /*!< USB DEV_CN: VBGATE (Bit 6)                            */
#define USB_DEV_CN_VBGATE_Msk             (0x40UL)                  /*!< USB DEV_CN: VBGATE (Bitfield-Mask: 0x01)              */
#define USB_DEV_CN_OSCEN_Pos              (7UL)                     /*!< USB DEV_CN: OSCEN (Bit 7)                             */
#define USB_DEV_CN_OSCEN_Msk              (0x80UL)                  /*!< USB DEV_CN: OSCEN (Bitfield-Mask: 0x01)               */
#define USB_DEV_CN_BACT_OE_Pos            (8UL)                     /*!< USB DEV_CN: BACT_OE (Bit 8)                           */
#define USB_DEV_CN_BACT_OE_Msk            (0x100UL)                 /*!< USB DEV_CN: BACT_OE (Bitfield-Mask: 0x01)             */
#define USB_DEV_CN_FIFO_MODE_Pos          (9UL)                     /*!< USB DEV_CN: FIFO_MODE (Bit 9)                         */
#define USB_DEV_CN_FIFO_MODE_Msk          (0x200UL)                 /*!< USB DEV_CN: FIFO_MODE (Bitfield-Mask: 0x01)           */
/* ========================================================  DEV_INT  ======================================================== */
#define USB_DEV_INT_DPACT_Pos             (0UL)                     /*!< USB DEV_INT: DPACT (Bit 0)                            */
#define USB_DEV_INT_DPACT_Msk             (0x1UL)                   /*!< USB DEV_INT: DPACT (Bitfield-Mask: 0x01)              */
#define USB_DEV_INT_RWU_DN_Pos            (1UL)                     /*!< USB DEV_INT: RWU_DN (Bit 1)                           */
#define USB_DEV_INT_RWU_DN_Msk            (0x2UL)                   /*!< USB DEV_INT: RWU_DN (Bitfield-Mask: 0x01)             */
#define USB_DEV_INT_BACT_Pos              (2UL)                     /*!< USB DEV_INT: BACT (Bit 2)                             */
#define USB_DEV_INT_BACT_Msk              (0x4UL)                   /*!< USB DEV_INT: BACT (Bitfield-Mask: 0x01)               */
#define USB_DEV_INT_BRST_Pos              (3UL)                     /*!< USB DEV_INT: BRST (Bit 3)                             */
#define USB_DEV_INT_BRST_Msk              (0x8UL)                   /*!< USB DEV_INT: BRST (Bitfield-Mask: 0x01)               */
#define USB_DEV_INT_SUSP_Pos              (4UL)                     /*!< USB DEV_INT: SUSP (Bit 4)                             */
#define USB_DEV_INT_SUSP_Msk              (0x10UL)                  /*!< USB DEV_INT: SUSP (Bitfield-Mask: 0x01)               */
#define USB_DEV_INT_NO_VBUS_Pos           (5UL)                     /*!< USB DEV_INT: NO_VBUS (Bit 5)                          */
#define USB_DEV_INT_NO_VBUS_Msk           (0x20UL)                  /*!< USB DEV_INT: NO_VBUS (Bitfield-Mask: 0x01)            */
#define USB_DEV_INT_VBUS_Pos              (6UL)                     /*!< USB DEV_INT: VBUS (Bit 6)                             */
#define USB_DEV_INT_VBUS_Msk              (0x40UL)                  /*!< USB DEV_INT: VBUS (Bitfield-Mask: 0x01)               */
#define USB_DEV_INT_BRST_DN_Pos           (7UL)                     /*!< USB DEV_INT: BRST_DN (Bit 7)                          */
#define USB_DEV_INT_BRST_DN_Msk           (0x80UL)                  /*!< USB DEV_INT: BRST_DN (Bitfield-Mask: 0x01)            */
#define USB_DEV_INT_SETUP_Pos             (8UL)                     /*!< USB DEV_INT: SETUP (Bit 8)                            */
#define USB_DEV_INT_SETUP_Msk             (0x100UL)                 /*!< USB DEV_INT: SETUP (Bitfield-Mask: 0x01)              */
#define USB_DEV_INT_EP_IN_Pos             (9UL)                     /*!< USB DEV_INT: EP_IN (Bit 9)                            */
#define USB_DEV_INT_EP_IN_Msk             (0x200UL)                 /*!< USB DEV_INT: EP_IN (Bitfield-Mask: 0x01)              */
#define USB_DEV_INT_EP_OUT_Pos            (10UL)                    /*!< USB DEV_INT: EP_OUT (Bit 10)                          */
#define USB_DEV_INT_EP_OUT_Msk            (0x400UL)                 /*!< USB DEV_INT: EP_OUT (Bitfield-Mask: 0x01)             */
#define USB_DEV_INT_EP_NAK_Pos            (11UL)                    /*!< USB DEV_INT: EP_NAK (Bit 11)                          */
#define USB_DEV_INT_EP_NAK_Msk            (0x800UL)                 /*!< USB DEV_INT: EP_NAK (Bitfield-Mask: 0x01)             */
#define USB_DEV_INT_DMA_ERR_Pos           (12UL)                    /*!< USB DEV_INT: DMA_ERR (Bit 12)                         */
#define USB_DEV_INT_DMA_ERR_Msk           (0x1000UL)                /*!< USB DEV_INT: DMA_ERR (Bitfield-Mask: 0x01)            */
#define USB_DEV_INT_BUF_OVR_Pos           (13UL)                    /*!< USB DEV_INT: BUF_OVR (Bit 13)                         */
#define USB_DEV_INT_BUF_OVR_Msk           (0x2000UL)                /*!< USB DEV_INT: BUF_OVR (Bitfield-Mask: 0x01)            */
#define USB_DEV_INT_VBUS_ST_Pos           (16UL)                    /*!< USB DEV_INT: VBUS_ST (Bit 16)                         */
#define USB_DEV_INT_VBUS_ST_Msk           (0x10000UL)               /*!< USB DEV_INT: VBUS_ST (Bitfield-Mask: 0x01)            */
/* ======================================================  DEV_INT_EN  ======================================================= */
#define USB_DEV_INT_EN_DPACT_Pos          (0UL)                     /*!< USB DEV_INT_EN: DPACT (Bit 0)                         */
#define USB_DEV_INT_EN_DPACT_Msk          (0x1UL)                   /*!< USB DEV_INT_EN: DPACT (Bitfield-Mask: 0x01)           */
#define USB_DEV_INT_EN_RWU_DN_Pos         (1UL)                     /*!< USB DEV_INT_EN: RWU_DN (Bit 1)                        */
#define USB_DEV_INT_EN_RWU_DN_Msk         (0x2UL)                   /*!< USB DEV_INT_EN: RWU_DN (Bitfield-Mask: 0x01)          */
#define USB_DEV_INT_EN_BACT_Pos           (2UL)                     /*!< USB DEV_INT_EN: BACT (Bit 2)                          */
#define USB_DEV_INT_EN_BACT_Msk           (0x4UL)                   /*!< USB DEV_INT_EN: BACT (Bitfield-Mask: 0x01)            */
#define USB_DEV_INT_EN_BRST_Pos           (3UL)                     /*!< USB DEV_INT_EN: BRST (Bit 3)                          */
#define USB_DEV_INT_EN_BRST_Msk           (0x8UL)                   /*!< USB DEV_INT_EN: BRST (Bitfield-Mask: 0x01)            */
#define USB_DEV_INT_EN_SUSP_Pos           (4UL)                     /*!< USB DEV_INT_EN: SUSP (Bit 4)                          */
#define USB_DEV_INT_EN_SUSP_Msk           (0x10UL)                  /*!< USB DEV_INT_EN: SUSP (Bitfield-Mask: 0x01)            */
#define USB_DEV_INT_EN_NO_VBUS_Pos        (5UL)                     /*!< USB DEV_INT_EN: NO_VBUS (Bit 5)                       */
#define USB_DEV_INT_EN_NO_VBUS_Msk        (0x20UL)                  /*!< USB DEV_INT_EN: NO_VBUS (Bitfield-Mask: 0x01)         */
#define USB_DEV_INT_EN_VBUS_Pos           (6UL)                     /*!< USB DEV_INT_EN: VBUS (Bit 6)                          */
#define USB_DEV_INT_EN_VBUS_Msk           (0x40UL)                  /*!< USB DEV_INT_EN: VBUS (Bitfield-Mask: 0x01)            */
#define USB_DEV_INT_EN_BRST_DN_Pos        (7UL)                     /*!< USB DEV_INT_EN: BRST_DN (Bit 7)                       */
#define USB_DEV_INT_EN_BRST_DN_Msk        (0x80UL)                  /*!< USB DEV_INT_EN: BRST_DN (Bitfield-Mask: 0x01)         */
#define USB_DEV_INT_EN_SETUP_Pos          (8UL)                     /*!< USB DEV_INT_EN: SETUP (Bit 8)                         */
#define USB_DEV_INT_EN_SETUP_Msk          (0x100UL)                 /*!< USB DEV_INT_EN: SETUP (Bitfield-Mask: 0x01)           */
#define USB_DEV_INT_EN_EP_IN_Pos          (9UL)                     /*!< USB DEV_INT_EN: EP_IN (Bit 9)                         */
#define USB_DEV_INT_EN_EP_IN_Msk          (0x200UL)                 /*!< USB DEV_INT_EN: EP_IN (Bitfield-Mask: 0x01)           */
#define USB_DEV_INT_EN_EP_OUT_Pos         (10UL)                    /*!< USB DEV_INT_EN: EP_OUT (Bit 10)                       */
#define USB_DEV_INT_EN_EP_OUT_Msk         (0x400UL)                 /*!< USB DEV_INT_EN: EP_OUT (Bitfield-Mask: 0x01)          */
#define USB_DEV_INT_EN_EP_NAK_Pos         (11UL)                    /*!< USB DEV_INT_EN: EP_NAK (Bit 11)                       */
#define USB_DEV_INT_EN_EP_NAK_Msk         (0x800UL)                 /*!< USB DEV_INT_EN: EP_NAK (Bitfield-Mask: 0x01)          */
#define USB_DEV_INT_EN_DMA_ERR_Pos        (12UL)                    /*!< USB DEV_INT_EN: DMA_ERR (Bit 12)                      */
#define USB_DEV_INT_EN_DMA_ERR_Msk        (0x1000UL)                /*!< USB DEV_INT_EN: DMA_ERR (Bitfield-Mask: 0x01)         */
#define USB_DEV_INT_EN_BUF_OVR_Pos        (13UL)                    /*!< USB DEV_INT_EN: BUF_OVR (Bit 13)                      */
#define USB_DEV_INT_EN_BUF_OVR_Msk        (0x2000UL)                /*!< USB DEV_INT_EN: BUF_OVR (Bitfield-Mask: 0x01)         */
/* ========================================================  EP_BASE  ======================================================== */
#define USB_EP_BASE_EP_BASE_Pos           (9UL)                     /*!< USB EP_BASE: EP_BASE (Bit 9)                          */
#define USB_EP_BASE_EP_BASE_Msk           (0xfffffe00UL)            /*!< USB EP_BASE: EP_BASE (Bitfield-Mask: 0x7fffff)        */
/* ========================================================  CUR_BUF  ======================================================== */
#define USB_CUR_BUF_OUT_BUF_EP0_Pos       (0UL)                     /*!< USB CUR_BUF: OUT_BUF_EP0 (Bit 0)                      */
#define USB_CUR_BUF_OUT_BUF_EP0_Msk       (0x1UL)                   /*!< USB CUR_BUF: OUT_BUF_EP0 (Bitfield-Mask: 0x01)        */
#define USB_CUR_BUF_OUT_BUF_EP1_Pos       (1UL)                     /*!< USB CUR_BUF: OUT_BUF_EP1 (Bit 1)                      */
#define USB_CUR_BUF_OUT_BUF_EP1_Msk       (0x2UL)                   /*!< USB CUR_BUF: OUT_BUF_EP1 (Bitfield-Mask: 0x01)        */
#define USB_CUR_BUF_OUT_BUF_EP2_Pos       (2UL)                     /*!< USB CUR_BUF: OUT_BUF_EP2 (Bit 2)                      */
#define USB_CUR_BUF_OUT_BUF_EP2_Msk       (0x4UL)                   /*!< USB CUR_BUF: OUT_BUF_EP2 (Bitfield-Mask: 0x01)        */
#define USB_CUR_BUF_OUT_BUF_EP3_Pos       (3UL)                     /*!< USB CUR_BUF: OUT_BUF_EP3 (Bit 3)                      */
#define USB_CUR_BUF_OUT_BUF_EP3_Msk       (0x8UL)                   /*!< USB CUR_BUF: OUT_BUF_EP3 (Bitfield-Mask: 0x01)        */
#define USB_CUR_BUF_OUT_BUF_EP4_Pos       (4UL)                     /*!< USB CUR_BUF: OUT_BUF_EP4 (Bit 4)                      */
#define USB_CUR_BUF_OUT_BUF_EP4_Msk       (0x10UL)                  /*!< USB CUR_BUF: OUT_BUF_EP4 (Bitfield-Mask: 0x01)        */
#define USB_CUR_BUF_OUT_BUF_EP5_Pos       (5UL)                     /*!< USB CUR_BUF: OUT_BUF_EP5 (Bit 5)                      */
#define USB_CUR_BUF_OUT_BUF_EP5_Msk       (0x20UL)                  /*!< USB CUR_BUF: OUT_BUF_EP5 (Bitfield-Mask: 0x01)        */
#define USB_CUR_BUF_OUT_BUF_EP6_Pos       (6UL)                     /*!< USB CUR_BUF: OUT_BUF_EP6 (Bit 6)                      */
#define USB_CUR_BUF_OUT_BUF_EP6_Msk       (0x40UL)                  /*!< USB CUR_BUF: OUT_BUF_EP6 (Bitfield-Mask: 0x01)        */
#define USB_CUR_BUF_OUT_BUF_EP7_Pos       (7UL)                     /*!< USB CUR_BUF: OUT_BUF_EP7 (Bit 7)                      */
#define USB_CUR_BUF_OUT_BUF_EP7_Msk       (0x80UL)                  /*!< USB CUR_BUF: OUT_BUF_EP7 (Bitfield-Mask: 0x01)        */
#define USB_CUR_BUF_OUT_BUF_EP8_Pos       (8UL)                     /*!< USB CUR_BUF: OUT_BUF_EP8 (Bit 8)                      */
#define USB_CUR_BUF_OUT_BUF_EP8_Msk       (0x100UL)                 /*!< USB CUR_BUF: OUT_BUF_EP8 (Bitfield-Mask: 0x01)        */
#define USB_CUR_BUF_OUT_BUF_EP9_Pos       (9UL)                     /*!< USB CUR_BUF: OUT_BUF_EP9 (Bit 9)                      */
#define USB_CUR_BUF_OUT_BUF_EP9_Msk       (0x200UL)                 /*!< USB CUR_BUF: OUT_BUF_EP9 (Bitfield-Mask: 0x01)        */
#define USB_CUR_BUF_OUT_BUF_EP10_Pos      (10UL)                    /*!< USB CUR_BUF: OUT_BUF_EP10 (Bit 10)                    */
#define USB_CUR_BUF_OUT_BUF_EP10_Msk      (0x400UL)                 /*!< USB CUR_BUF: OUT_BUF_EP10 (Bitfield-Mask: 0x01)       */
#define USB_CUR_BUF_OUT_BUF_EP11_Pos      (11UL)                    /*!< USB CUR_BUF: OUT_BUF_EP11 (Bit 11)                    */
#define USB_CUR_BUF_OUT_BUF_EP11_Msk      (0x800UL)                 /*!< USB CUR_BUF: OUT_BUF_EP11 (Bitfield-Mask: 0x01)       */
#define USB_CUR_BUF_OUT_BUF_EP12_Pos      (12UL)                    /*!< USB CUR_BUF: OUT_BUF_EP12 (Bit 12)                    */
#define USB_CUR_BUF_OUT_BUF_EP12_Msk      (0x1000UL)                /*!< USB CUR_BUF: OUT_BUF_EP12 (Bitfield-Mask: 0x01)       */
#define USB_CUR_BUF_OUT_BUF_EP13_Pos      (13UL)                    /*!< USB CUR_BUF: OUT_BUF_EP13 (Bit 13)                    */
#define USB_CUR_BUF_OUT_BUF_EP13_Msk      (0x2000UL)                /*!< USB CUR_BUF: OUT_BUF_EP13 (Bitfield-Mask: 0x01)       */
#define USB_CUR_BUF_OUT_BUF_EP14_Pos      (14UL)                    /*!< USB CUR_BUF: OUT_BUF_EP14 (Bit 14)                    */
#define USB_CUR_BUF_OUT_BUF_EP14_Msk      (0x4000UL)                /*!< USB CUR_BUF: OUT_BUF_EP14 (Bitfield-Mask: 0x01)       */
#define USB_CUR_BUF_OUT_BUF_EP15_Pos      (15UL)                    /*!< USB CUR_BUF: OUT_BUF_EP15 (Bit 15)                    */
#define USB_CUR_BUF_OUT_BUF_EP15_Msk      (0x8000UL)                /*!< USB CUR_BUF: OUT_BUF_EP15 (Bitfield-Mask: 0x01)       */
#define USB_CUR_BUF_IN_BUF_EP0_Pos        (16UL)                    /*!< USB CUR_BUF: IN_BUF_EP0 (Bit 16)                      */
#define USB_CUR_BUF_IN_BUF_EP0_Msk        (0x10000UL)               /*!< USB CUR_BUF: IN_BUF_EP0 (Bitfield-Mask: 0x01)         */
#define USB_CUR_BUF_IN_BUF_EP1_Pos        (17UL)                    /*!< USB CUR_BUF: IN_BUF_EP1 (Bit 17)                      */
#define USB_CUR_BUF_IN_BUF_EP1_Msk        (0x20000UL)               /*!< USB CUR_BUF: IN_BUF_EP1 (Bitfield-Mask: 0x01)         */
#define USB_CUR_BUF_IN_BUF_EP2_Pos        (18UL)                    /*!< USB CUR_BUF: IN_BUF_EP2 (Bit 18)                      */
#define USB_CUR_BUF_IN_BUF_EP2_Msk        (0x40000UL)               /*!< USB CUR_BUF: IN_BUF_EP2 (Bitfield-Mask: 0x01)         */
#define USB_CUR_BUF_IN_BUF_EP3_Pos        (19UL)                    /*!< USB CUR_BUF: IN_BUF_EP3 (Bit 19)                      */
#define USB_CUR_BUF_IN_BUF_EP3_Msk        (0x80000UL)               /*!< USB CUR_BUF: IN_BUF_EP3 (Bitfield-Mask: 0x01)         */
#define USB_CUR_BUF_IN_BUF_EP4_Pos        (20UL)                    /*!< USB CUR_BUF: IN_BUF_EP4 (Bit 20)                      */
#define USB_CUR_BUF_IN_BUF_EP4_Msk        (0x100000UL)              /*!< USB CUR_BUF: IN_BUF_EP4 (Bitfield-Mask: 0x01)         */
#define USB_CUR_BUF_IN_BUF_EP5_Pos        (21UL)                    /*!< USB CUR_BUF: IN_BUF_EP5 (Bit 21)                      */
#define USB_CUR_BUF_IN_BUF_EP5_Msk        (0x200000UL)              /*!< USB CUR_BUF: IN_BUF_EP5 (Bitfield-Mask: 0x01)         */
#define USB_CUR_BUF_IN_BUF_EP6_Pos        (22UL)                    /*!< USB CUR_BUF: IN_BUF_EP6 (Bit 22)                      */
#define USB_CUR_BUF_IN_BUF_EP6_Msk        (0x400000UL)              /*!< USB CUR_BUF: IN_BUF_EP6 (Bitfield-Mask: 0x01)         */
#define USB_CUR_BUF_IN_BUF_EP7_Pos        (23UL)                    /*!< USB CUR_BUF: IN_BUF_EP7 (Bit 23)                      */
#define USB_CUR_BUF_IN_BUF_EP7_Msk        (0x800000UL)              /*!< USB CUR_BUF: IN_BUF_EP7 (Bitfield-Mask: 0x01)         */
#define USB_CUR_BUF_IN_BUF_EP8_Pos        (24UL)                    /*!< USB CUR_BUF: IN_BUF_EP8 (Bit 24)                      */
#define USB_CUR_BUF_IN_BUF_EP8_Msk        (0x1000000UL)             /*!< USB CUR_BUF: IN_BUF_EP8 (Bitfield-Mask: 0x01)         */
#define USB_CUR_BUF_IN_BUF_EP9_Pos        (25UL)                    /*!< USB CUR_BUF: IN_BUF_EP9 (Bit 25)                      */
#define USB_CUR_BUF_IN_BUF_EP9_Msk        (0x2000000UL)             /*!< USB CUR_BUF: IN_BUF_EP9 (Bitfield-Mask: 0x01)         */
#define USB_CUR_BUF_IN_BUF_EP10_Pos       (26UL)                    /*!< USB CUR_BUF: IN_BUF_EP10 (Bit 26)                     */
#define USB_CUR_BUF_IN_BUF_EP10_Msk       (0x4000000UL)             /*!< USB CUR_BUF: IN_BUF_EP10 (Bitfield-Mask: 0x01)        */
#define USB_CUR_BUF_IN_BUF_EP11_Pos       (27UL)                    /*!< USB CUR_BUF: IN_BUF_EP11 (Bit 27)                     */
#define USB_CUR_BUF_IN_BUF_EP11_Msk       (0x8000000UL)             /*!< USB CUR_BUF: IN_BUF_EP11 (Bitfield-Mask: 0x01)        */
#define USB_CUR_BUF_IN_BUF_EP12_Pos       (28UL)                    /*!< USB CUR_BUF: IN_BUF_EP12 (Bit 28)                     */
#define USB_CUR_BUF_IN_BUF_EP12_Msk       (0x10000000UL)            /*!< USB CUR_BUF: IN_BUF_EP12 (Bitfield-Mask: 0x01)        */
#define USB_CUR_BUF_IN_BUF_EP13_Pos       (29UL)                    /*!< USB CUR_BUF: IN_BUF_EP13 (Bit 29)                     */
#define USB_CUR_BUF_IN_BUF_EP13_Msk       (0x20000000UL)            /*!< USB CUR_BUF: IN_BUF_EP13 (Bitfield-Mask: 0x01)        */
#define USB_CUR_BUF_IN_BUF_EP14_Pos       (30UL)                    /*!< USB CUR_BUF: IN_BUF_EP14 (Bit 30)                     */
#define USB_CUR_BUF_IN_BUF_EP14_Msk       (0x40000000UL)            /*!< USB CUR_BUF: IN_BUF_EP14 (Bitfield-Mask: 0x01)        */
#define USB_CUR_BUF_IN_BUF_EP15_Pos       (31UL)                    /*!< USB CUR_BUF: IN_BUF_EP15 (Bit 31)                     */
#define USB_CUR_BUF_IN_BUF_EP15_Msk       (0x80000000UL)            /*!< USB CUR_BUF: IN_BUF_EP15 (Bitfield-Mask: 0x01)        */
/* =======================================================  IN_OWNER  ======================================================== */
#define USB_IN_OWNER_BUF0_EP0_Pos         (0UL)                     /*!< USB IN_OWNER: BUF0_EP0 (Bit 0)                        */
#define USB_IN_OWNER_BUF0_EP0_Msk         (0x1UL)                   /*!< USB IN_OWNER: BUF0_EP0 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF0_EP1_Pos         (1UL)                     /*!< USB IN_OWNER: BUF0_EP1 (Bit 1)                        */
#define USB_IN_OWNER_BUF0_EP1_Msk         (0x2UL)                   /*!< USB IN_OWNER: BUF0_EP1 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF0_EP2_Pos         (2UL)                     /*!< USB IN_OWNER: BUF0_EP2 (Bit 2)                        */
#define USB_IN_OWNER_BUF0_EP2_Msk         (0x4UL)                   /*!< USB IN_OWNER: BUF0_EP2 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF0_EP3_Pos         (3UL)                     /*!< USB IN_OWNER: BUF0_EP3 (Bit 3)                        */
#define USB_IN_OWNER_BUF0_EP3_Msk         (0x8UL)                   /*!< USB IN_OWNER: BUF0_EP3 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF0_EP4_Pos         (4UL)                     /*!< USB IN_OWNER: BUF0_EP4 (Bit 4)                        */
#define USB_IN_OWNER_BUF0_EP4_Msk         (0x10UL)                  /*!< USB IN_OWNER: BUF0_EP4 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF0_EP5_Pos         (5UL)                     /*!< USB IN_OWNER: BUF0_EP5 (Bit 5)                        */
#define USB_IN_OWNER_BUF0_EP5_Msk         (0x20UL)                  /*!< USB IN_OWNER: BUF0_EP5 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF0_EP6_Pos         (6UL)                     /*!< USB IN_OWNER: BUF0_EP6 (Bit 6)                        */
#define USB_IN_OWNER_BUF0_EP6_Msk         (0x40UL)                  /*!< USB IN_OWNER: BUF0_EP6 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF0_EP7_Pos         (7UL)                     /*!< USB IN_OWNER: BUF0_EP7 (Bit 7)                        */
#define USB_IN_OWNER_BUF0_EP7_Msk         (0x80UL)                  /*!< USB IN_OWNER: BUF0_EP7 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF0_EP8_Pos         (8UL)                     /*!< USB IN_OWNER: BUF0_EP8 (Bit 8)                        */
#define USB_IN_OWNER_BUF0_EP8_Msk         (0x100UL)                 /*!< USB IN_OWNER: BUF0_EP8 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF0_EP9_Pos         (9UL)                     /*!< USB IN_OWNER: BUF0_EP9 (Bit 9)                        */
#define USB_IN_OWNER_BUF0_EP9_Msk         (0x200UL)                 /*!< USB IN_OWNER: BUF0_EP9 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF0_EP10_Pos        (10UL)                    /*!< USB IN_OWNER: BUF0_EP10 (Bit 10)                      */
#define USB_IN_OWNER_BUF0_EP10_Msk        (0x400UL)                 /*!< USB IN_OWNER: BUF0_EP10 (Bitfield-Mask: 0x01)         */
#define USB_IN_OWNER_BUF0_EP11_Pos        (11UL)                    /*!< USB IN_OWNER: BUF0_EP11 (Bit 11)                      */
#define USB_IN_OWNER_BUF0_EP11_Msk        (0x800UL)                 /*!< USB IN_OWNER: BUF0_EP11 (Bitfield-Mask: 0x01)         */
#define USB_IN_OWNER_BUF0_EP12_Pos        (12UL)                    /*!< USB IN_OWNER: BUF0_EP12 (Bit 12)                      */
#define USB_IN_OWNER_BUF0_EP12_Msk        (0x1000UL)                /*!< USB IN_OWNER: BUF0_EP12 (Bitfield-Mask: 0x01)         */
#define USB_IN_OWNER_BUF0_EP13_Pos        (13UL)                    /*!< USB IN_OWNER: BUF0_EP13 (Bit 13)                      */
#define USB_IN_OWNER_BUF0_EP13_Msk        (0x2000UL)                /*!< USB IN_OWNER: BUF0_EP13 (Bitfield-Mask: 0x01)         */
#define USB_IN_OWNER_BUF0_EP14_Pos        (14UL)                    /*!< USB IN_OWNER: BUF0_EP14 (Bit 14)                      */
#define USB_IN_OWNER_BUF0_EP14_Msk        (0x4000UL)                /*!< USB IN_OWNER: BUF0_EP14 (Bitfield-Mask: 0x01)         */
#define USB_IN_OWNER_BUF0_EP15_Pos        (15UL)                    /*!< USB IN_OWNER: BUF0_EP15 (Bit 15)                      */
#define USB_IN_OWNER_BUF0_EP15_Msk        (0x8000UL)                /*!< USB IN_OWNER: BUF0_EP15 (Bitfield-Mask: 0x01)         */
#define USB_IN_OWNER_BUF1_EP0_Pos         (16UL)                    /*!< USB IN_OWNER: BUF1_EP0 (Bit 16)                       */
#define USB_IN_OWNER_BUF1_EP0_Msk         (0x10000UL)               /*!< USB IN_OWNER: BUF1_EP0 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF1_EP1_Pos         (17UL)                    /*!< USB IN_OWNER: BUF1_EP1 (Bit 17)                       */
#define USB_IN_OWNER_BUF1_EP1_Msk         (0x20000UL)               /*!< USB IN_OWNER: BUF1_EP1 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF1_EP2_Pos         (18UL)                    /*!< USB IN_OWNER: BUF1_EP2 (Bit 18)                       */
#define USB_IN_OWNER_BUF1_EP2_Msk         (0x40000UL)               /*!< USB IN_OWNER: BUF1_EP2 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF1_EP3_Pos         (19UL)                    /*!< USB IN_OWNER: BUF1_EP3 (Bit 19)                       */
#define USB_IN_OWNER_BUF1_EP3_Msk         (0x80000UL)               /*!< USB IN_OWNER: BUF1_EP3 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF1_EP4_Pos         (20UL)                    /*!< USB IN_OWNER: BUF1_EP4 (Bit 20)                       */
#define USB_IN_OWNER_BUF1_EP4_Msk         (0x100000UL)              /*!< USB IN_OWNER: BUF1_EP4 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF1_EP5_Pos         (21UL)                    /*!< USB IN_OWNER: BUF1_EP5 (Bit 21)                       */
#define USB_IN_OWNER_BUF1_EP5_Msk         (0x200000UL)              /*!< USB IN_OWNER: BUF1_EP5 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF1_EP6_Pos         (22UL)                    /*!< USB IN_OWNER: BUF1_EP6 (Bit 22)                       */
#define USB_IN_OWNER_BUF1_EP6_Msk         (0x400000UL)              /*!< USB IN_OWNER: BUF1_EP6 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF1_EP7_Pos         (23UL)                    /*!< USB IN_OWNER: BUF1_EP7 (Bit 23)                       */
#define USB_IN_OWNER_BUF1_EP7_Msk         (0x800000UL)              /*!< USB IN_OWNER: BUF1_EP7 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF1_EP8_Pos         (24UL)                    /*!< USB IN_OWNER: BUF1_EP8 (Bit 24)                       */
#define USB_IN_OWNER_BUF1_EP8_Msk         (0x1000000UL)             /*!< USB IN_OWNER: BUF1_EP8 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF1_EP9_Pos         (25UL)                    /*!< USB IN_OWNER: BUF1_EP9 (Bit 25)                       */
#define USB_IN_OWNER_BUF1_EP9_Msk         (0x2000000UL)             /*!< USB IN_OWNER: BUF1_EP9 (Bitfield-Mask: 0x01)          */
#define USB_IN_OWNER_BUF1_EP10_Pos        (26UL)                    /*!< USB IN_OWNER: BUF1_EP10 (Bit 26)                      */
#define USB_IN_OWNER_BUF1_EP10_Msk        (0x4000000UL)             /*!< USB IN_OWNER: BUF1_EP10 (Bitfield-Mask: 0x01)         */
#define USB_IN_OWNER_BUF1_EP11_Pos        (27UL)                    /*!< USB IN_OWNER: BUF1_EP11 (Bit 27)                      */
#define USB_IN_OWNER_BUF1_EP11_Msk        (0x8000000UL)             /*!< USB IN_OWNER: BUF1_EP11 (Bitfield-Mask: 0x01)         */
#define USB_IN_OWNER_BUF1_EP12_Pos        (28UL)                    /*!< USB IN_OWNER: BUF1_EP12 (Bit 28)                      */
#define USB_IN_OWNER_BUF1_EP12_Msk        (0x10000000UL)            /*!< USB IN_OWNER: BUF1_EP12 (Bitfield-Mask: 0x01)         */
#define USB_IN_OWNER_BUF1_EP13_Pos        (29UL)                    /*!< USB IN_OWNER: BUF1_EP13 (Bit 29)                      */
#define USB_IN_OWNER_BUF1_EP13_Msk        (0x20000000UL)            /*!< USB IN_OWNER: BUF1_EP13 (Bitfield-Mask: 0x01)         */
#define USB_IN_OWNER_BUF1_EP14_Pos        (30UL)                    /*!< USB IN_OWNER: BUF1_EP14 (Bit 30)                      */
#define USB_IN_OWNER_BUF1_EP14_Msk        (0x40000000UL)            /*!< USB IN_OWNER: BUF1_EP14 (Bitfield-Mask: 0x01)         */
#define USB_IN_OWNER_BUF1_EP15_Pos        (31UL)                    /*!< USB IN_OWNER: BUF1_EP15 (Bit 31)                      */
#define USB_IN_OWNER_BUF1_EP15_Msk        (0x80000000UL)            /*!< USB IN_OWNER: BUF1_EP15 (Bitfield-Mask: 0x01)         */
/* =======================================================  OUT_OWNER  ======================================================= */
#define USB_OUT_OWNER_BUF0_EP0_Pos        (0UL)                     /*!< USB OUT_OWNER: BUF0_EP0 (Bit 0)                       */
#define USB_OUT_OWNER_BUF0_EP0_Msk        (0x1UL)                   /*!< USB OUT_OWNER: BUF0_EP0 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF0_EP1_Pos        (1UL)                     /*!< USB OUT_OWNER: BUF0_EP1 (Bit 1)                       */
#define USB_OUT_OWNER_BUF0_EP1_Msk        (0x2UL)                   /*!< USB OUT_OWNER: BUF0_EP1 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF0_EP2_Pos        (2UL)                     /*!< USB OUT_OWNER: BUF0_EP2 (Bit 2)                       */
#define USB_OUT_OWNER_BUF0_EP2_Msk        (0x4UL)                   /*!< USB OUT_OWNER: BUF0_EP2 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF0_EP3_Pos        (3UL)                     /*!< USB OUT_OWNER: BUF0_EP3 (Bit 3)                       */
#define USB_OUT_OWNER_BUF0_EP3_Msk        (0x8UL)                   /*!< USB OUT_OWNER: BUF0_EP3 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF0_EP4_Pos        (4UL)                     /*!< USB OUT_OWNER: BUF0_EP4 (Bit 4)                       */
#define USB_OUT_OWNER_BUF0_EP4_Msk        (0x10UL)                  /*!< USB OUT_OWNER: BUF0_EP4 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF0_EP5_Pos        (5UL)                     /*!< USB OUT_OWNER: BUF0_EP5 (Bit 5)                       */
#define USB_OUT_OWNER_BUF0_EP5_Msk        (0x20UL)                  /*!< USB OUT_OWNER: BUF0_EP5 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF0_EP6_Pos        (6UL)                     /*!< USB OUT_OWNER: BUF0_EP6 (Bit 6)                       */
#define USB_OUT_OWNER_BUF0_EP6_Msk        (0x40UL)                  /*!< USB OUT_OWNER: BUF0_EP6 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF0_EP7_Pos        (7UL)                     /*!< USB OUT_OWNER: BUF0_EP7 (Bit 7)                       */
#define USB_OUT_OWNER_BUF0_EP7_Msk        (0x80UL)                  /*!< USB OUT_OWNER: BUF0_EP7 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF0_EP8_Pos        (8UL)                     /*!< USB OUT_OWNER: BUF0_EP8 (Bit 8)                       */
#define USB_OUT_OWNER_BUF0_EP8_Msk        (0x100UL)                 /*!< USB OUT_OWNER: BUF0_EP8 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF0_EP9_Pos        (9UL)                     /*!< USB OUT_OWNER: BUF0_EP9 (Bit 9)                       */
#define USB_OUT_OWNER_BUF0_EP9_Msk        (0x200UL)                 /*!< USB OUT_OWNER: BUF0_EP9 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF0_EP10_Pos       (10UL)                    /*!< USB OUT_OWNER: BUF0_EP10 (Bit 10)                     */
#define USB_OUT_OWNER_BUF0_EP10_Msk       (0x400UL)                 /*!< USB OUT_OWNER: BUF0_EP10 (Bitfield-Mask: 0x01)        */
#define USB_OUT_OWNER_BUF0_EP11_Pos       (11UL)                    /*!< USB OUT_OWNER: BUF0_EP11 (Bit 11)                     */
#define USB_OUT_OWNER_BUF0_EP11_Msk       (0x800UL)                 /*!< USB OUT_OWNER: BUF0_EP11 (Bitfield-Mask: 0x01)        */
#define USB_OUT_OWNER_BUF0_EP12_Pos       (12UL)                    /*!< USB OUT_OWNER: BUF0_EP12 (Bit 12)                     */
#define USB_OUT_OWNER_BUF0_EP12_Msk       (0x1000UL)                /*!< USB OUT_OWNER: BUF0_EP12 (Bitfield-Mask: 0x01)        */
#define USB_OUT_OWNER_BUF0_EP13_Pos       (13UL)                    /*!< USB OUT_OWNER: BUF0_EP13 (Bit 13)                     */
#define USB_OUT_OWNER_BUF0_EP13_Msk       (0x2000UL)                /*!< USB OUT_OWNER: BUF0_EP13 (Bitfield-Mask: 0x01)        */
#define USB_OUT_OWNER_BUF0_EP14_Pos       (14UL)                    /*!< USB OUT_OWNER: BUF0_EP14 (Bit 14)                     */
#define USB_OUT_OWNER_BUF0_EP14_Msk       (0x4000UL)                /*!< USB OUT_OWNER: BUF0_EP14 (Bitfield-Mask: 0x01)        */
#define USB_OUT_OWNER_BUF0_EP15_Pos       (15UL)                    /*!< USB OUT_OWNER: BUF0_EP15 (Bit 15)                     */
#define USB_OUT_OWNER_BUF0_EP15_Msk       (0x8000UL)                /*!< USB OUT_OWNER: BUF0_EP15 (Bitfield-Mask: 0x01)        */
#define USB_OUT_OWNER_BUF1_EP0_Pos        (16UL)                    /*!< USB OUT_OWNER: BUF1_EP0 (Bit 16)                      */
#define USB_OUT_OWNER_BUF1_EP0_Msk        (0x10000UL)               /*!< USB OUT_OWNER: BUF1_EP0 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF1_EP1_Pos        (17UL)                    /*!< USB OUT_OWNER: BUF1_EP1 (Bit 17)                      */
#define USB_OUT_OWNER_BUF1_EP1_Msk        (0x20000UL)               /*!< USB OUT_OWNER: BUF1_EP1 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF1_EP2_Pos        (18UL)                    /*!< USB OUT_OWNER: BUF1_EP2 (Bit 18)                      */
#define USB_OUT_OWNER_BUF1_EP2_Msk        (0x40000UL)               /*!< USB OUT_OWNER: BUF1_EP2 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF1_EP3_Pos        (19UL)                    /*!< USB OUT_OWNER: BUF1_EP3 (Bit 19)                      */
#define USB_OUT_OWNER_BUF1_EP3_Msk        (0x80000UL)               /*!< USB OUT_OWNER: BUF1_EP3 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF1_EP4_Pos        (20UL)                    /*!< USB OUT_OWNER: BUF1_EP4 (Bit 20)                      */
#define USB_OUT_OWNER_BUF1_EP4_Msk        (0x100000UL)              /*!< USB OUT_OWNER: BUF1_EP4 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF1_EP5_Pos        (21UL)                    /*!< USB OUT_OWNER: BUF1_EP5 (Bit 21)                      */
#define USB_OUT_OWNER_BUF1_EP5_Msk        (0x200000UL)              /*!< USB OUT_OWNER: BUF1_EP5 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF1_EP6_Pos        (22UL)                    /*!< USB OUT_OWNER: BUF1_EP6 (Bit 22)                      */
#define USB_OUT_OWNER_BUF1_EP6_Msk        (0x400000UL)              /*!< USB OUT_OWNER: BUF1_EP6 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF1_EP7_Pos        (23UL)                    /*!< USB OUT_OWNER: BUF1_EP7 (Bit 23)                      */
#define USB_OUT_OWNER_BUF1_EP7_Msk        (0x800000UL)              /*!< USB OUT_OWNER: BUF1_EP7 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF1_EP8_Pos        (24UL)                    /*!< USB OUT_OWNER: BUF1_EP8 (Bit 24)                      */
#define USB_OUT_OWNER_BUF1_EP8_Msk        (0x1000000UL)             /*!< USB OUT_OWNER: BUF1_EP8 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF1_EP9_Pos        (25UL)                    /*!< USB OUT_OWNER: BUF1_EP9 (Bit 25)                      */
#define USB_OUT_OWNER_BUF1_EP9_Msk        (0x2000000UL)             /*!< USB OUT_OWNER: BUF1_EP9 (Bitfield-Mask: 0x01)         */
#define USB_OUT_OWNER_BUF1_EP10_Pos       (26UL)                    /*!< USB OUT_OWNER: BUF1_EP10 (Bit 26)                     */
#define USB_OUT_OWNER_BUF1_EP10_Msk       (0x4000000UL)             /*!< USB OUT_OWNER: BUF1_EP10 (Bitfield-Mask: 0x01)        */
#define USB_OUT_OWNER_BUF1_EP11_Pos       (27UL)                    /*!< USB OUT_OWNER: BUF1_EP11 (Bit 27)                     */
#define USB_OUT_OWNER_BUF1_EP11_Msk       (0x8000000UL)             /*!< USB OUT_OWNER: BUF1_EP11 (Bitfield-Mask: 0x01)        */
#define USB_OUT_OWNER_BUF1_EP12_Pos       (28UL)                    /*!< USB OUT_OWNER: BUF1_EP12 (Bit 28)                     */
#define USB_OUT_OWNER_BUF1_EP12_Msk       (0x10000000UL)            /*!< USB OUT_OWNER: BUF1_EP12 (Bitfield-Mask: 0x01)        */
#define USB_OUT_OWNER_BUF1_EP13_Pos       (29UL)                    /*!< USB OUT_OWNER: BUF1_EP13 (Bit 29)                     */
#define USB_OUT_OWNER_BUF1_EP13_Msk       (0x20000000UL)            /*!< USB OUT_OWNER: BUF1_EP13 (Bitfield-Mask: 0x01)        */
#define USB_OUT_OWNER_BUF1_EP14_Pos       (30UL)                    /*!< USB OUT_OWNER: BUF1_EP14 (Bit 30)                     */
#define USB_OUT_OWNER_BUF1_EP14_Msk       (0x40000000UL)            /*!< USB OUT_OWNER: BUF1_EP14 (Bitfield-Mask: 0x01)        */
#define USB_OUT_OWNER_BUF1_EP15_Pos       (31UL)                    /*!< USB OUT_OWNER: BUF1_EP15 (Bit 31)                     */
#define USB_OUT_OWNER_BUF1_EP15_Msk       (0x80000000UL)            /*!< USB OUT_OWNER: BUF1_EP15 (Bitfield-Mask: 0x01)        */
/* ========================================================  IN_INT  ========================================================= */
#define USB_IN_INT_INBAV_EP0_Pos          (0UL)                     /*!< USB IN_INT: INBAV_EP0 (Bit 0)                         */
#define USB_IN_INT_INBAV_EP0_Msk          (0x1UL)                   /*!< USB IN_INT: INBAV_EP0 (Bitfield-Mask: 0x01)           */
#define USB_IN_INT_INBAV_EP1_Pos          (1UL)                     /*!< USB IN_INT: INBAV_EP1 (Bit 1)                         */
#define USB_IN_INT_INBAV_EP1_Msk          (0x2UL)                   /*!< USB IN_INT: INBAV_EP1 (Bitfield-Mask: 0x01)           */
#define USB_IN_INT_INBAV_EP2_Pos          (2UL)                     /*!< USB IN_INT: INBAV_EP2 (Bit 2)                         */
#define USB_IN_INT_INBAV_EP2_Msk          (0x4UL)                   /*!< USB IN_INT: INBAV_EP2 (Bitfield-Mask: 0x01)           */
#define USB_IN_INT_INBAV_EP3_Pos          (3UL)                     /*!< USB IN_INT: INBAV_EP3 (Bit 3)                         */
#define USB_IN_INT_INBAV_EP3_Msk          (0x8UL)                   /*!< USB IN_INT: INBAV_EP3 (Bitfield-Mask: 0x01)           */
#define USB_IN_INT_INBAV_EP4_Pos          (4UL)                     /*!< USB IN_INT: INBAV_EP4 (Bit 4)                         */
#define USB_IN_INT_INBAV_EP4_Msk          (0x10UL)                  /*!< USB IN_INT: INBAV_EP4 (Bitfield-Mask: 0x01)           */
#define USB_IN_INT_INBAV_EP5_Pos          (5UL)                     /*!< USB IN_INT: INBAV_EP5 (Bit 5)                         */
#define USB_IN_INT_INBAV_EP5_Msk          (0x20UL)                  /*!< USB IN_INT: INBAV_EP5 (Bitfield-Mask: 0x01)           */
#define USB_IN_INT_INBAV_EP6_Pos          (6UL)                     /*!< USB IN_INT: INBAV_EP6 (Bit 6)                         */
#define USB_IN_INT_INBAV_EP6_Msk          (0x40UL)                  /*!< USB IN_INT: INBAV_EP6 (Bitfield-Mask: 0x01)           */
#define USB_IN_INT_INBAV_EP7_Pos          (7UL)                     /*!< USB IN_INT: INBAV_EP7 (Bit 7)                         */
#define USB_IN_INT_INBAV_EP7_Msk          (0x80UL)                  /*!< USB IN_INT: INBAV_EP7 (Bitfield-Mask: 0x01)           */
#define USB_IN_INT_INBAV_EP8_Pos          (8UL)                     /*!< USB IN_INT: INBAV_EP8 (Bit 8)                         */
#define USB_IN_INT_INBAV_EP8_Msk          (0x100UL)                 /*!< USB IN_INT: INBAV_EP8 (Bitfield-Mask: 0x01)           */
#define USB_IN_INT_INBAV_EP9_Pos          (9UL)                     /*!< USB IN_INT: INBAV_EP9 (Bit 9)                         */
#define USB_IN_INT_INBAV_EP9_Msk          (0x200UL)                 /*!< USB IN_INT: INBAV_EP9 (Bitfield-Mask: 0x01)           */
#define USB_IN_INT_INBAV_EP10_Pos         (10UL)                    /*!< USB IN_INT: INBAV_EP10 (Bit 10)                       */
#define USB_IN_INT_INBAV_EP10_Msk         (0x400UL)                 /*!< USB IN_INT: INBAV_EP10 (Bitfield-Mask: 0x01)          */
#define USB_IN_INT_INBAV_EP11_Pos         (11UL)                    /*!< USB IN_INT: INBAV_EP11 (Bit 11)                       */
#define USB_IN_INT_INBAV_EP11_Msk         (0x800UL)                 /*!< USB IN_INT: INBAV_EP11 (Bitfield-Mask: 0x01)          */
#define USB_IN_INT_INBAV_EP12_Pos         (12UL)                    /*!< USB IN_INT: INBAV_EP12 (Bit 12)                       */
#define USB_IN_INT_INBAV_EP12_Msk         (0x1000UL)                /*!< USB IN_INT: INBAV_EP12 (Bitfield-Mask: 0x01)          */
#define USB_IN_INT_INBAV_EP13_Pos         (13UL)                    /*!< USB IN_INT: INBAV_EP13 (Bit 13)                       */
#define USB_IN_INT_INBAV_EP13_Msk         (0x2000UL)                /*!< USB IN_INT: INBAV_EP13 (Bitfield-Mask: 0x01)          */
#define USB_IN_INT_INBAV_EP14_Pos         (14UL)                    /*!< USB IN_INT: INBAV_EP14 (Bit 14)                       */
#define USB_IN_INT_INBAV_EP14_Msk         (0x4000UL)                /*!< USB IN_INT: INBAV_EP14 (Bitfield-Mask: 0x01)          */
#define USB_IN_INT_INBAV_EP15_Pos         (15UL)                    /*!< USB IN_INT: INBAV_EP15 (Bit 15)                       */
#define USB_IN_INT_INBAV_EP15_Msk         (0x8000UL)                /*!< USB IN_INT: INBAV_EP15 (Bitfield-Mask: 0x01)          */
/* ========================================================  OUT_INT  ======================================================== */
#define USB_OUT_INT_OUTDAV_EP0_Pos        (0UL)                     /*!< USB OUT_INT: OUTDAV_EP0 (Bit 0)                       */
#define USB_OUT_INT_OUTDAV_EP0_Msk        (0x1UL)                   /*!< USB OUT_INT: OUTDAV_EP0 (Bitfield-Mask: 0x01)         */
#define USB_OUT_INT_OUTDAV_EP1_Pos        (1UL)                     /*!< USB OUT_INT: OUTDAV_EP1 (Bit 1)                       */
#define USB_OUT_INT_OUTDAV_EP1_Msk        (0x2UL)                   /*!< USB OUT_INT: OUTDAV_EP1 (Bitfield-Mask: 0x01)         */
#define USB_OUT_INT_OUTDAV_EP2_Pos        (2UL)                     /*!< USB OUT_INT: OUTDAV_EP2 (Bit 2)                       */
#define USB_OUT_INT_OUTDAV_EP2_Msk        (0x4UL)                   /*!< USB OUT_INT: OUTDAV_EP2 (Bitfield-Mask: 0x01)         */
#define USB_OUT_INT_OUTDAV_EP3_Pos        (3UL)                     /*!< USB OUT_INT: OUTDAV_EP3 (Bit 3)                       */
#define USB_OUT_INT_OUTDAV_EP3_Msk        (0x8UL)                   /*!< USB OUT_INT: OUTDAV_EP3 (Bitfield-Mask: 0x01)         */
#define USB_OUT_INT_OUTDAV_EP4_Pos        (4UL)                     /*!< USB OUT_INT: OUTDAV_EP4 (Bit 4)                       */
#define USB_OUT_INT_OUTDAV_EP4_Msk        (0x10UL)                  /*!< USB OUT_INT: OUTDAV_EP4 (Bitfield-Mask: 0x01)         */
#define USB_OUT_INT_OUTDAV_EP5_Pos        (5UL)                     /*!< USB OUT_INT: OUTDAV_EP5 (Bit 5)                       */
#define USB_OUT_INT_OUTDAV_EP5_Msk        (0x20UL)                  /*!< USB OUT_INT: OUTDAV_EP5 (Bitfield-Mask: 0x01)         */
#define USB_OUT_INT_OUTDAV_EP6_Pos        (6UL)                     /*!< USB OUT_INT: OUTDAV_EP6 (Bit 6)                       */
#define USB_OUT_INT_OUTDAV_EP6_Msk        (0x40UL)                  /*!< USB OUT_INT: OUTDAV_EP6 (Bitfield-Mask: 0x01)         */
#define USB_OUT_INT_OUTDAV_EP7_Pos        (7UL)                     /*!< USB OUT_INT: OUTDAV_EP7 (Bit 7)                       */
#define USB_OUT_INT_OUTDAV_EP7_Msk        (0x80UL)                  /*!< USB OUT_INT: OUTDAV_EP7 (Bitfield-Mask: 0x01)         */
#define USB_OUT_INT_OUTDAV_EP8_Pos        (8UL)                     /*!< USB OUT_INT: OUTDAV_EP8 (Bit 8)                       */
#define USB_OUT_INT_OUTDAV_EP8_Msk        (0x100UL)                 /*!< USB OUT_INT: OUTDAV_EP8 (Bitfield-Mask: 0x01)         */
#define USB_OUT_INT_OUTDAV_EP9_Pos        (9UL)                     /*!< USB OUT_INT: OUTDAV_EP9 (Bit 9)                       */
#define USB_OUT_INT_OUTDAV_EP9_Msk        (0x200UL)                 /*!< USB OUT_INT: OUTDAV_EP9 (Bitfield-Mask: 0x01)         */
#define USB_OUT_INT_OUTDAV_EP10_Pos       (10UL)                    /*!< USB OUT_INT: OUTDAV_EP10 (Bit 10)                     */
#define USB_OUT_INT_OUTDAV_EP10_Msk       (0x400UL)                 /*!< USB OUT_INT: OUTDAV_EP10 (Bitfield-Mask: 0x01)        */
#define USB_OUT_INT_OUTDAV_EP11_Pos       (11UL)                    /*!< USB OUT_INT: OUTDAV_EP11 (Bit 11)                     */
#define USB_OUT_INT_OUTDAV_EP11_Msk       (0x800UL)                 /*!< USB OUT_INT: OUTDAV_EP11 (Bitfield-Mask: 0x01)        */
#define USB_OUT_INT_OUTDAV_EP12_Pos       (12UL)                    /*!< USB OUT_INT: OUTDAV_EP12 (Bit 12)                     */
#define USB_OUT_INT_OUTDAV_EP12_Msk       (0x1000UL)                /*!< USB OUT_INT: OUTDAV_EP12 (Bitfield-Mask: 0x01)        */
#define USB_OUT_INT_OUTDAV_EP13_Pos       (13UL)                    /*!< USB OUT_INT: OUTDAV_EP13 (Bit 13)                     */
#define USB_OUT_INT_OUTDAV_EP13_Msk       (0x2000UL)                /*!< USB OUT_INT: OUTDAV_EP13 (Bitfield-Mask: 0x01)        */
#define USB_OUT_INT_OUTDAV_EP14_Pos       (14UL)                    /*!< USB OUT_INT: OUTDAV_EP14 (Bit 14)                     */
#define USB_OUT_INT_OUTDAV_EP14_Msk       (0x4000UL)                /*!< USB OUT_INT: OUTDAV_EP14 (Bitfield-Mask: 0x01)        */
#define USB_OUT_INT_OUTDAV_EP15_Pos       (15UL)                    /*!< USB OUT_INT: OUTDAV_EP15 (Bit 15)                     */
#define USB_OUT_INT_OUTDAV_EP15_Msk       (0x8000UL)                /*!< USB OUT_INT: OUTDAV_EP15 (Bitfield-Mask: 0x01)        */
/* ========================================================  NAK_INT  ======================================================== */
#define USB_NAK_INT_NAK_EP0_Pos           (0UL)                     /*!< USB NAK_INT: NAK_EP0 (Bit 0)                          */
#define USB_NAK_INT_NAK_EP0_Msk           (0x1UL)                   /*!< USB NAK_INT: NAK_EP0 (Bitfield-Mask: 0x01)            */
#define USB_NAK_INT_NAK_EP1_Pos           (1UL)                     /*!< USB NAK_INT: NAK_EP1 (Bit 1)                          */
#define USB_NAK_INT_NAK_EP1_Msk           (0x2UL)                   /*!< USB NAK_INT: NAK_EP1 (Bitfield-Mask: 0x01)            */
#define USB_NAK_INT_NAK_EP2_Pos           (2UL)                     /*!< USB NAK_INT: NAK_EP2 (Bit 2)                          */
#define USB_NAK_INT_NAK_EP2_Msk           (0x4UL)                   /*!< USB NAK_INT: NAK_EP2 (Bitfield-Mask: 0x01)            */
#define USB_NAK_INT_NAK_EP3_Pos           (3UL)                     /*!< USB NAK_INT: NAK_EP3 (Bit 3)                          */
#define USB_NAK_INT_NAK_EP3_Msk           (0x8UL)                   /*!< USB NAK_INT: NAK_EP3 (Bitfield-Mask: 0x01)            */
#define USB_NAK_INT_NAK_EP4_Pos           (4UL)                     /*!< USB NAK_INT: NAK_EP4 (Bit 4)                          */
#define USB_NAK_INT_NAK_EP4_Msk           (0x10UL)                  /*!< USB NAK_INT: NAK_EP4 (Bitfield-Mask: 0x01)            */
#define USB_NAK_INT_NAK_EP5_Pos           (5UL)                     /*!< USB NAK_INT: NAK_EP5 (Bit 5)                          */
#define USB_NAK_INT_NAK_EP5_Msk           (0x20UL)                  /*!< USB NAK_INT: NAK_EP5 (Bitfield-Mask: 0x01)            */
#define USB_NAK_INT_NAK_EP6_Pos           (6UL)                     /*!< USB NAK_INT: NAK_EP6 (Bit 6)                          */
#define USB_NAK_INT_NAK_EP6_Msk           (0x40UL)                  /*!< USB NAK_INT: NAK_EP6 (Bitfield-Mask: 0x01)            */
#define USB_NAK_INT_NAK_EP7_Pos           (7UL)                     /*!< USB NAK_INT: NAK_EP7 (Bit 7)                          */
#define USB_NAK_INT_NAK_EP7_Msk           (0x80UL)                  /*!< USB NAK_INT: NAK_EP7 (Bitfield-Mask: 0x01)            */
#define USB_NAK_INT_NAK_EP8_Pos           (8UL)                     /*!< USB NAK_INT: NAK_EP8 (Bit 8)                          */
#define USB_NAK_INT_NAK_EP8_Msk           (0x100UL)                 /*!< USB NAK_INT: NAK_EP8 (Bitfield-Mask: 0x01)            */
#define USB_NAK_INT_NAK_EP9_Pos           (9UL)                     /*!< USB NAK_INT: NAK_EP9 (Bit 9)                          */
#define USB_NAK_INT_NAK_EP9_Msk           (0x200UL)                 /*!< USB NAK_INT: NAK_EP9 (Bitfield-Mask: 0x01)            */
#define USB_NAK_INT_NAK_EP10_Pos          (10UL)                    /*!< USB NAK_INT: NAK_EP10 (Bit 10)                        */
#define USB_NAK_INT_NAK_EP10_Msk          (0x400UL)                 /*!< USB NAK_INT: NAK_EP10 (Bitfield-Mask: 0x01)           */
#define USB_NAK_INT_NAK_EP11_Pos          (11UL)                    /*!< USB NAK_INT: NAK_EP11 (Bit 11)                        */
#define USB_NAK_INT_NAK_EP11_Msk          (0x800UL)                 /*!< USB NAK_INT: NAK_EP11 (Bitfield-Mask: 0x01)           */
#define USB_NAK_INT_NAK_EP12_Pos          (12UL)                    /*!< USB NAK_INT: NAK_EP12 (Bit 12)                        */
#define USB_NAK_INT_NAK_EP12_Msk          (0x1000UL)                /*!< USB NAK_INT: NAK_EP12 (Bitfield-Mask: 0x01)           */
#define USB_NAK_INT_NAK_EP13_Pos          (13UL)                    /*!< USB NAK_INT: NAK_EP13 (Bit 13)                        */
#define USB_NAK_INT_NAK_EP13_Msk          (0x2000UL)                /*!< USB NAK_INT: NAK_EP13 (Bitfield-Mask: 0x01)           */
#define USB_NAK_INT_NAK_EP14_Pos          (14UL)                    /*!< USB NAK_INT: NAK_EP14 (Bit 14)                        */
#define USB_NAK_INT_NAK_EP14_Msk          (0x4000UL)                /*!< USB NAK_INT: NAK_EP14 (Bitfield-Mask: 0x01)           */
#define USB_NAK_INT_NAK_EP15_Pos          (15UL)                    /*!< USB NAK_INT: NAK_EP15 (Bit 15)                        */
#define USB_NAK_INT_NAK_EP15_Msk          (0x8000UL)                /*!< USB NAK_INT: NAK_EP15 (Bitfield-Mask: 0x01)           */
/* ======================================================  DMA_ERR_INT  ====================================================== */
#define USB_DMA_ERR_INT_EP0_Pos           (0UL)                     /*!< USB DMA_ERR_INT: EP0 (Bit 0)                          */
#define USB_DMA_ERR_INT_EP0_Msk           (0x1UL)                   /*!< USB DMA_ERR_INT: EP0 (Bitfield-Mask: 0x01)            */
#define USB_DMA_ERR_INT_EP1_Pos           (1UL)                     /*!< USB DMA_ERR_INT: EP1 (Bit 1)                          */
#define USB_DMA_ERR_INT_EP1_Msk           (0x2UL)                   /*!< USB DMA_ERR_INT: EP1 (Bitfield-Mask: 0x01)            */
#define USB_DMA_ERR_INT_EP2_Pos           (2UL)                     /*!< USB DMA_ERR_INT: EP2 (Bit 2)                          */
#define USB_DMA_ERR_INT_EP2_Msk           (0x4UL)                   /*!< USB DMA_ERR_INT: EP2 (Bitfield-Mask: 0x01)            */
#define USB_DMA_ERR_INT_EP3_Pos           (3UL)                     /*!< USB DMA_ERR_INT: EP3 (Bit 3)                          */
#define USB_DMA_ERR_INT_EP3_Msk           (0x8UL)                   /*!< USB DMA_ERR_INT: EP3 (Bitfield-Mask: 0x01)            */
#define USB_DMA_ERR_INT_EP4_Pos           (4UL)                     /*!< USB DMA_ERR_INT: EP4 (Bit 4)                          */
#define USB_DMA_ERR_INT_EP4_Msk           (0x10UL)                  /*!< USB DMA_ERR_INT: EP4 (Bitfield-Mask: 0x01)            */
#define USB_DMA_ERR_INT_EP5_Pos           (5UL)                     /*!< USB DMA_ERR_INT: EP5 (Bit 5)                          */
#define USB_DMA_ERR_INT_EP5_Msk           (0x20UL)                  /*!< USB DMA_ERR_INT: EP5 (Bitfield-Mask: 0x01)            */
#define USB_DMA_ERR_INT_EP6_Pos           (6UL)                     /*!< USB DMA_ERR_INT: EP6 (Bit 6)                          */
#define USB_DMA_ERR_INT_EP6_Msk           (0x40UL)                  /*!< USB DMA_ERR_INT: EP6 (Bitfield-Mask: 0x01)            */
#define USB_DMA_ERR_INT_EP7_Pos           (7UL)                     /*!< USB DMA_ERR_INT: EP7 (Bit 7)                          */
#define USB_DMA_ERR_INT_EP7_Msk           (0x80UL)                  /*!< USB DMA_ERR_INT: EP7 (Bitfield-Mask: 0x01)            */
#define USB_DMA_ERR_INT_EP8_Pos           (8UL)                     /*!< USB DMA_ERR_INT: EP8 (Bit 8)                          */
#define USB_DMA_ERR_INT_EP8_Msk           (0x100UL)                 /*!< USB DMA_ERR_INT: EP8 (Bitfield-Mask: 0x01)            */
#define USB_DMA_ERR_INT_EP9_Pos           (9UL)                     /*!< USB DMA_ERR_INT: EP9 (Bit 9)                          */
#define USB_DMA_ERR_INT_EP9_Msk           (0x200UL)                 /*!< USB DMA_ERR_INT: EP9 (Bitfield-Mask: 0x01)            */
#define USB_DMA_ERR_INT_EP10_Pos          (10UL)                    /*!< USB DMA_ERR_INT: EP10 (Bit 10)                        */
#define USB_DMA_ERR_INT_EP10_Msk          (0x400UL)                 /*!< USB DMA_ERR_INT: EP10 (Bitfield-Mask: 0x01)           */
#define USB_DMA_ERR_INT_EP11_Pos          (11UL)                    /*!< USB DMA_ERR_INT: EP11 (Bit 11)                        */
#define USB_DMA_ERR_INT_EP11_Msk          (0x800UL)                 /*!< USB DMA_ERR_INT: EP11 (Bitfield-Mask: 0x01)           */
#define USB_DMA_ERR_INT_EP12_Pos          (12UL)                    /*!< USB DMA_ERR_INT: EP12 (Bit 12)                        */
#define USB_DMA_ERR_INT_EP12_Msk          (0x1000UL)                /*!< USB DMA_ERR_INT: EP12 (Bitfield-Mask: 0x01)           */
#define USB_DMA_ERR_INT_EP13_Pos          (13UL)                    /*!< USB DMA_ERR_INT: EP13 (Bit 13)                        */
#define USB_DMA_ERR_INT_EP13_Msk          (0x2000UL)                /*!< USB DMA_ERR_INT: EP13 (Bitfield-Mask: 0x01)           */
#define USB_DMA_ERR_INT_EP14_Pos          (14UL)                    /*!< USB DMA_ERR_INT: EP14 (Bit 14)                        */
#define USB_DMA_ERR_INT_EP14_Msk          (0x4000UL)                /*!< USB DMA_ERR_INT: EP14 (Bitfield-Mask: 0x01)           */
#define USB_DMA_ERR_INT_EP15_Pos          (15UL)                    /*!< USB DMA_ERR_INT: EP15 (Bit 15)                        */
#define USB_DMA_ERR_INT_EP15_Msk          (0x8000UL)                /*!< USB DMA_ERR_INT: EP15 (Bitfield-Mask: 0x01)           */
/* ======================================================  BUF_OVR_INT  ====================================================== */
#define USB_BUF_OVR_INT_EP0_Pos           (0UL)                     /*!< USB BUF_OVR_INT: EP0 (Bit 0)                          */
#define USB_BUF_OVR_INT_EP0_Msk           (0x1UL)                   /*!< USB BUF_OVR_INT: EP0 (Bitfield-Mask: 0x01)            */
#define USB_BUF_OVR_INT_EP1_Pos           (1UL)                     /*!< USB BUF_OVR_INT: EP1 (Bit 1)                          */
#define USB_BUF_OVR_INT_EP1_Msk           (0x2UL)                   /*!< USB BUF_OVR_INT: EP1 (Bitfield-Mask: 0x01)            */
#define USB_BUF_OVR_INT_EP2_Pos           (2UL)                     /*!< USB BUF_OVR_INT: EP2 (Bit 2)                          */
#define USB_BUF_OVR_INT_EP2_Msk           (0x4UL)                   /*!< USB BUF_OVR_INT: EP2 (Bitfield-Mask: 0x01)            */
#define USB_BUF_OVR_INT_EP3_Pos           (3UL)                     /*!< USB BUF_OVR_INT: EP3 (Bit 3)                          */
#define USB_BUF_OVR_INT_EP3_Msk           (0x8UL)                   /*!< USB BUF_OVR_INT: EP3 (Bitfield-Mask: 0x01)            */
#define USB_BUF_OVR_INT_EP4_Pos           (4UL)                     /*!< USB BUF_OVR_INT: EP4 (Bit 4)                          */
#define USB_BUF_OVR_INT_EP4_Msk           (0x10UL)                  /*!< USB BUF_OVR_INT: EP4 (Bitfield-Mask: 0x01)            */
#define USB_BUF_OVR_INT_EP5_Pos           (5UL)                     /*!< USB BUF_OVR_INT: EP5 (Bit 5)                          */
#define USB_BUF_OVR_INT_EP5_Msk           (0x20UL)                  /*!< USB BUF_OVR_INT: EP5 (Bitfield-Mask: 0x01)            */
#define USB_BUF_OVR_INT_EP6_Pos           (6UL)                     /*!< USB BUF_OVR_INT: EP6 (Bit 6)                          */
#define USB_BUF_OVR_INT_EP6_Msk           (0x40UL)                  /*!< USB BUF_OVR_INT: EP6 (Bitfield-Mask: 0x01)            */
#define USB_BUF_OVR_INT_EP7_Pos           (7UL)                     /*!< USB BUF_OVR_INT: EP7 (Bit 7)                          */
#define USB_BUF_OVR_INT_EP7_Msk           (0x80UL)                  /*!< USB BUF_OVR_INT: EP7 (Bitfield-Mask: 0x01)            */
#define USB_BUF_OVR_INT_EP8_Pos           (8UL)                     /*!< USB BUF_OVR_INT: EP8 (Bit 8)                          */
#define USB_BUF_OVR_INT_EP8_Msk           (0x100UL)                 /*!< USB BUF_OVR_INT: EP8 (Bitfield-Mask: 0x01)            */
#define USB_BUF_OVR_INT_EP9_Pos           (9UL)                     /*!< USB BUF_OVR_INT: EP9 (Bit 9)                          */
#define USB_BUF_OVR_INT_EP9_Msk           (0x200UL)                 /*!< USB BUF_OVR_INT: EP9 (Bitfield-Mask: 0x01)            */
#define USB_BUF_OVR_INT_EP10_Pos          (10UL)                    /*!< USB BUF_OVR_INT: EP10 (Bit 10)                        */
#define USB_BUF_OVR_INT_EP10_Msk          (0x400UL)                 /*!< USB BUF_OVR_INT: EP10 (Bitfield-Mask: 0x01)           */
#define USB_BUF_OVR_INT_EP11_Pos          (11UL)                    /*!< USB BUF_OVR_INT: EP11 (Bit 11)                        */
#define USB_BUF_OVR_INT_EP11_Msk          (0x800UL)                 /*!< USB BUF_OVR_INT: EP11 (Bitfield-Mask: 0x01)           */
#define USB_BUF_OVR_INT_EP12_Pos          (12UL)                    /*!< USB BUF_OVR_INT: EP12 (Bit 12)                        */
#define USB_BUF_OVR_INT_EP12_Msk          (0x1000UL)                /*!< USB BUF_OVR_INT: EP12 (Bitfield-Mask: 0x01)           */
#define USB_BUF_OVR_INT_EP13_Pos          (13UL)                    /*!< USB BUF_OVR_INT: EP13 (Bit 13)                        */
#define USB_BUF_OVR_INT_EP13_Msk          (0x2000UL)                /*!< USB BUF_OVR_INT: EP13 (Bitfield-Mask: 0x01)           */
#define USB_BUF_OVR_INT_EP14_Pos          (14UL)                    /*!< USB BUF_OVR_INT: EP14 (Bit 14)                        */
#define USB_BUF_OVR_INT_EP14_Msk          (0x4000UL)                /*!< USB BUF_OVR_INT: EP14 (Bitfield-Mask: 0x01)           */
#define USB_BUF_OVR_INT_EP15_Pos          (15UL)                    /*!< USB BUF_OVR_INT: EP15 (Bit 15)                        */
#define USB_BUF_OVR_INT_EP15_Msk          (0x8000UL)                /*!< USB BUF_OVR_INT: EP15 (Bitfield-Mask: 0x01)           */
/* =========================================================  SETUP  ========================================================= */
/* ==========================================================  EP  =========================================================== */
#define USB_EP_EP_DIR_Pos                 (0UL)                     /*!< USB EP: EP_DIR (Bit 0)                                */
#define USB_EP_EP_DIR_Msk                 (0x3UL)                   /*!< USB EP: EP_DIR (Bitfield-Mask: 0x03)                  */
#define USB_EP_EP_BUF2_Pos                (3UL)                     /*!< USB EP: EP_BUF2 (Bit 3)                               */
#define USB_EP_EP_BUF2_Msk                (0x8UL)                   /*!< USB EP: EP_BUF2 (Bitfield-Mask: 0x01)                 */
#define USB_EP_EP_INT_EN_Pos              (4UL)                     /*!< USB EP: EP_INT_EN (Bit 4)                             */
#define USB_EP_EP_INT_EN_Msk              (0x10UL)                  /*!< USB EP: EP_INT_EN (Bitfield-Mask: 0x01)               */
#define USB_EP_EP_NAK_EN_Pos              (5UL)                     /*!< USB EP: EP_NAK_EN (Bit 5)                             */
#define USB_EP_EP_NAK_EN_Msk              (0x20UL)                  /*!< USB EP: EP_NAK_EN (Bitfield-Mask: 0x01)               */
#define USB_EP_EP_DT_Pos                  (6UL)                     /*!< USB EP: EP_DT (Bit 6)                                 */
#define USB_EP_EP_DT_Msk                  (0x40UL)                  /*!< USB EP: EP_DT (Bitfield-Mask: 0x01)                   */
#define USB_EP_EP_STALL_Pos               (8UL)                     /*!< USB EP: EP_STALL (Bit 8)                              */
#define USB_EP_EP_STALL_Msk               (0x100UL)                 /*!< USB EP: EP_STALL (Bitfield-Mask: 0x01)                */
#define USB_EP_EP_ST_STALL_Pos            (9UL)                     /*!< USB EP: EP_ST_STALL (Bit 9)                           */
#define USB_EP_EP_ST_STALL_Msk            (0x200UL)                 /*!< USB EP: EP_ST_STALL (Bitfield-Mask: 0x01)             */
#define USB_EP_EP_ST_ACK_Pos              (10UL)                    /*!< USB EP: EP_ST_ACK (Bit 10)                            */
#define USB_EP_EP_ST_ACK_Msk              (0x400UL)                 /*!< USB EP: EP_ST_ACK (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define WDT_CTRL_INT_PERIOD_Pos           (0UL)                     /*!< WDT CTRL: INT_PERIOD (Bit 0)                          */
#define WDT_CTRL_INT_PERIOD_Msk           (0xfUL)                   /*!< WDT CTRL: INT_PERIOD (Bitfield-Mask: 0x0f)            */
#define WDT_CTRL_RST_PERIOD_Pos           (4UL)                     /*!< WDT CTRL: RST_PERIOD (Bit 4)                          */
#define WDT_CTRL_RST_PERIOD_Msk           (0xf0UL)                  /*!< WDT CTRL: RST_PERIOD (Bitfield-Mask: 0x0f)            */
#define WDT_CTRL_WDT_EN_Pos               (8UL)                     /*!< WDT CTRL: WDT_EN (Bit 8)                              */
#define WDT_CTRL_WDT_EN_Msk               (0x100UL)                 /*!< WDT CTRL: WDT_EN (Bitfield-Mask: 0x01)                */
#define WDT_CTRL_INT_FLAG_Pos             (9UL)                     /*!< WDT CTRL: INT_FLAG (Bit 9)                            */
#define WDT_CTRL_INT_FLAG_Msk             (0x200UL)                 /*!< WDT CTRL: INT_FLAG (Bitfield-Mask: 0x01)              */
#define WDT_CTRL_INT_EN_Pos               (10UL)                    /*!< WDT CTRL: INT_EN (Bit 10)                             */
#define WDT_CTRL_INT_EN_Msk               (0x400UL)                 /*!< WDT CTRL: INT_EN (Bitfield-Mask: 0x01)                */
#define WDT_CTRL_RST_EN_Pos               (11UL)                    /*!< WDT CTRL: RST_EN (Bit 11)                             */
#define WDT_CTRL_RST_EN_Msk               (0x800UL)                 /*!< WDT CTRL: RST_EN (Bitfield-Mask: 0x01)                */
#define WDT_CTRL_RST_FLAG_Pos             (31UL)                    /*!< WDT CTRL: RST_FLAG (Bit 31)                           */
#define WDT_CTRL_RST_FLAG_Msk             (0x80000000UL)            /*!< WDT CTRL: RST_FLAG (Bitfield-Mask: 0x01)              */
/* ==========================================================  RST  ========================================================== */
#define WDT_RST_WDT_RST_Pos               (0UL)                     /*!< WDT RST: WDT_RST (Bit 0)                              */
#define WDT_RST_WDT_RST_Msk               (0xffUL)                  /*!< WDT RST: WDT_RST (Bitfield-Mask: 0xff)                */


/* =========================================================================================================================== */
/* ================                                           CLCD                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CLK  ========================================================== */
#define CLCD_CLK_CLKDIV_Pos               (0UL)                     /*!< CLCD CLK: CLKDIV (Bit 0)                              */
#define CLCD_CLK_CLKDIV_Msk               (0xffUL)                  /*!< CLCD CLK: CLKDIV (Bitfield-Mask: 0xff)                */
#define CLCD_CLK_ACB_Pos                  (8UL)                     /*!< CLCD CLK: ACB (Bit 8)                                 */
#define CLCD_CLK_ACB_Msk                  (0xff00UL)                /*!< CLCD CLK: ACB (Bitfield-Mask: 0xff)                   */
#define CLCD_CLK_DPOL_Pos                 (16UL)                    /*!< CLCD CLK: DPOL (Bit 16)                               */
#define CLCD_CLK_DPOL_Msk                 (0x10000UL)               /*!< CLCD CLK: DPOL (Bitfield-Mask: 0x01)                  */
#define CLCD_CLK_VPOL_Pos                 (17UL)                    /*!< CLCD CLK: VPOL (Bit 17)                               */
#define CLCD_CLK_VPOL_Msk                 (0x20000UL)               /*!< CLCD CLK: VPOL (Bitfield-Mask: 0x01)                  */
#define CLCD_CLK_HPOL_Pos                 (18UL)                    /*!< CLCD CLK: HPOL (Bit 18)                               */
#define CLCD_CLK_HPOL_Msk                 (0x40000UL)               /*!< CLCD CLK: HPOL (Bitfield-Mask: 0x01)                  */
#define CLCD_CLK_EDGE_Pos                 (19UL)                    /*!< CLCD CLK: EDGE (Bit 19)                               */
#define CLCD_CLK_EDGE_Msk                 (0x80000UL)               /*!< CLCD CLK: EDGE (Bitfield-Mask: 0x01)                  */
#define CLCD_CLK_PASCLK_Pos               (20UL)                    /*!< CLCD CLK: PASCLK (Bit 20)                             */
#define CLCD_CLK_PASCLK_Msk               (0x100000UL)              /*!< CLCD CLK: PASCLK (Bitfield-Mask: 0x01)                */
/* ========================================================  VTIM_0  ========================================================= */
#define CLCD_VTIM_0_VLINES_Pos            (0UL)                     /*!< CLCD VTIM_0: VLINES (Bit 0)                           */
#define CLCD_VTIM_0_VLINES_Msk            (0xfffUL)                 /*!< CLCD VTIM_0: VLINES (Bitfield-Mask: 0xfff)            */
#define CLCD_VTIM_0_VBACKPORCH_Pos        (16UL)                    /*!< CLCD VTIM_0: VBACKPORCH (Bit 16)                      */
#define CLCD_VTIM_0_VBACKPORCH_Msk        (0xff0000UL)              /*!< CLCD VTIM_0: VBACKPORCH (Bitfield-Mask: 0xff)         */
/* ========================================================  VTIM_1  ========================================================= */
#define CLCD_VTIM_1_VSYNCWIDTH_Pos        (0UL)                     /*!< CLCD VTIM_1: VSYNCWIDTH (Bit 0)                       */
#define CLCD_VTIM_1_VSYNCWIDTH_Msk        (0xffUL)                  /*!< CLCD VTIM_1: VSYNCWIDTH (Bitfield-Mask: 0xff)         */
#define CLCD_VTIM_1_VFRONTPORCH_Pos       (16UL)                    /*!< CLCD VTIM_1: VFRONTPORCH (Bit 16)                     */
#define CLCD_VTIM_1_VFRONTPORCH_Msk       (0xff0000UL)              /*!< CLCD VTIM_1: VFRONTPORCH (Bitfield-Mask: 0xff)        */
/* =========================================================  HTIM  ========================================================== */
#define CLCD_HTIM_HSYNCWIDTH_Pos          (0UL)                     /*!< CLCD HTIM: HSYNCWIDTH (Bit 0)                         */
#define CLCD_HTIM_HSYNCWIDTH_Msk          (0xffUL)                  /*!< CLCD HTIM: HSYNCWIDTH (Bitfield-Mask: 0xff)           */
#define CLCD_HTIM_HFRONTPORCH_Pos         (8UL)                     /*!< CLCD HTIM: HFRONTPORCH (Bit 8)                        */
#define CLCD_HTIM_HFRONTPORCH_Msk         (0xff00UL)                /*!< CLCD HTIM: HFRONTPORCH (Bitfield-Mask: 0xff)          */
#define CLCD_HTIM_HSIZE_Pos               (16UL)                    /*!< CLCD HTIM: HSIZE (Bit 16)                             */
#define CLCD_HTIM_HSIZE_Msk               (0xff0000UL)              /*!< CLCD HTIM: HSIZE (Bitfield-Mask: 0xff)                */
#define CLCD_HTIM_HBACKPORCH_Pos          (24UL)                    /*!< CLCD HTIM: HBACKPORCH (Bit 24)                        */
#define CLCD_HTIM_HBACKPORCH_Msk          (0xff000000UL)            /*!< CLCD HTIM: HBACKPORCH (Bitfield-Mask: 0xff)           */
/* =========================================================  CTRL  ========================================================== */
#define CLCD_CTRL_LCDEN_Pos               (0UL)                     /*!< CLCD CTRL: LCDEN (Bit 0)                              */
#define CLCD_CTRL_LCDEN_Msk               (0x1UL)                   /*!< CLCD CTRL: LCDEN (Bitfield-Mask: 0x01)                */
#define CLCD_CTRL_VISEL_Pos               (1UL)                     /*!< CLCD CTRL: VISEL (Bit 1)                              */
#define CLCD_CTRL_VISEL_Msk               (0x6UL)                   /*!< CLCD CTRL: VISEL (Bitfield-Mask: 0x03)                */
#define CLCD_CTRL_DISPTYPE_Pos            (4UL)                     /*!< CLCD CTRL: DISPTYPE (Bit 4)                           */
#define CLCD_CTRL_DISPTYPE_Msk            (0xf0UL)                  /*!< CLCD CTRL: DISPTYPE (Bitfield-Mask: 0x0f)             */
#define CLCD_CTRL_BPP_Pos                 (8UL)                     /*!< CLCD CTRL: BPP (Bit 8)                                */
#define CLCD_CTRL_BPP_Msk                 (0x700UL)                 /*!< CLCD CTRL: BPP (Bitfield-Mask: 0x07)                  */
#define CLCD_CTRL_MODE565_Pos             (11UL)                    /*!< CLCD CTRL: MODE565 (Bit 11)                           */
#define CLCD_CTRL_MODE565_Msk             (0x800UL)                 /*!< CLCD CTRL: MODE565 (Bitfield-Mask: 0x01)              */
#define CLCD_CTRL_EMODE_Pos               (12UL)                    /*!< CLCD CTRL: EMODE (Bit 12)                             */
#define CLCD_CTRL_EMODE_Msk               (0x3000UL)                /*!< CLCD CTRL: EMODE (Bitfield-Mask: 0x03)                */
#define CLCD_CTRL_C24_Pos                 (15UL)                    /*!< CLCD CTRL: C24 (Bit 15)                               */
#define CLCD_CTRL_C24_Msk                 (0x8000UL)                /*!< CLCD CTRL: C24 (Bitfield-Mask: 0x01)                  */
#define CLCD_CTRL_BURST_Pos               (19UL)                    /*!< CLCD CTRL: BURST (Bit 19)                             */
#define CLCD_CTRL_BURST_Msk               (0x180000UL)              /*!< CLCD CTRL: BURST (Bitfield-Mask: 0x03)                */
#define CLCD_CTRL_LPOL_Pos                (21UL)                    /*!< CLCD CTRL: LPOL (Bit 21)                              */
#define CLCD_CTRL_LPOL_Msk                (0x200000UL)              /*!< CLCD CTRL: LPOL (Bitfield-Mask: 0x01)                 */
#define CLCD_CTRL_PEN_Pos                 (22UL)                    /*!< CLCD CTRL: PEN (Bit 22)                               */
#define CLCD_CTRL_PEN_Msk                 (0x400000UL)              /*!< CLCD CTRL: PEN (Bitfield-Mask: 0x01)                  */
/* ========================================================  FRBUF_  ========================================================= */
/* ========================================================  INT_EN  ========================================================= */
#define CLCD_INT_EN_UFLO_Pos              (0UL)                     /*!< CLCD INT_EN: UFLO (Bit 0)                             */
#define CLCD_INT_EN_UFLO_Msk              (0x1UL)                   /*!< CLCD INT_EN: UFLO (Bitfield-Mask: 0x01)               */
#define CLCD_INT_EN_ADRRDY_Pos            (1UL)                     /*!< CLCD INT_EN: ADRRDY (Bit 1)                           */
#define CLCD_INT_EN_ADRRDY_Msk            (0x2UL)                   /*!< CLCD INT_EN: ADRRDY (Bitfield-Mask: 0x01)             */
#define CLCD_INT_EN_VCI_Pos               (2UL)                     /*!< CLCD INT_EN: VCI (Bit 2)                              */
#define CLCD_INT_EN_VCI_Msk               (0x4UL)                   /*!< CLCD INT_EN: VCI (Bitfield-Mask: 0x01)                */
#define CLCD_INT_EN_BERR_Pos              (3UL)                     /*!< CLCD INT_EN: BERR (Bit 3)                             */
#define CLCD_INT_EN_BERR_Msk              (0x8UL)                   /*!< CLCD INT_EN: BERR (Bitfield-Mask: 0x01)               */
/* =========================================================  STAT  ========================================================== */
#define CLCD_STAT_UFLO_Pos                (0UL)                     /*!< CLCD STAT: UFLO (Bit 0)                               */
#define CLCD_STAT_UFLO_Msk                (0x1UL)                   /*!< CLCD STAT: UFLO (Bitfield-Mask: 0x01)                 */
#define CLCD_STAT_ADRRDY_Pos              (1UL)                     /*!< CLCD STAT: ADRRDY (Bit 1)                             */
#define CLCD_STAT_ADRRDY_Msk              (0x2UL)                   /*!< CLCD STAT: ADRRDY (Bitfield-Mask: 0x01)               */
#define CLCD_STAT_VCI_Pos                 (2UL)                     /*!< CLCD STAT: VCI (Bit 2)                                */
#define CLCD_STAT_VCI_Msk                 (0x4UL)                   /*!< CLCD STAT: VCI (Bitfield-Mask: 0x01)                  */
#define CLCD_STAT_BERR_Pos                (3UL)                     /*!< CLCD STAT: BERR (Bit 3)                               */
#define CLCD_STAT_BERR_Msk                (0x8UL)                   /*!< CLCD STAT: BERR (Bitfield-Mask: 0x01)                 */
#define CLCD_STAT_LCDIDLE_Pos             (8UL)                     /*!< CLCD STAT: LCDIDLE (Bit 8)                            */
#define CLCD_STAT_LCDIDLE_Msk             (0x100UL)                 /*!< CLCD STAT: LCDIDLE (Bitfield-Mask: 0x01)              */
/* =======================================================  HV_PHASE  ======================================================== */
#define CLCD_HV_PHASE_THV_Pos             (0UL)                     /*!< CLCD HV_PHASE: THV (Bit 0)                            */
#define CLCD_HV_PHASE_THV_Msk             (0xffUL)                  /*!< CLCD HV_PHASE: THV (Bitfield-Mask: 0xff)              */
/* ======================================================  PALETTE_RAM  ====================================================== */
#define CLCD_PALETTE_RAM_RED_Pos          (0UL)                     /*!< CLCD PALETTE_RAM: RED (Bit 0)                         */
#define CLCD_PALETTE_RAM_RED_Msk          (0xffUL)                  /*!< CLCD PALETTE_RAM: RED (Bitfield-Mask: 0xff)           */
#define CLCD_PALETTE_RAM_GREEN_Pos        (8UL)                     /*!< CLCD PALETTE_RAM: GREEN (Bit 8)                       */
#define CLCD_PALETTE_RAM_GREEN_Msk        (0xff00UL)                /*!< CLCD PALETTE_RAM: GREEN (Bitfield-Mask: 0xff)         */
#define CLCD_PALETTE_RAM_BLUE_Pos         (16UL)                    /*!< CLCD PALETTE_RAM: BLUE (Bit 16)                       */
#define CLCD_PALETTE_RAM_BLUE_Msk         (0xff0000UL)              /*!< CLCD PALETTE_RAM: BLUE (Bitfield-Mask: 0xff)          */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            GCR                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  SCON  ========================================================== */
/* ================================================  GCR SCON BSTAPEN [0..0]  ================================================ */
typedef enum {
  GCR_SCON_BSTAPEN_disable             = 0,     /*!< disable : Boundary Scan TAP port disabled.                                */
  GCR_SCON_BSTAPEN_enable              = 1,     /*!< enable : Boundary Scan TAP port enabled.                                  */
} GCR_SCON_BSTAPEN_Type;

/* ================================================  GCR SCON ONVMAIN [3..3]  ================================================ */
typedef enum {
  GCR_SCON_ONVMAIN_vBat                = 0,     /*!< vBat : VBAT is selected to supply battery supply.                         */
  GCR_SCON_ONVMAIN_vMain               = 1,     /*!< vMain : VMAIN is selected to supply battery supply.                       */
} GCR_SCON_ONVMAIN_Type;

/* ============================================  GCR SCON FLASH_PAGE_FLIP [4..4]  ============================================ */
typedef enum {
  GCR_SCON_FLASH_PAGE_FLIP_normal      = 0,     /*!< normal : Physical layout matches logical layout.                          */
  GCR_SCON_FLASH_PAGE_FLIP_swapped     = 1,     /*!< swapped : Bottom half mapped to logical top half and vice versa.          */
} GCR_SCON_FLASH_PAGE_FLIP_Type;

/* ================================================  GCR SCON CCHK [13..13]  ================================================= */
typedef enum {
  GCR_SCON_CCHK_complete               = 0,     /*!< complete : No operation/complete                                          */
  GCR_SCON_CCHK_start                  = 1,     /*!< start : Start operation                                                   */
} GCR_SCON_CCHK_Type;

/* ================================================  GCR SCON CHKRD [14..14]  ================================================ */
typedef enum {
  GCR_SCON_CHKRD_busy                  = 0,     /*!< busy : Result not ready                                                   */
  GCR_SCON_CHKRD_ready                 = 1,     /*!< ready : Operation complete and result ready                               */
} GCR_SCON_CHKRD_Type;

/* ===============================================  GCR SCON CHKRES [15..15]  ================================================ */
typedef enum {
  GCR_SCON_CHKRES_pass                 = 0,     /*!< pass : ROM Checksum Correct.                                              */
  GCR_SCON_CHKRES_fail                 = 1,     /*!< fail : ROM Checksum Fail.                                                 */
} GCR_SCON_CHKRES_Type;

/* =========================================================  RSTR  ========================================================== */
/* ==================================================  GCR RSTR DMA [0..0]  ================================================== */
typedef enum {
  GCR_RSTR_DMA_reset_write_reset       = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_DMA_reset_write_Type;

typedef enum {
  GCR_RSTR_DMA_reset_read_reset        = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_DMA_reset_read_busy         = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_DMA_reset_read_Type;

/* ==================================================  GCR RSTR WDT [1..1]  ================================================== */
typedef enum {
  GCR_RSTR_WDT_reset_write_reset       = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_WDT_reset_write_Type;

typedef enum {
  GCR_RSTR_WDT_reset_read_reset        = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_WDT_reset_read_busy         = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_WDT_reset_read_Type;

/* =================================================  GCR RSTR GPIO0 [2..2]  ================================================= */
typedef enum {
  GCR_RSTR_GPIO0_reset_write_reset     = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_GPIO0_reset_write_Type;

typedef enum {
  GCR_RSTR_GPIO0_reset_read_reset      = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_GPIO0_reset_read_busy       = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_GPIO0_reset_read_Type;

/* =================================================  GCR RSTR GPIO1 [3..3]  ================================================= */
typedef enum {
  GCR_RSTR_GPIO1_reset_write_reset     = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_GPIO1_reset_write_Type;

typedef enum {
  GCR_RSTR_GPIO1_reset_read_reset      = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_GPIO1_reset_read_busy       = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_GPIO1_reset_read_Type;

/* =================================================  GCR RSTR GPIO2 [4..4]  ================================================= */
typedef enum {
  GCR_RSTR_GPIO2_reset_write_reset     = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_GPIO2_reset_write_Type;

typedef enum {
  GCR_RSTR_GPIO2_reset_read_reset      = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_GPIO2_reset_read_busy       = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_GPIO2_reset_read_Type;

/* ================================================  GCR RSTR TIMER0 [5..5]  ================================================= */
typedef enum {
  GCR_RSTR_TIMER0_reset_write_reset    = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_TIMER0_reset_write_Type;

typedef enum {
  GCR_RSTR_TIMER0_reset_read_reset     = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_TIMER0_reset_read_busy      = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_TIMER0_reset_read_Type;

/* ================================================  GCR RSTR TIMER1 [6..6]  ================================================= */
typedef enum {
  GCR_RSTR_TIMER1_reset_write_reset    = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_TIMER1_reset_write_Type;

typedef enum {
  GCR_RSTR_TIMER1_reset_read_reset     = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_TIMER1_reset_read_busy      = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_TIMER1_reset_read_Type;

/* ================================================  GCR RSTR TIMER2 [7..7]  ================================================= */
typedef enum {
  GCR_RSTR_TIMER2_reset_write_reset    = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_TIMER2_reset_write_Type;

typedef enum {
  GCR_RSTR_TIMER2_reset_read_reset     = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_TIMER2_reset_read_busy      = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_TIMER2_reset_read_Type;

/* ================================================  GCR RSTR TIMER3 [8..8]  ================================================= */
typedef enum {
  GCR_RSTR_TIMER3_reset_write_reset    = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_TIMER3_reset_write_Type;

typedef enum {
  GCR_RSTR_TIMER3_reset_read_reset     = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_TIMER3_reset_read_busy      = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_TIMER3_reset_read_Type;

/* ================================================  GCR RSTR TIMER4 [9..9]  ================================================= */
typedef enum {
  GCR_RSTR_TIMER4_reset_write_reset    = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_TIMER4_reset_write_Type;

typedef enum {
  GCR_RSTR_TIMER4_reset_read_reset     = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_TIMER4_reset_read_busy      = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_TIMER4_reset_read_Type;

/* ===============================================  GCR RSTR TIMER5 [10..10]  ================================================ */
typedef enum {
  GCR_RSTR_TIMER5_reset_write_reset    = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_TIMER5_reset_write_Type;

typedef enum {
  GCR_RSTR_TIMER5_reset_read_reset     = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_TIMER5_reset_read_busy      = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_TIMER5_reset_read_Type;

/* ================================================  GCR RSTR UART0 [11..11]  ================================================ */
typedef enum {
  GCR_RSTR_UART0_reset_write_reset     = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_UART0_reset_write_Type;

typedef enum {
  GCR_RSTR_UART0_reset_read_reset      = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_UART0_reset_read_busy       = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_UART0_reset_read_Type;

/* ================================================  GCR RSTR UART1 [12..12]  ================================================ */
typedef enum {
  GCR_RSTR_UART1_reset_write_reset     = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_UART1_reset_write_Type;

typedef enum {
  GCR_RSTR_UART1_reset_read_reset      = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_UART1_reset_read_busy       = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_UART1_reset_read_Type;

/* ================================================  GCR RSTR SPI0 [13..13]  ================================================= */
typedef enum {
  GCR_RSTR_SPI0_reset_write_reset      = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_SPI0_reset_write_Type;

typedef enum {
  GCR_RSTR_SPI0_reset_read_reset       = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_SPI0_reset_read_busy        = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_SPI0_reset_read_Type;

/* ================================================  GCR RSTR SPI1 [14..14]  ================================================= */
typedef enum {
  GCR_RSTR_SPI1_reset_write_reset      = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_SPI1_reset_write_Type;

typedef enum {
  GCR_RSTR_SPI1_reset_read_reset       = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_SPI1_reset_read_busy        = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_SPI1_reset_read_Type;

/* ================================================  GCR RSTR SPI2 [15..15]  ================================================= */
typedef enum {
  GCR_RSTR_SPI2_reset_write_reset      = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_SPI2_reset_write_Type;

typedef enum {
  GCR_RSTR_SPI2_reset_read_reset       = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_SPI2_reset_read_busy        = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_SPI2_reset_read_Type;

/* =================================================  GCR RSTR I2C [16..16]  ================================================= */
typedef enum {
  GCR_RSTR_I2C_reset_write_reset       = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_I2C_reset_write_Type;

typedef enum {
  GCR_RSTR_I2C_reset_read_reset        = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_I2C_reset_read_busy         = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_I2C_reset_read_Type;

/* =================================================  GCR RSTR RTC [17..17]  ================================================= */
typedef enum {
  GCR_RSTR_RTC_reset_write_reset       = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_RTC_reset_write_Type;

typedef enum {
  GCR_RSTR_RTC_reset_read_reset        = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_RTC_reset_read_busy         = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_RTC_reset_read_Type;

/* ===============================================  GCR RSTR CRYPTO [18..18]  ================================================ */
typedef enum {
  GCR_RSTR_CRYPTO_reset_write_reset    = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_CRYPTO_reset_write_Type;

typedef enum {
  GCR_RSTR_CRYPTO_reset_read_reset     = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_CRYPTO_reset_read_busy      = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_CRYPTO_reset_read_Type;

/* ===============================================  GCR RSTR MAGDSP [19..19]  ================================================ */
typedef enum {
  GCR_RSTR_MAGDSP_reset_write_reset    = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_MAGDSP_reset_write_Type;

typedef enum {
  GCR_RSTR_MAGDSP_reset_read_reset     = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_MAGDSP_reset_read_busy      = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_MAGDSP_reset_read_Type;

/* =================================================  GCR RSTR SC [20..20]  ================================================== */
typedef enum {
  GCR_RSTR_SC_reset_write_reset        = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_SC_reset_write_Type;

typedef enum {
  GCR_RSTR_SC_reset_read_reset         = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_SC_reset_read_busy          = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_SC_reset_read_Type;

/* =================================================  GCR RSTR KBD [21..21]  ================================================= */
typedef enum {
  GCR_RSTR_KBD_reset_write_reset       = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_KBD_reset_write_Type;

typedef enum {
  GCR_RSTR_KBD_reset_read_reset        = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_KBD_reset_read_busy         = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_KBD_reset_read_Type;

/* ==============================================  GCR RSTR TFT_MLCD [22..22]  =============================================== */
typedef enum {
  GCR_RSTR_TFT_MLCD_reset_write_reset  = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_TFT_MLCD_reset_write_Type;

typedef enum {
  GCR_RSTR_TFT_MLCD_reset_read_reset   = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_TFT_MLCD_reset_read_busy    = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_TFT_MLCD_reset_read_Type;

/* =================================================  GCR RSTR USB [23..23]  ================================================= */
typedef enum {
  GCR_RSTR_USB_reset_write_reset       = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_USB_reset_write_Type;

typedef enum {
  GCR_RSTR_USB_reset_read_reset        = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_USB_reset_read_busy         = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_USB_reset_read_Type;

/* =================================================  GCR RSTR ADC [25..25]  ================================================= */
typedef enum {
  GCR_RSTR_ADC_reset_write_reset       = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_ADC_reset_write_Type;

typedef enum {
  GCR_RSTR_ADC_reset_read_reset        = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_ADC_reset_read_busy         = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_ADC_reset_read_Type;

/* =================================================  GCR RSTR DAC [26..26]  ================================================= */
typedef enum {
  GCR_RSTR_DAC_reset_write_reset       = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_DAC_reset_write_Type;

typedef enum {
  GCR_RSTR_DAC_reset_read_reset        = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_DAC_reset_read_busy         = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_DAC_reset_read_Type;

/* ================================================  GCR RSTR SRST [29..29]  ================================================= */
typedef enum {
  GCR_RSTR_SRST_reset_write_reset      = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_SRST_reset_write_Type;

typedef enum {
  GCR_RSTR_SRST_reset_read_reset       = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_SRST_reset_read_busy        = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_SRST_reset_read_Type;

/* ================================================  GCR RSTR PRST [30..30]  ================================================= */
typedef enum {
  GCR_RSTR_PRST_reset_write_reset      = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_PRST_reset_write_Type;

typedef enum {
  GCR_RSTR_PRST_reset_read_reset       = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_PRST_reset_read_busy        = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_PRST_reset_read_Type;

/* ===============================================  GCR RSTR SYSTEM [31..31]  ================================================ */
typedef enum {
  GCR_RSTR_SYSTEM_reset_write_reset    = 1,     /*!< reset : Starts reset operation                                            */
} GCR_RSTR_SYSTEM_reset_write_Type;

typedef enum {
  GCR_RSTR_SYSTEM_reset_read_reset     = 0,     /*!< reset : Reset complete                                                    */
  GCR_RSTR_SYSTEM_reset_read_busy      = 1,     /*!< busy : Reset in progress                                                  */
} GCR_RSTR_SYSTEM_reset_read_Type;

/* =========================================================  CLKCN  ========================================================= */
/* =================================================  GCR CLKCN PSC [6..8]  ================================================== */
typedef enum {
  GCR_CLKCN_PSC_div1                   = 0,     /*!< div1 : Divide by 1                                                        */
  GCR_CLKCN_PSC_div2                   = 1,     /*!< div2 : Divide by 2                                                        */
  GCR_CLKCN_PSC_div4                   = 2,     /*!< div4 : Divide by 4                                                        */
  GCR_CLKCN_PSC_div8                   = 3,     /*!< div8 : Divide by 8                                                        */
  GCR_CLKCN_PSC_div16                  = 4,     /*!< div16 : Divide by 16                                                      */
  GCR_CLKCN_PSC_div32                  = 5,     /*!< div32 : Divide by 32                                                      */
  GCR_CLKCN_PSC_div64                  = 6,     /*!< div64 : Divide by 64                                                      */
  GCR_CLKCN_PSC_div128                 = 7,     /*!< div128 : Divide by 128                                                    */
} GCR_CLKCN_PSC_Type;

/* ===============================================  GCR CLKCN CLKSEL [9..11]  ================================================ */
typedef enum {
  GCR_CLKCN_CLKSEL_cryptoOsc           = 0,     /*!< cryptoOsc : Crypto oscillator is used for the system clock.               */
  GCR_CLKCN_CLKSEL_pll_Output          = 1,     /*!< pll_Output : The PLL output is used for the system clock.                 */
  GCR_CLKCN_CLKSEL_hfxIn               = 2,     /*!< hfxIn : HFXIN is used for the system clock.                               */
  GCR_CLKCN_CLKSEL_nanoRing            = 3,     /*!< nanoRing : The nano-ring output is used for the system clock.             */
} GCR_CLKCN_CLKSEL_Type;

/* ===============================================  GCR CLKCN CKRDY [13..13]  ================================================ */
typedef enum {
  GCR_CLKCN_CKRDY_busy                 = 0,     /*!< busy : Switchover to the new clock source (as selected by CLKSEL)
                                                                    has not yet occurred                                       */
  GCR_CLKCN_CKRDY_ready                = 1,     /*!< ready : System clock running from CLKSEL clock source                     */
} GCR_CLKCN_CKRDY_Type;

/* ==========================================================  PM  =========================================================== */
/* ==================================================  GCR PM MODE [0..1]  =================================================== */
typedef enum {
  GCR_PM_MODE_active                   = 0,     /*!< active : Active Mode                                                      */
  GCR_PM_MODE_idle                     = 1,     /*!< idle : Idle Mode                                                          */
  GCR_PM_MODE_standby                  = 2,     /*!< standby : Standby Mode                                                    */
  GCR_PM_MODE_shutdown                 = 3,     /*!< shutdown : Shutdown Mode                                                  */
} GCR_PM_MODE_Type;

/* ================================================  GCR PM GPIOWKEN [4..4]  ================================================= */
typedef enum {
  GCR_PM_GPIOWKEN_disable              = 0,     /*!< disable : Wake Up Disable                                                 */
  GCR_PM_GPIOWKEN_enable               = 1,     /*!< enable : Wake Up Enable                                                   */
} GCR_PM_GPIOWKEN_Type;

/* =================================================  GCR PM RTCWKEN [5..5]  ================================================= */
typedef enum {
  GCR_PM_RTCWKEN_disable               = 0,     /*!< disable : Wake Up Disable                                                 */
  GCR_PM_RTCWKEN_enable                = 1,     /*!< enable : Wake Up Enable                                                   */
} GCR_PM_RTCWKEN_Type;

/* =================================================  GCR PM USBWKEN [6..6]  ================================================= */
typedef enum {
  GCR_PM_USBWKEN_disable               = 0,     /*!< disable : Wake Up Disable                                                 */
  GCR_PM_USBWKEN_enable                = 1,     /*!< enable : Wake Up Enable                                                   */
} GCR_PM_USBWKEN_Type;

/* =================================================  GCR PM SCWKEN [7..7]  ================================================== */
typedef enum {
  GCR_PM_SCWKEN_disable                = 0,     /*!< disable : Wake Up Disable                                                 */
  GCR_PM_SCWKEN_enable                 = 1,     /*!< enable : Wake Up Enable                                                   */
} GCR_PM_SCWKEN_Type;

/* =================================================  GCR PM OSCPD [12..12]  ================================================= */
typedef enum {
  GCR_PM_OSCPD_disable                 = 0,     /*!< disable : Wake Up Disable                                                 */
  GCR_PM_OSCPD_enable                  = 1,     /*!< enable : Wake Up Enable                                                   */
} GCR_PM_OSCPD_Type;

/* ================================================  GCR PM PLL01PD [13..13]  ================================================ */
typedef enum {
  GCR_PM_PLL01PD_active                = 0,     /*!< active : In active mode                                                   */
  GCR_PM_PLL01PD_standBy               = 1,     /*!< standBy : In standby mode                                                 */
} GCR_PM_PLL01PD_Type;

/* =================================================  GCR PM COPD [14..14]  ================================================== */
typedef enum {
  GCR_PM_COPD_active                   = 0,     /*!< active : In active mode                                                   */
  GCR_PM_COPD_standBy                  = 1,     /*!< standBy : In standby mode                                                 */
} GCR_PM_COPD_Type;

/* ===============================================  GCR PM CM3PMUEN [16..16]  ================================================ */
typedef enum {
  GCR_PM_CM3PMUEN_disable              = 0,     /*!< disable : Wake Up Disable                                                 */
  GCR_PM_CM3PMUEN_enable               = 1,     /*!< enable : Wake Up Enable                                                   */
} GCR_PM_CM3PMUEN_Type;

/* ===============================================  GCR PM CM3WICACK [17..17]  =============================================== */
typedef enum {
  GCR_PM_CM3WICACK_reset               = 0,     /*!< reset : CM3 WIC PMU request not acknowledged or no request                */
  GCR_PM_CM3WICACK_acknowledge         = 1,     /*!< acknowledge : CM3 WIC acknowledge PMU request                             */
} GCR_PM_CM3WICACK_Type;

/* ========================================================  PLL0CN  ========================================================= */
/* ===============================================  GCR PLL0CN PLLn_EN [0..0]  =============================================== */
typedef enum {
  GCR_PLLCN_PLL0CN_PLLn_EN_disable     = 0,     /*!< disable : PLLn disable                                                    */
  GCR_PLLCN_PLL0CN_PLLn_EN_enable      = 1,     /*!< enable : PLLn enable                                                      */
} GCR_PLLCN_PLL0CN_PLLn_EN_Type;

/* ==============================================  GCR PLL0CN PLLn_LOCK [1..1]  ============================================== */
typedef enum {
  GCR_PLLCN_PLL0CN_PLLn_LOCK_unlocked  = 0,     /*!< unlocked : PLLn unlocked                                                  */
  GCR_PLLCN_PLL0CN_PLLn_LOCK_locked    = 1,     /*!< locked : PLLn locked                                                      */
} GCR_PLLCN_PLL0CN_PLLn_LOCK_Type;

/* ========================================================  PLL1CN  ========================================================= */
/* ===============================================  GCR PLL1CN PLLn_EN [0..0]  =============================================== */
typedef enum {
  GCR_PLLCN_PLL1CN_PLLn_EN_disable     = 0,     /*!< disable : PLLn disable                                                    */
  GCR_PLLCN_PLL1CN_PLLn_EN_enable      = 1,     /*!< enable : PLLn enable                                                      */
} GCR_PLLCN_PLL1CN_PLLn_EN_Type;

/* ==============================================  GCR PLL1CN PLLn_LOCK [1..1]  ============================================== */
typedef enum {
  GCR_PLLCN_PLL1CN_PLLn_LOCK_unlocked  = 0,     /*!< unlocked : PLLn unlocked                                                  */
  GCR_PLLCN_PLL1CN_PLLn_LOCK_locked    = 1,     /*!< locked : PLLn locked                                                      */
} GCR_PLLCN_PLL1CN_PLLn_LOCK_Type;

/* ========================================================  PCKDIV  ========================================================= */
/* ========================================================  PERCKCN  ======================================================== */
/* ===============================================  GCR PERCKCN GPIO0D [0..0]  =============================================== */
typedef enum {
  GCR_PERCKCN_GPIO0D_enable            = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_GPIO0D_disable           = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_GPIO0D_Type;

/* ===============================================  GCR PERCKCN GPIO1D [1..1]  =============================================== */
typedef enum {
  GCR_PERCKCN_GPIO1D_enable            = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_GPIO1D_disable           = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_GPIO1D_Type;

/* ===============================================  GCR PERCKCN GPIO2D [2..2]  =============================================== */
typedef enum {
  GCR_PERCKCN_GPIO2D_enable            = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_GPIO2D_disable           = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_GPIO2D_Type;

/* ================================================  GCR PERCKCN USBD [3..3]  ================================================ */
typedef enum {
  GCR_PERCKCN_USBD_enable              = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_USBD_disable             = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_USBD_Type;

/* ===============================================  GCR PERCKCN CLCDD [4..4]  ================================================ */
typedef enum {
  GCR_PERCKCN_CLCDD_enable             = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_CLCDD_disable            = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_CLCDD_Type;

/* ================================================  GCR PERCKCN DMAD [5..5]  ================================================ */
typedef enum {
  GCR_PERCKCN_DMAD_enable              = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_DMAD_disable             = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_DMAD_Type;

/* ===============================================  GCR PERCKCN SPI0D [6..6]  ================================================ */
typedef enum {
  GCR_PERCKCN_SPI0D_enable             = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_SPI0D_disable            = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_SPI0D_Type;

/* ===============================================  GCR PERCKCN SPI1D [7..7]  ================================================ */
typedef enum {
  GCR_PERCKCN_SPI1D_enable             = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_SPI1D_disable            = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_SPI1D_Type;

/* ===============================================  GCR PERCKCN SPI2D [8..8]  ================================================ */
typedef enum {
  GCR_PERCKCN_SPI2D_enable             = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_SPI2D_disable            = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_SPI2D_Type;

/* ===============================================  GCR PERCKCN UART0D [9..9]  =============================================== */
typedef enum {
  GCR_PERCKCN_UART0D_enable            = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_UART0D_disable           = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_UART0D_Type;

/* ==============================================  GCR PERCKCN UART1D [10..10]  ============================================== */
typedef enum {
  GCR_PERCKCN_UART1D_enable            = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_UART1D_disable           = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_UART1D_Type;

/* =============================================  GCR PERCKCN MAGDSPD [11..11]  ============================================== */
typedef enum {
  GCR_PERCKCN_MAGDSPD_enable           = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_MAGDSPD_disable          = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_MAGDSPD_Type;

/* ===============================================  GCR PERCKCN SCD [12..12]  ================================================ */
typedef enum {
  GCR_PERCKCN_SCD_enable               = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_SCD_disable              = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_SCD_Type;

/* ===============================================  GCR PERCKCN I2CD [13..13]  =============================================== */
typedef enum {
  GCR_PERCKCN_I2CD_enable              = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_I2CD_disable             = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_I2CD_Type;

/* =============================================  GCR PERCKCN CRYPTOD [14..14]  ============================================== */
typedef enum {
  GCR_PERCKCN_CRYPTOD_enable           = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_CRYPTOD_disable          = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_CRYPTOD_Type;

/* ===============================================  GCR PERCKCN T0D [15..15]  ================================================ */
typedef enum {
  GCR_PERCKCN_T0D_enable               = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_T0D_disable              = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_T0D_Type;

/* ===============================================  GCR PERCKCN T1D [16..16]  ================================================ */
typedef enum {
  GCR_PERCKCN_T1D_enable               = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_T1D_disable              = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_T1D_Type;

/* ===============================================  GCR PERCKCN T2D [17..17]  ================================================ */
typedef enum {
  GCR_PERCKCN_T2D_enable               = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_T2D_disable              = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_T2D_Type;

/* ===============================================  GCR PERCKCN T3D [18..18]  ================================================ */
typedef enum {
  GCR_PERCKCN_T3D_enable               = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_T3D_disable              = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_T3D_Type;

/* ===============================================  GCR PERCKCN T4D [19..19]  ================================================ */
typedef enum {
  GCR_PERCKCN_T4D_enable               = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_T4D_disable              = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_T4D_Type;

/* ===============================================  GCR PERCKCN T5D [20..20]  ================================================ */
typedef enum {
  GCR_PERCKCN_T5D_enable               = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_T5D_disable              = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_T5D_Type;

/* ==============================================  GCR PERCKCN MLCDD [21..21]  =============================================== */
typedef enum {
  GCR_PERCKCN_MLCDD_enable             = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_MLCDD_disable            = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_MLCDD_Type;

/* ===============================================  GCR PERCKCN KBDD [22..22]  =============================================== */
typedef enum {
  GCR_PERCKCN_KBDD_enable              = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_KBDD_disable             = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_KBDD_Type;

/* ===============================================  GCR PERCKCN ADCC [23..23]  =============================================== */
typedef enum {
  GCR_PERCKCN_ADCC_enable              = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_ADCC_disable             = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_ADCC_Type;

/* ===============================================  GCR PERCKCN DACD [24..24]  =============================================== */
typedef enum {
  GCR_PERCKCN_DACD_enable              = 0,     /*!< enable : enable it                                                        */
  GCR_PERCKCN_DACD_disable             = 1,     /*!< disable : disable it                                                      */
} GCR_PERCKCN_DACD_Type;

/* ========================================================  MEMZCN  ========================================================= */
/* ================================================  GCR MEMZCN SRAM0 [0..0]  ================================================ */
typedef enum {
  GCR_MEMZCN_SRAM0_nop                 = 0,     /*!< nop : No operation/complete                                               */
  GCR_MEMZCN_SRAM0_start               = 1,     /*!< start : Start operation                                                   */
} GCR_MEMZCN_SRAM0_Type;

/* ================================================  GCR MEMZCN SRAM1 [1..1]  ================================================ */
typedef enum {
  GCR_MEMZCN_SRAM1_nop                 = 0,     /*!< nop : No operation/complete                                               */
  GCR_MEMZCN_SRAM1_start               = 1,     /*!< start : Start operation                                                   */
} GCR_MEMZCN_SRAM1_Type;

/* ===============================================  GCR MEMZCN ICACHE [3..3]  ================================================ */
typedef enum {
  GCR_MEMZCN_ICACHE_nop                = 0,     /*!< nop : No operation/complete                                               */
  GCR_MEMZCN_ICACHE_start              = 1,     /*!< start : Start operation                                                   */
} GCR_MEMZCN_ICACHE_Type;

/* ===============================================  GCR MEMZCN CRYPTO [5..5]  ================================================ */
typedef enum {
  GCR_MEMZCN_CRYPTO_nop                = 0,     /*!< nop : No operation/complete                                               */
  GCR_MEMZCN_CRYPTO_start              = 1,     /*!< start : Start operation                                                   */
} GCR_MEMZCN_CRYPTO_Type;

/* =========================================================  SCCK  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            SIR                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  SISTAT  ========================================================= */
/* ================================================  SIR SISTAT MAGIC [0..0]  ================================================ */
typedef enum {
  SIR_SISTAT_MAGIC_magicNotSet         = 0,     /*!< magicNotSet : Magic word was not set (OTP has not been initialized
                                                      properly).                                                               */
  SIR_SISTAT_MAGIC_magicSet            = 1,     /*!< magicSet : Magic word was set (OTP contains valid settings).              */
} SIR_SISTAT_MAGIC_Type;

/* ===============================================  SIR SISTAT CRCERR [1..1]  ================================================ */
typedef enum {
  SIR_SISTAT_CRCERR_noError            = 0,     /*!< noError : No CRC errors occurred during the read of the OTP
                                                      memory block.                                                            */
  SIR_SISTAT_CRCERR_error              = 1,     /*!< error : A CRC error occurred while reading the OTP. The address
                                                      of the failure location in the OTP memory is stored in
                                                      the ERRADDR register.                                                    */
} SIR_SISTAT_CRCERR_Type;

/* ========================================================  ERRADDR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            ICC                                            ================ */
/* =========================================================================================================================== */

/* =======================================================  CACHE_ID  ======================================================== */
/* ========================================================  MEMCFG  ========================================================= */
/* ======================================================  CACHE_CTRL  ======================================================= */
/* ============================================  ICC CACHE_CTRL CACHE_EN [0..0]  ============================================= */
typedef enum {
  ICC_CACHE_CTRL_CACHE_EN_disable      = 0,     /*!< disable : Cache Bypassed. Instruction data is stored in the
                                                      line fill buffer but is not written to main cache memory
                                                      array.                                                                   */
  ICC_CACHE_CTRL_CACHE_EN_enable       = 1,     /*!< enable : Cache Enabled                                                    */
} ICC_CACHE_CTRL_CACHE_EN_Type;

/* ===========================================  ICC CACHE_CTRL CACHE_RDY [16..16]  =========================================== */
typedef enum {
  ICC_CACHE_CTRL_CACHE_RDY_notReady    = 0,     /*!< notReady : Not Ready                                                      */
  ICC_CACHE_CTRL_CACHE_RDY_ready       = 1,     /*!< ready : Ready                                                             */
} ICC_CACHE_CTRL_CACHE_RDY_Type;

/* ======================================================  INVALIDATE  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           GPIOn                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  EN  =========================================================== */
/* =================================================  GPIOn EN BIT0 [0..0]  ================================================== */
typedef enum {
  GPIOn_EN_BIT0_disable                = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT0_enable                 = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT0_Type;

/* =================================================  GPIOn EN BIT1 [1..1]  ================================================== */
typedef enum {
  GPIOn_EN_BIT1_disable                = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT1_enable                 = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT1_Type;

/* =================================================  GPIOn EN BIT2 [2..2]  ================================================== */
typedef enum {
  GPIOn_EN_BIT2_disable                = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT2_enable                 = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT2_Type;

/* =================================================  GPIOn EN BIT3 [3..3]  ================================================== */
typedef enum {
  GPIOn_EN_BIT3_disable                = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT3_enable                 = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT3_Type;

/* =================================================  GPIOn EN BIT4 [4..4]  ================================================== */
typedef enum {
  GPIOn_EN_BIT4_disable                = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT4_enable                 = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT4_Type;

/* =================================================  GPIOn EN BIT5 [5..5]  ================================================== */
typedef enum {
  GPIOn_EN_BIT5_disable                = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT5_enable                 = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT5_Type;

/* =================================================  GPIOn EN BIT6 [6..6]  ================================================== */
typedef enum {
  GPIOn_EN_BIT6_disable                = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT6_enable                 = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT6_Type;

/* =================================================  GPIOn EN BIT7 [7..7]  ================================================== */
typedef enum {
  GPIOn_EN_BIT7_disable                = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT7_enable                 = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT7_Type;

/* =================================================  GPIOn EN BIT8 [8..8]  ================================================== */
typedef enum {
  GPIOn_EN_BIT8_disable                = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT8_enable                 = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT8_Type;

/* =================================================  GPIOn EN BIT9 [9..9]  ================================================== */
typedef enum {
  GPIOn_EN_BIT9_disable                = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT9_enable                 = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT9_Type;

/* ================================================  GPIOn EN BIT10 [10..10]  ================================================ */
typedef enum {
  GPIOn_EN_BIT10_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT10_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT10_Type;

/* ================================================  GPIOn EN BIT11 [11..11]  ================================================ */
typedef enum {
  GPIOn_EN_BIT11_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT11_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT11_Type;

/* ================================================  GPIOn EN BIT12 [12..12]  ================================================ */
typedef enum {
  GPIOn_EN_BIT12_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT12_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT12_Type;

/* ================================================  GPIOn EN BIT13 [13..13]  ================================================ */
typedef enum {
  GPIOn_EN_BIT13_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT13_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT13_Type;

/* ================================================  GPIOn EN BIT14 [14..14]  ================================================ */
typedef enum {
  GPIOn_EN_BIT14_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT14_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT14_Type;

/* ================================================  GPIOn EN BIT15 [15..15]  ================================================ */
typedef enum {
  GPIOn_EN_BIT15_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT15_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT15_Type;

/* ================================================  GPIOn EN BIT16 [16..16]  ================================================ */
typedef enum {
  GPIOn_EN_BIT16_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT16_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT16_Type;

/* ================================================  GPIOn EN BIT17 [17..17]  ================================================ */
typedef enum {
  GPIOn_EN_BIT17_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT17_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT17_Type;

/* ================================================  GPIOn EN BIT18 [18..18]  ================================================ */
typedef enum {
  GPIOn_EN_BIT18_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT18_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT18_Type;

/* ================================================  GPIOn EN BIT19 [19..19]  ================================================ */
typedef enum {
  GPIOn_EN_BIT19_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT19_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT19_Type;

/* ================================================  GPIOn EN BIT20 [20..20]  ================================================ */
typedef enum {
  GPIOn_EN_BIT20_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT20_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT20_Type;

/* ================================================  GPIOn EN BIT21 [21..21]  ================================================ */
typedef enum {
  GPIOn_EN_BIT21_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT21_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT21_Type;

/* ================================================  GPIOn EN BIT22 [22..22]  ================================================ */
typedef enum {
  GPIOn_EN_BIT22_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT22_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT22_Type;

/* ================================================  GPIOn EN BIT23 [23..23]  ================================================ */
typedef enum {
  GPIOn_EN_BIT23_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT23_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT23_Type;

/* ================================================  GPIOn EN BIT24 [24..24]  ================================================ */
typedef enum {
  GPIOn_EN_BIT24_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT24_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT24_Type;

/* ================================================  GPIOn EN BIT25 [25..25]  ================================================ */
typedef enum {
  GPIOn_EN_BIT25_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT25_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT25_Type;

/* ================================================  GPIOn EN BIT26 [26..26]  ================================================ */
typedef enum {
  GPIOn_EN_BIT26_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT26_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT26_Type;

/* ================================================  GPIOn EN BIT27 [27..27]  ================================================ */
typedef enum {
  GPIOn_EN_BIT27_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT27_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT27_Type;

/* ================================================  GPIOn EN BIT28 [28..28]  ================================================ */
typedef enum {
  GPIOn_EN_BIT28_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT28_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT28_Type;

/* ================================================  GPIOn EN BIT29 [29..29]  ================================================ */
typedef enum {
  GPIOn_EN_BIT29_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT29_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT29_Type;

/* ================================================  GPIOn EN BIT30 [30..30]  ================================================ */
typedef enum {
  GPIOn_EN_BIT30_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT30_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT30_Type;

/* ================================================  GPIOn EN BIT31 [31..31]  ================================================ */
typedef enum {
  GPIOn_EN_BIT31_disable               = 0,     /*!< disable : Disable                                                         */
  GPIOn_EN_BIT31_enable                = 1,     /*!< enable : Enable                                                           */
} GPIOn_EN_BIT31_Type;

/* ========================================================  OUT_EN  ========================================================= */
/* ===============================================  GPIOn OUT_EN BIT0 [0..0]  ================================================ */
typedef enum {
  GPIOn_OUT_EN_BIT0_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT0_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT0_Type;

/* ===============================================  GPIOn OUT_EN BIT1 [1..1]  ================================================ */
typedef enum {
  GPIOn_OUT_EN_BIT1_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT1_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT1_Type;

/* ===============================================  GPIOn OUT_EN BIT2 [2..2]  ================================================ */
typedef enum {
  GPIOn_OUT_EN_BIT2_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT2_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT2_Type;

/* ===============================================  GPIOn OUT_EN BIT3 [3..3]  ================================================ */
typedef enum {
  GPIOn_OUT_EN_BIT3_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT3_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT3_Type;

/* ===============================================  GPIOn OUT_EN BIT4 [4..4]  ================================================ */
typedef enum {
  GPIOn_OUT_EN_BIT4_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT4_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT4_Type;

/* ===============================================  GPIOn OUT_EN BIT5 [5..5]  ================================================ */
typedef enum {
  GPIOn_OUT_EN_BIT5_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT5_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT5_Type;

/* ===============================================  GPIOn OUT_EN BIT6 [6..6]  ================================================ */
typedef enum {
  GPIOn_OUT_EN_BIT6_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT6_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT6_Type;

/* ===============================================  GPIOn OUT_EN BIT7 [7..7]  ================================================ */
typedef enum {
  GPIOn_OUT_EN_BIT7_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT7_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT7_Type;

/* ===============================================  GPIOn OUT_EN BIT8 [8..8]  ================================================ */
typedef enum {
  GPIOn_OUT_EN_BIT8_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT8_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT8_Type;

/* ===============================================  GPIOn OUT_EN BIT9 [9..9]  ================================================ */
typedef enum {
  GPIOn_OUT_EN_BIT9_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT9_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT9_Type;

/* ==============================================  GPIOn OUT_EN BIT10 [10..10]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT10_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT10_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT10_Type;

/* ==============================================  GPIOn OUT_EN BIT11 [11..11]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT11_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT11_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT11_Type;

/* ==============================================  GPIOn OUT_EN BIT12 [12..12]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT12_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT12_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT12_Type;

/* ==============================================  GPIOn OUT_EN BIT13 [13..13]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT13_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT13_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT13_Type;

/* ==============================================  GPIOn OUT_EN BIT14 [14..14]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT14_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT14_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT14_Type;

/* ==============================================  GPIOn OUT_EN BIT15 [15..15]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT15_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT15_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT15_Type;

/* ==============================================  GPIOn OUT_EN BIT16 [16..16]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT16_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT16_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT16_Type;

/* ==============================================  GPIOn OUT_EN BIT17 [17..17]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT17_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT17_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT17_Type;

/* ==============================================  GPIOn OUT_EN BIT18 [18..18]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT18_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT18_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT18_Type;

/* ==============================================  GPIOn OUT_EN BIT19 [19..19]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT19_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT19_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT19_Type;

/* ==============================================  GPIOn OUT_EN BIT20 [20..20]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT20_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT20_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT20_Type;

/* ==============================================  GPIOn OUT_EN BIT21 [21..21]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT21_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT21_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT21_Type;

/* ==============================================  GPIOn OUT_EN BIT22 [22..22]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT22_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT22_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT22_Type;

/* ==============================================  GPIOn OUT_EN BIT23 [23..23]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT23_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT23_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT23_Type;

/* ==============================================  GPIOn OUT_EN BIT24 [24..24]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT24_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT24_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT24_Type;

/* ==============================================  GPIOn OUT_EN BIT25 [25..25]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT25_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT25_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT25_Type;

/* ==============================================  GPIOn OUT_EN BIT26 [26..26]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT26_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT26_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT26_Type;

/* ==============================================  GPIOn OUT_EN BIT27 [27..27]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT27_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT27_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT27_Type;

/* ==============================================  GPIOn OUT_EN BIT28 [28..28]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT28_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT28_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT28_Type;

/* ==============================================  GPIOn OUT_EN BIT29 [29..29]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT29_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT29_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT29_Type;

/* ==============================================  GPIOn OUT_EN BIT30 [30..30]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT30_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT30_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT30_Type;

/* ==============================================  GPIOn OUT_EN BIT31 [31..31]  ============================================== */
typedef enum {
  GPIOn_OUT_EN_BIT31_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_OUT_EN_BIT31_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_OUT_EN_BIT31_Type;

/* ==========================================================  OUT  ========================================================== */
/* =================================================  GPIOn OUT BIT0 [0..0]  ================================================= */
typedef enum {
  GPIOn_OUT_BIT0_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT0_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT0_Type;

/* =================================================  GPIOn OUT BIT1 [1..1]  ================================================= */
typedef enum {
  GPIOn_OUT_BIT1_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT1_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT1_Type;

/* =================================================  GPIOn OUT BIT2 [2..2]  ================================================= */
typedef enum {
  GPIOn_OUT_BIT2_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT2_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT2_Type;

/* =================================================  GPIOn OUT BIT3 [3..3]  ================================================= */
typedef enum {
  GPIOn_OUT_BIT3_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT3_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT3_Type;

/* =================================================  GPIOn OUT BIT4 [4..4]  ================================================= */
typedef enum {
  GPIOn_OUT_BIT4_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT4_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT4_Type;

/* =================================================  GPIOn OUT BIT5 [5..5]  ================================================= */
typedef enum {
  GPIOn_OUT_BIT5_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT5_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT5_Type;

/* =================================================  GPIOn OUT BIT6 [6..6]  ================================================= */
typedef enum {
  GPIOn_OUT_BIT6_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT6_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT6_Type;

/* =================================================  GPIOn OUT BIT7 [7..7]  ================================================= */
typedef enum {
  GPIOn_OUT_BIT7_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT7_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT7_Type;

/* =================================================  GPIOn OUT BIT8 [8..8]  ================================================= */
typedef enum {
  GPIOn_OUT_BIT8_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT8_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT8_Type;

/* =================================================  GPIOn OUT BIT9 [9..9]  ================================================= */
typedef enum {
  GPIOn_OUT_BIT9_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT9_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT9_Type;

/* ===============================================  GPIOn OUT BIT10 [10..10]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT10_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT10_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT10_Type;

/* ===============================================  GPIOn OUT BIT11 [11..11]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT11_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT11_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT11_Type;

/* ===============================================  GPIOn OUT BIT12 [12..12]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT12_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT12_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT12_Type;

/* ===============================================  GPIOn OUT BIT13 [13..13]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT13_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT13_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT13_Type;

/* ===============================================  GPIOn OUT BIT14 [14..14]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT14_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT14_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT14_Type;

/* ===============================================  GPIOn OUT BIT15 [15..15]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT15_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT15_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT15_Type;

/* ===============================================  GPIOn OUT BIT16 [16..16]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT16_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT16_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT16_Type;

/* ===============================================  GPIOn OUT BIT17 [17..17]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT17_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT17_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT17_Type;

/* ===============================================  GPIOn OUT BIT18 [18..18]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT18_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT18_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT18_Type;

/* ===============================================  GPIOn OUT BIT19 [19..19]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT19_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT19_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT19_Type;

/* ===============================================  GPIOn OUT BIT20 [20..20]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT20_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT20_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT20_Type;

/* ===============================================  GPIOn OUT BIT21 [21..21]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT21_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT21_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT21_Type;

/* ===============================================  GPIOn OUT BIT22 [22..22]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT22_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT22_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT22_Type;

/* ===============================================  GPIOn OUT BIT23 [23..23]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT23_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT23_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT23_Type;

/* ===============================================  GPIOn OUT BIT24 [24..24]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT24_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT24_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT24_Type;

/* ===============================================  GPIOn OUT BIT25 [25..25]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT25_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT25_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT25_Type;

/* ===============================================  GPIOn OUT BIT26 [26..26]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT26_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT26_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT26_Type;

/* ===============================================  GPIOn OUT BIT27 [27..27]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT27_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT27_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT27_Type;

/* ===============================================  GPIOn OUT BIT28 [28..28]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT28_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT28_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT28_Type;

/* ===============================================  GPIOn OUT BIT29 [29..29]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT29_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT29_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT29_Type;

/* ===============================================  GPIOn OUT BIT30 [30..30]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT30_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT30_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT30_Type;

/* ===============================================  GPIOn OUT BIT31 [31..31]  ================================================ */
typedef enum {
  GPIOn_OUT_BIT31_lo                   = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_OUT_BIT31_hi                   = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_OUT_BIT31_Type;

/* ========================================================  OUT_SET  ======================================================== */
/* ===============================================  GPIOn OUT_SET BIT0 [0..0]  =============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT0_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT0_set               = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT0_Type;

/* ===============================================  GPIOn OUT_SET BIT1 [1..1]  =============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT1_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT1_set               = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT1_Type;

/* ===============================================  GPIOn OUT_SET BIT2 [2..2]  =============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT2_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT2_set               = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT2_Type;

/* ===============================================  GPIOn OUT_SET BIT3 [3..3]  =============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT3_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT3_set               = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT3_Type;

/* ===============================================  GPIOn OUT_SET BIT4 [4..4]  =============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT4_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT4_set               = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT4_Type;

/* ===============================================  GPIOn OUT_SET BIT5 [5..5]  =============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT5_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT5_set               = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT5_Type;

/* ===============================================  GPIOn OUT_SET BIT6 [6..6]  =============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT6_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT6_set               = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT6_Type;

/* ===============================================  GPIOn OUT_SET BIT7 [7..7]  =============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT7_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT7_set               = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT7_Type;

/* ===============================================  GPIOn OUT_SET BIT8 [8..8]  =============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT8_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT8_set               = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT8_Type;

/* ===============================================  GPIOn OUT_SET BIT9 [9..9]  =============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT9_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT9_set               = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT9_Type;

/* =============================================  GPIOn OUT_SET BIT10 [10..10]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT10_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT10_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT10_Type;

/* =============================================  GPIOn OUT_SET BIT11 [11..11]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT11_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT11_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT11_Type;

/* =============================================  GPIOn OUT_SET BIT12 [12..12]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT12_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT12_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT12_Type;

/* =============================================  GPIOn OUT_SET BIT13 [13..13]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT13_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT13_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT13_Type;

/* =============================================  GPIOn OUT_SET BIT14 [14..14]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT14_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT14_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT14_Type;

/* =============================================  GPIOn OUT_SET BIT15 [15..15]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT15_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT15_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT15_Type;

/* =============================================  GPIOn OUT_SET BIT16 [16..16]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT16_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT16_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT16_Type;

/* =============================================  GPIOn OUT_SET BIT17 [17..17]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT17_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT17_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT17_Type;

/* =============================================  GPIOn OUT_SET BIT18 [18..18]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT18_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT18_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT18_Type;

/* =============================================  GPIOn OUT_SET BIT19 [19..19]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT19_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT19_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT19_Type;

/* =============================================  GPIOn OUT_SET BIT20 [20..20]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT20_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT20_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT20_Type;

/* =============================================  GPIOn OUT_SET BIT21 [21..21]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT21_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT21_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT21_Type;

/* =============================================  GPIOn OUT_SET BIT22 [22..22]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT22_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT22_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT22_Type;

/* =============================================  GPIOn OUT_SET BIT23 [23..23]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT23_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT23_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT23_Type;

/* =============================================  GPIOn OUT_SET BIT24 [24..24]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT24_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT24_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT24_Type;

/* =============================================  GPIOn OUT_SET BIT25 [25..25]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT25_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT25_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT25_Type;

/* =============================================  GPIOn OUT_SET BIT26 [26..26]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT26_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT26_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT26_Type;

/* =============================================  GPIOn OUT_SET BIT27 [27..27]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT27_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT27_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT27_Type;

/* =============================================  GPIOn OUT_SET BIT28 [28..28]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT28_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT28_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT28_Type;

/* =============================================  GPIOn OUT_SET BIT29 [29..29]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT29_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT29_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT29_Type;

/* =============================================  GPIOn OUT_SET BIT30 [30..30]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT30_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT30_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT30_Type;

/* =============================================  GPIOn OUT_SET BIT31 [31..31]  ============================================== */
typedef enum {
  GPIOn_OUT_SET_BIT31_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_SET_BIT31_set              = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_OUT_SET_BIT31_Type;

/* ========================================================  OUT_CLR  ======================================================== */
/* ===============================================  GPIOn OUT_CLR BIT0 [0..0]  =============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT0_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT0_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT0_Type;

/* ===============================================  GPIOn OUT_CLR BIT1 [1..1]  =============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT1_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT1_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT1_Type;

/* ===============================================  GPIOn OUT_CLR BIT2 [2..2]  =============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT2_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT2_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT2_Type;

/* ===============================================  GPIOn OUT_CLR BIT3 [3..3]  =============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT3_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT3_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT3_Type;

/* ===============================================  GPIOn OUT_CLR BIT4 [4..4]  =============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT4_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT4_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT4_Type;

/* ===============================================  GPIOn OUT_CLR BIT5 [5..5]  =============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT5_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT5_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT5_Type;

/* ===============================================  GPIOn OUT_CLR BIT6 [6..6]  =============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT6_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT6_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT6_Type;

/* ===============================================  GPIOn OUT_CLR BIT7 [7..7]  =============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT7_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT7_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT7_Type;

/* ===============================================  GPIOn OUT_CLR BIT8 [8..8]  =============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT8_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT8_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT8_Type;

/* ===============================================  GPIOn OUT_CLR BIT9 [9..9]  =============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT9_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT9_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT9_Type;

/* =============================================  GPIOn OUT_CLR BIT10 [10..10]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT10_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT10_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT10_Type;

/* =============================================  GPIOn OUT_CLR BIT11 [11..11]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT11_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT11_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT11_Type;

/* =============================================  GPIOn OUT_CLR BIT12 [12..12]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT12_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT12_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT12_Type;

/* =============================================  GPIOn OUT_CLR BIT13 [13..13]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT13_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT13_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT13_Type;

/* =============================================  GPIOn OUT_CLR BIT14 [14..14]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT14_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT14_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT14_Type;

/* =============================================  GPIOn OUT_CLR BIT15 [15..15]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT15_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT15_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT15_Type;

/* =============================================  GPIOn OUT_CLR BIT16 [16..16]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT16_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT16_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT16_Type;

/* =============================================  GPIOn OUT_CLR BIT17 [17..17]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT17_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT17_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT17_Type;

/* =============================================  GPIOn OUT_CLR BIT18 [18..18]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT18_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT18_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT18_Type;

/* =============================================  GPIOn OUT_CLR BIT19 [19..19]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT19_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT19_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT19_Type;

/* =============================================  GPIOn OUT_CLR BIT20 [20..20]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT20_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT20_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT20_Type;

/* =============================================  GPIOn OUT_CLR BIT21 [21..21]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT21_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT21_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT21_Type;

/* =============================================  GPIOn OUT_CLR BIT22 [22..22]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT22_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT22_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT22_Type;

/* =============================================  GPIOn OUT_CLR BIT23 [23..23]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT23_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT23_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT23_Type;

/* =============================================  GPIOn OUT_CLR BIT24 [24..24]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT24_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT24_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT24_Type;

/* =============================================  GPIOn OUT_CLR BIT25 [25..25]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT25_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT25_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT25_Type;

/* =============================================  GPIOn OUT_CLR BIT26 [26..26]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT26_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT26_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT26_Type;

/* =============================================  GPIOn OUT_CLR BIT27 [27..27]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT27_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT27_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT27_Type;

/* =============================================  GPIOn OUT_CLR BIT28 [28..28]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT28_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT28_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT28_Type;

/* =============================================  GPIOn OUT_CLR BIT29 [29..29]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT29_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT29_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT29_Type;

/* =============================================  GPIOn OUT_CLR BIT30 [30..30]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT30_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT30_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT30_Type;

/* =============================================  GPIOn OUT_CLR BIT31 [31..31]  ============================================== */
typedef enum {
  GPIOn_OUT_CLR_BIT31_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_OUT_CLR_BIT31_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_OUT_CLR_BIT31_Type;

/* ==========================================================  IN  =========================================================== */
/* =================================================  GPIOn IN BIT0 [0..0]  ================================================== */
typedef enum {
  GPIOn_IN_BIT0_lo                     = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT0_hi                     = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT0_Type;

/* =================================================  GPIOn IN BIT1 [1..1]  ================================================== */
typedef enum {
  GPIOn_IN_BIT1_lo                     = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT1_hi                     = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT1_Type;

/* =================================================  GPIOn IN BIT2 [2..2]  ================================================== */
typedef enum {
  GPIOn_IN_BIT2_lo                     = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT2_hi                     = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT2_Type;

/* =================================================  GPIOn IN BIT3 [3..3]  ================================================== */
typedef enum {
  GPIOn_IN_BIT3_lo                     = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT3_hi                     = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT3_Type;

/* =================================================  GPIOn IN BIT4 [4..4]  ================================================== */
typedef enum {
  GPIOn_IN_BIT4_lo                     = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT4_hi                     = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT4_Type;

/* =================================================  GPIOn IN BIT5 [5..5]  ================================================== */
typedef enum {
  GPIOn_IN_BIT5_lo                     = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT5_hi                     = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT5_Type;

/* =================================================  GPIOn IN BIT6 [6..6]  ================================================== */
typedef enum {
  GPIOn_IN_BIT6_lo                     = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT6_hi                     = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT6_Type;

/* =================================================  GPIOn IN BIT7 [7..7]  ================================================== */
typedef enum {
  GPIOn_IN_BIT7_lo                     = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT7_hi                     = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT7_Type;

/* =================================================  GPIOn IN BIT8 [8..8]  ================================================== */
typedef enum {
  GPIOn_IN_BIT8_lo                     = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT8_hi                     = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT8_Type;

/* =================================================  GPIOn IN BIT9 [9..9]  ================================================== */
typedef enum {
  GPIOn_IN_BIT9_lo                     = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT9_hi                     = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT9_Type;

/* ================================================  GPIOn IN BIT10 [10..10]  ================================================ */
typedef enum {
  GPIOn_IN_BIT10_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT10_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT10_Type;

/* ================================================  GPIOn IN BIT11 [11..11]  ================================================ */
typedef enum {
  GPIOn_IN_BIT11_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT11_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT11_Type;

/* ================================================  GPIOn IN BIT12 [12..12]  ================================================ */
typedef enum {
  GPIOn_IN_BIT12_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT12_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT12_Type;

/* ================================================  GPIOn IN BIT13 [13..13]  ================================================ */
typedef enum {
  GPIOn_IN_BIT13_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT13_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT13_Type;

/* ================================================  GPIOn IN BIT14 [14..14]  ================================================ */
typedef enum {
  GPIOn_IN_BIT14_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT14_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT14_Type;

/* ================================================  GPIOn IN BIT15 [15..15]  ================================================ */
typedef enum {
  GPIOn_IN_BIT15_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT15_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT15_Type;

/* ================================================  GPIOn IN BIT16 [16..16]  ================================================ */
typedef enum {
  GPIOn_IN_BIT16_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT16_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT16_Type;

/* ================================================  GPIOn IN BIT17 [17..17]  ================================================ */
typedef enum {
  GPIOn_IN_BIT17_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT17_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT17_Type;

/* ================================================  GPIOn IN BIT18 [18..18]  ================================================ */
typedef enum {
  GPIOn_IN_BIT18_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT18_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT18_Type;

/* ================================================  GPIOn IN BIT19 [19..19]  ================================================ */
typedef enum {
  GPIOn_IN_BIT19_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT19_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT19_Type;

/* ================================================  GPIOn IN BIT20 [20..20]  ================================================ */
typedef enum {
  GPIOn_IN_BIT20_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT20_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT20_Type;

/* ================================================  GPIOn IN BIT21 [21..21]  ================================================ */
typedef enum {
  GPIOn_IN_BIT21_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT21_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT21_Type;

/* ================================================  GPIOn IN BIT22 [22..22]  ================================================ */
typedef enum {
  GPIOn_IN_BIT22_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT22_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT22_Type;

/* ================================================  GPIOn IN BIT23 [23..23]  ================================================ */
typedef enum {
  GPIOn_IN_BIT23_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT23_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT23_Type;

/* ================================================  GPIOn IN BIT24 [24..24]  ================================================ */
typedef enum {
  GPIOn_IN_BIT24_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT24_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT24_Type;

/* ================================================  GPIOn IN BIT25 [25..25]  ================================================ */
typedef enum {
  GPIOn_IN_BIT25_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT25_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT25_Type;

/* ================================================  GPIOn IN BIT26 [26..26]  ================================================ */
typedef enum {
  GPIOn_IN_BIT26_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT26_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT26_Type;

/* ================================================  GPIOn IN BIT27 [27..27]  ================================================ */
typedef enum {
  GPIOn_IN_BIT27_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT27_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT27_Type;

/* ================================================  GPIOn IN BIT28 [28..28]  ================================================ */
typedef enum {
  GPIOn_IN_BIT28_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT28_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT28_Type;

/* ================================================  GPIOn IN BIT29 [29..29]  ================================================ */
typedef enum {
  GPIOn_IN_BIT29_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT29_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT29_Type;

/* ================================================  GPIOn IN BIT30 [30..30]  ================================================ */
typedef enum {
  GPIOn_IN_BIT30_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT30_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT30_Type;

/* ================================================  GPIOn IN BIT31 [31..31]  ================================================ */
typedef enum {
  GPIOn_IN_BIT31_lo                    = 0,     /*!< lo : Logic 0 (low)                                                        */
  GPIOn_IN_BIT31_hi                    = 1,     /*!< hi : Logic 1 (high)                                                       */
} GPIOn_IN_BIT31_Type;

/* ========================================================  INT_MOD  ======================================================== */
/* ===============================================  GPIOn INT_MOD BIT0 [0..0]  =============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT0_level             = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT0_edge              = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT0_Type;

/* ===============================================  GPIOn INT_MOD BIT1 [1..1]  =============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT1_level             = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT1_edge              = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT1_Type;

/* ===============================================  GPIOn INT_MOD BIT2 [2..2]  =============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT2_level             = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT2_edge              = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT2_Type;

/* ===============================================  GPIOn INT_MOD BIT3 [3..3]  =============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT3_level             = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT3_edge              = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT3_Type;

/* ===============================================  GPIOn INT_MOD BIT4 [4..4]  =============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT4_level             = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT4_edge              = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT4_Type;

/* ===============================================  GPIOn INT_MOD BIT5 [5..5]  =============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT5_level             = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT5_edge              = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT5_Type;

/* ===============================================  GPIOn INT_MOD BIT6 [6..6]  =============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT6_level             = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT6_edge              = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT6_Type;

/* ===============================================  GPIOn INT_MOD BIT7 [7..7]  =============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT7_level             = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT7_edge              = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT7_Type;

/* ===============================================  GPIOn INT_MOD BIT8 [8..8]  =============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT8_level             = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT8_edge              = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT8_Type;

/* ===============================================  GPIOn INT_MOD BIT9 [9..9]  =============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT9_level             = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT9_edge              = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT9_Type;

/* =============================================  GPIOn INT_MOD BIT10 [10..10]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT10_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT10_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT10_Type;

/* =============================================  GPIOn INT_MOD BIT11 [11..11]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT11_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT11_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT11_Type;

/* =============================================  GPIOn INT_MOD BIT12 [12..12]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT12_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT12_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT12_Type;

/* =============================================  GPIOn INT_MOD BIT13 [13..13]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT13_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT13_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT13_Type;

/* =============================================  GPIOn INT_MOD BIT14 [14..14]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT14_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT14_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT14_Type;

/* =============================================  GPIOn INT_MOD BIT15 [15..15]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT15_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT15_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT15_Type;

/* =============================================  GPIOn INT_MOD BIT16 [16..16]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT16_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT16_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT16_Type;

/* =============================================  GPIOn INT_MOD BIT17 [17..17]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT17_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT17_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT17_Type;

/* =============================================  GPIOn INT_MOD BIT18 [18..18]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT18_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT18_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT18_Type;

/* =============================================  GPIOn INT_MOD BIT19 [19..19]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT19_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT19_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT19_Type;

/* =============================================  GPIOn INT_MOD BIT20 [20..20]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT20_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT20_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT20_Type;

/* =============================================  GPIOn INT_MOD BIT21 [21..21]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT21_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT21_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT21_Type;

/* =============================================  GPIOn INT_MOD BIT22 [22..22]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT22_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT22_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT22_Type;

/* =============================================  GPIOn INT_MOD BIT23 [23..23]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT23_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT23_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT23_Type;

/* =============================================  GPIOn INT_MOD BIT24 [24..24]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT24_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT24_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT24_Type;

/* =============================================  GPIOn INT_MOD BIT25 [25..25]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT25_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT25_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT25_Type;

/* =============================================  GPIOn INT_MOD BIT26 [26..26]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT26_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT26_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT26_Type;

/* =============================================  GPIOn INT_MOD BIT27 [27..27]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT27_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT27_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT27_Type;

/* =============================================  GPIOn INT_MOD BIT28 [28..28]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT28_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT28_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT28_Type;

/* =============================================  GPIOn INT_MOD BIT29 [29..29]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT29_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT29_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT29_Type;

/* =============================================  GPIOn INT_MOD BIT30 [30..30]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT30_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT30_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT30_Type;

/* =============================================  GPIOn INT_MOD BIT31 [31..31]  ============================================== */
typedef enum {
  GPIOn_INT_MOD_BIT31_level            = 0,     /*!< level : Interrupts for this pin are level triggered.                      */
  GPIOn_INT_MOD_BIT31_edge             = 1,     /*!< edge : Interrupts for this pin are edge triggered.                        */
} GPIOn_INT_MOD_BIT31_Type;

/* ========================================================  INT_POL  ======================================================== */
/* ===============================================  GPIOn INT_POL BIT0 [0..0]  =============================================== */
typedef enum {
  GPIOn_INT_POL_BIT0_lo                = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT0_hi                = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT0_Type;

/* ===============================================  GPIOn INT_POL BIT1 [1..1]  =============================================== */
typedef enum {
  GPIOn_INT_POL_BIT1_lo                = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT1_hi                = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT1_Type;

/* ===============================================  GPIOn INT_POL BIT2 [2..2]  =============================================== */
typedef enum {
  GPIOn_INT_POL_BIT2_lo                = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT2_hi                = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT2_Type;

/* ===============================================  GPIOn INT_POL BIT3 [3..3]  =============================================== */
typedef enum {
  GPIOn_INT_POL_BIT3_lo                = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT3_hi                = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT3_Type;

/* ===============================================  GPIOn INT_POL BIT4 [4..4]  =============================================== */
typedef enum {
  GPIOn_INT_POL_BIT4_lo                = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT4_hi                = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT4_Type;

/* ===============================================  GPIOn INT_POL BIT5 [5..5]  =============================================== */
typedef enum {
  GPIOn_INT_POL_BIT5_lo                = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT5_hi                = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT5_Type;

/* ===============================================  GPIOn INT_POL BIT6 [6..6]  =============================================== */
typedef enum {
  GPIOn_INT_POL_BIT6_lo                = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT6_hi                = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT6_Type;

/* ===============================================  GPIOn INT_POL BIT7 [7..7]  =============================================== */
typedef enum {
  GPIOn_INT_POL_BIT7_lo                = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT7_hi                = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT7_Type;

/* ===============================================  GPIOn INT_POL BIT8 [8..8]  =============================================== */
typedef enum {
  GPIOn_INT_POL_BIT8_lo                = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT8_hi                = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT8_Type;

/* ===============================================  GPIOn INT_POL BIT9 [9..9]  =============================================== */
typedef enum {
  GPIOn_INT_POL_BIT9_lo                = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT9_hi                = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT9_Type;

/* =============================================  GPIOn INT_POL BIT10 [10..10]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT10_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT10_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT10_Type;

/* =============================================  GPIOn INT_POL BIT11 [11..11]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT11_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT11_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT11_Type;

/* =============================================  GPIOn INT_POL BIT12 [12..12]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT12_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT12_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT12_Type;

/* =============================================  GPIOn INT_POL BIT13 [13..13]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT13_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT13_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT13_Type;

/* =============================================  GPIOn INT_POL BIT14 [14..14]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT14_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT14_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT14_Type;

/* =============================================  GPIOn INT_POL BIT15 [15..15]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT15_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT15_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT15_Type;

/* =============================================  GPIOn INT_POL BIT16 [16..16]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT16_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT16_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT16_Type;

/* =============================================  GPIOn INT_POL BIT17 [17..17]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT17_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT17_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT17_Type;

/* =============================================  GPIOn INT_POL BIT18 [18..18]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT18_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT18_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT18_Type;

/* =============================================  GPIOn INT_POL BIT19 [19..19]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT19_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT19_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT19_Type;

/* =============================================  GPIOn INT_POL BIT20 [20..20]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT20_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT20_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT20_Type;

/* =============================================  GPIOn INT_POL BIT21 [21..21]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT21_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT21_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT21_Type;

/* =============================================  GPIOn INT_POL BIT22 [22..22]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT22_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT22_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT22_Type;

/* =============================================  GPIOn INT_POL BIT23 [23..23]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT23_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT23_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT23_Type;

/* =============================================  GPIOn INT_POL BIT24 [24..24]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT24_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT24_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT24_Type;

/* =============================================  GPIOn INT_POL BIT25 [25..25]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT25_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT25_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT25_Type;

/* =============================================  GPIOn INT_POL BIT26 [26..26]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT26_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT26_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT26_Type;

/* =============================================  GPIOn INT_POL BIT27 [27..27]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT27_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT27_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT27_Type;

/* =============================================  GPIOn INT_POL BIT28 [28..28]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT28_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT28_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT28_Type;

/* =============================================  GPIOn INT_POL BIT29 [29..29]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT29_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT29_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT29_Type;

/* =============================================  GPIOn INT_POL BIT30 [30..30]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT30_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT30_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT30_Type;

/* =============================================  GPIOn INT_POL BIT31 [31..31]  ============================================== */
typedef enum {
  GPIOn_INT_POL_BIT31_lo               = 0,     /*!< lo : Interrupts are latched on a falling edge or low level condition
                                                      for this pin.                                                            */
  GPIOn_INT_POL_BIT31_hi               = 1,     /*!< hi : Interrupts are latched on a rising edge or high level condition
                                                      for this pin.                                                            */
} GPIOn_INT_POL_BIT31_Type;

/* ========================================================  INT_EN  ========================================================= */
/* ===============================================  GPIOn INT_EN BIT0 [0..0]  ================================================ */
typedef enum {
  GPIOn_INT_EN_BIT0_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT0_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT0_Type;

/* ===============================================  GPIOn INT_EN BIT1 [1..1]  ================================================ */
typedef enum {
  GPIOn_INT_EN_BIT1_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT1_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT1_Type;

/* ===============================================  GPIOn INT_EN BIT2 [2..2]  ================================================ */
typedef enum {
  GPIOn_INT_EN_BIT2_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT2_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT2_Type;

/* ===============================================  GPIOn INT_EN BIT3 [3..3]  ================================================ */
typedef enum {
  GPIOn_INT_EN_BIT3_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT3_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT3_Type;

/* ===============================================  GPIOn INT_EN BIT4 [4..4]  ================================================ */
typedef enum {
  GPIOn_INT_EN_BIT4_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT4_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT4_Type;

/* ===============================================  GPIOn INT_EN BIT5 [5..5]  ================================================ */
typedef enum {
  GPIOn_INT_EN_BIT5_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT5_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT5_Type;

/* ===============================================  GPIOn INT_EN BIT6 [6..6]  ================================================ */
typedef enum {
  GPIOn_INT_EN_BIT6_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT6_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT6_Type;

/* ===============================================  GPIOn INT_EN BIT7 [7..7]  ================================================ */
typedef enum {
  GPIOn_INT_EN_BIT7_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT7_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT7_Type;

/* ===============================================  GPIOn INT_EN BIT8 [8..8]  ================================================ */
typedef enum {
  GPIOn_INT_EN_BIT8_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT8_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT8_Type;

/* ===============================================  GPIOn INT_EN BIT9 [9..9]  ================================================ */
typedef enum {
  GPIOn_INT_EN_BIT9_disable            = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT9_enable             = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT9_Type;

/* ==============================================  GPIOn INT_EN BIT10 [10..10]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT10_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT10_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT10_Type;

/* ==============================================  GPIOn INT_EN BIT11 [11..11]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT11_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT11_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT11_Type;

/* ==============================================  GPIOn INT_EN BIT12 [12..12]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT12_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT12_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT12_Type;

/* ==============================================  GPIOn INT_EN BIT13 [13..13]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT13_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT13_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT13_Type;

/* ==============================================  GPIOn INT_EN BIT14 [14..14]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT14_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT14_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT14_Type;

/* ==============================================  GPIOn INT_EN BIT15 [15..15]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT15_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT15_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT15_Type;

/* ==============================================  GPIOn INT_EN BIT16 [16..16]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT16_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT16_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT16_Type;

/* ==============================================  GPIOn INT_EN BIT17 [17..17]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT17_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT17_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT17_Type;

/* ==============================================  GPIOn INT_EN BIT18 [18..18]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT18_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT18_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT18_Type;

/* ==============================================  GPIOn INT_EN BIT19 [19..19]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT19_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT19_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT19_Type;

/* ==============================================  GPIOn INT_EN BIT20 [20..20]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT20_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT20_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT20_Type;

/* ==============================================  GPIOn INT_EN BIT21 [21..21]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT21_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT21_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT21_Type;

/* ==============================================  GPIOn INT_EN BIT22 [22..22]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT22_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT22_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT22_Type;

/* ==============================================  GPIOn INT_EN BIT23 [23..23]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT23_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT23_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT23_Type;

/* ==============================================  GPIOn INT_EN BIT24 [24..24]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT24_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT24_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT24_Type;

/* ==============================================  GPIOn INT_EN BIT25 [25..25]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT25_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT25_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT25_Type;

/* ==============================================  GPIOn INT_EN BIT26 [26..26]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT26_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT26_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT26_Type;

/* ==============================================  GPIOn INT_EN BIT27 [27..27]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT27_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT27_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT27_Type;

/* ==============================================  GPIOn INT_EN BIT28 [28..28]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT28_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT28_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT28_Type;

/* ==============================================  GPIOn INT_EN BIT29 [29..29]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT29_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT29_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT29_Type;

/* ==============================================  GPIOn INT_EN BIT30 [30..30]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT30_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT30_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT30_Type;

/* ==============================================  GPIOn INT_EN BIT31 [31..31]  ============================================== */
typedef enum {
  GPIOn_INT_EN_BIT31_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_EN_BIT31_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_EN_BIT31_Type;

/* ======================================================  INT_EN_SET  ======================================================= */
/* =============================================  GPIOn INT_EN_SET BIT0 [0..0]  ============================================== */
typedef enum {
  GPIOn_INT_EN_SET_BIT0_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT0_set            = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT0_Type;

/* =============================================  GPIOn INT_EN_SET BIT1 [1..1]  ============================================== */
typedef enum {
  GPIOn_INT_EN_SET_BIT1_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT1_set            = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT1_Type;

/* =============================================  GPIOn INT_EN_SET BIT2 [2..2]  ============================================== */
typedef enum {
  GPIOn_INT_EN_SET_BIT2_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT2_set            = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT2_Type;

/* =============================================  GPIOn INT_EN_SET BIT3 [3..3]  ============================================== */
typedef enum {
  GPIOn_INT_EN_SET_BIT3_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT3_set            = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT3_Type;

/* =============================================  GPIOn INT_EN_SET BIT4 [4..4]  ============================================== */
typedef enum {
  GPIOn_INT_EN_SET_BIT4_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT4_set            = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT4_Type;

/* =============================================  GPIOn INT_EN_SET BIT5 [5..5]  ============================================== */
typedef enum {
  GPIOn_INT_EN_SET_BIT5_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT5_set            = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT5_Type;

/* =============================================  GPIOn INT_EN_SET BIT6 [6..6]  ============================================== */
typedef enum {
  GPIOn_INT_EN_SET_BIT6_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT6_set            = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT6_Type;

/* =============================================  GPIOn INT_EN_SET BIT7 [7..7]  ============================================== */
typedef enum {
  GPIOn_INT_EN_SET_BIT7_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT7_set            = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT7_Type;

/* =============================================  GPIOn INT_EN_SET BIT8 [8..8]  ============================================== */
typedef enum {
  GPIOn_INT_EN_SET_BIT8_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT8_set            = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT8_Type;

/* =============================================  GPIOn INT_EN_SET BIT9 [9..9]  ============================================== */
typedef enum {
  GPIOn_INT_EN_SET_BIT9_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT9_set            = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT9_Type;

/* ============================================  GPIOn INT_EN_SET BIT10 [10..10]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT10_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT10_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT10_Type;

/* ============================================  GPIOn INT_EN_SET BIT11 [11..11]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT11_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT11_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT11_Type;

/* ============================================  GPIOn INT_EN_SET BIT12 [12..12]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT12_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT12_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT12_Type;

/* ============================================  GPIOn INT_EN_SET BIT13 [13..13]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT13_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT13_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT13_Type;

/* ============================================  GPIOn INT_EN_SET BIT14 [14..14]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT14_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT14_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT14_Type;

/* ============================================  GPIOn INT_EN_SET BIT15 [15..15]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT15_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT15_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT15_Type;

/* ============================================  GPIOn INT_EN_SET BIT16 [16..16]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT16_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT16_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT16_Type;

/* ============================================  GPIOn INT_EN_SET BIT17 [17..17]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT17_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT17_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT17_Type;

/* ============================================  GPIOn INT_EN_SET BIT18 [18..18]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT18_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT18_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT18_Type;

/* ============================================  GPIOn INT_EN_SET BIT19 [19..19]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT19_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT19_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT19_Type;

/* ============================================  GPIOn INT_EN_SET BIT20 [20..20]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT20_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT20_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT20_Type;

/* ============================================  GPIOn INT_EN_SET BIT21 [21..21]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT21_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT21_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT21_Type;

/* ============================================  GPIOn INT_EN_SET BIT22 [22..22]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT22_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT22_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT22_Type;

/* ============================================  GPIOn INT_EN_SET BIT23 [23..23]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT23_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT23_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT23_Type;

/* ============================================  GPIOn INT_EN_SET BIT24 [24..24]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT24_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT24_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT24_Type;

/* ============================================  GPIOn INT_EN_SET BIT25 [25..25]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT25_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT25_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT25_Type;

/* ============================================  GPIOn INT_EN_SET BIT26 [26..26]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT26_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT26_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT26_Type;

/* ============================================  GPIOn INT_EN_SET BIT27 [27..27]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT27_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT27_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT27_Type;

/* ============================================  GPIOn INT_EN_SET BIT28 [28..28]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT28_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT28_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT28_Type;

/* ============================================  GPIOn INT_EN_SET BIT29 [29..29]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT29_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT29_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT29_Type;

/* ============================================  GPIOn INT_EN_SET BIT30 [30..30]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT30_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT30_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT30_Type;

/* ============================================  GPIOn INT_EN_SET BIT31 [31..31]  ============================================ */
typedef enum {
  GPIOn_INT_EN_SET_BIT31_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_SET_BIT31_set           = 1,     /*!< set : Set bit in this position                                            */
} GPIOn_INT_EN_SET_BIT31_Type;

/* ======================================================  INT_EN_CLR  ======================================================= */
/* =============================================  GPIOn INT_EN_CLR BIT0 [0..0]  ============================================== */
typedef enum {
  GPIOn_INT_EN_CLR_BIT0_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT0_clear          = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT0_Type;

/* =============================================  GPIOn INT_EN_CLR BIT1 [1..1]  ============================================== */
typedef enum {
  GPIOn_INT_EN_CLR_BIT1_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT1_clear          = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT1_Type;

/* =============================================  GPIOn INT_EN_CLR BIT2 [2..2]  ============================================== */
typedef enum {
  GPIOn_INT_EN_CLR_BIT2_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT2_clear          = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT2_Type;

/* =============================================  GPIOn INT_EN_CLR BIT3 [3..3]  ============================================== */
typedef enum {
  GPIOn_INT_EN_CLR_BIT3_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT3_clear          = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT3_Type;

/* =============================================  GPIOn INT_EN_CLR BIT4 [4..4]  ============================================== */
typedef enum {
  GPIOn_INT_EN_CLR_BIT4_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT4_clear          = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT4_Type;

/* =============================================  GPIOn INT_EN_CLR BIT5 [5..5]  ============================================== */
typedef enum {
  GPIOn_INT_EN_CLR_BIT5_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT5_clear          = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT5_Type;

/* =============================================  GPIOn INT_EN_CLR BIT6 [6..6]  ============================================== */
typedef enum {
  GPIOn_INT_EN_CLR_BIT6_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT6_clear          = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT6_Type;

/* =============================================  GPIOn INT_EN_CLR BIT7 [7..7]  ============================================== */
typedef enum {
  GPIOn_INT_EN_CLR_BIT7_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT7_clear          = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT7_Type;

/* =============================================  GPIOn INT_EN_CLR BIT8 [8..8]  ============================================== */
typedef enum {
  GPIOn_INT_EN_CLR_BIT8_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT8_clear          = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT8_Type;

/* =============================================  GPIOn INT_EN_CLR BIT9 [9..9]  ============================================== */
typedef enum {
  GPIOn_INT_EN_CLR_BIT9_nop            = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT9_clear          = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT9_Type;

/* ============================================  GPIOn INT_EN_CLR BIT10 [10..10]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT10_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT10_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT10_Type;

/* ============================================  GPIOn INT_EN_CLR BIT11 [11..11]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT11_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT11_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT11_Type;

/* ============================================  GPIOn INT_EN_CLR BIT12 [12..12]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT12_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT12_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT12_Type;

/* ============================================  GPIOn INT_EN_CLR BIT13 [13..13]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT13_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT13_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT13_Type;

/* ============================================  GPIOn INT_EN_CLR BIT14 [14..14]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT14_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT14_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT14_Type;

/* ============================================  GPIOn INT_EN_CLR BIT15 [15..15]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT15_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT15_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT15_Type;

/* ============================================  GPIOn INT_EN_CLR BIT16 [16..16]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT16_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT16_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT16_Type;

/* ============================================  GPIOn INT_EN_CLR BIT17 [17..17]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT17_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT17_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT17_Type;

/* ============================================  GPIOn INT_EN_CLR BIT18 [18..18]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT18_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT18_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT18_Type;

/* ============================================  GPIOn INT_EN_CLR BIT19 [19..19]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT19_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT19_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT19_Type;

/* ============================================  GPIOn INT_EN_CLR BIT20 [20..20]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT20_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT20_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT20_Type;

/* ============================================  GPIOn INT_EN_CLR BIT21 [21..21]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT21_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT21_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT21_Type;

/* ============================================  GPIOn INT_EN_CLR BIT22 [22..22]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT22_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT22_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT22_Type;

/* ============================================  GPIOn INT_EN_CLR BIT23 [23..23]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT23_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT23_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT23_Type;

/* ============================================  GPIOn INT_EN_CLR BIT24 [24..24]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT24_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT24_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT24_Type;

/* ============================================  GPIOn INT_EN_CLR BIT25 [25..25]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT25_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT25_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT25_Type;

/* ============================================  GPIOn INT_EN_CLR BIT26 [26..26]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT26_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT26_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT26_Type;

/* ============================================  GPIOn INT_EN_CLR BIT27 [27..27]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT27_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT27_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT27_Type;

/* ============================================  GPIOn INT_EN_CLR BIT28 [28..28]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT28_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT28_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT28_Type;

/* ============================================  GPIOn INT_EN_CLR BIT29 [29..29]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT29_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT29_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT29_Type;

/* ============================================  GPIOn INT_EN_CLR BIT30 [30..30]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT30_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT30_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT30_Type;

/* ============================================  GPIOn INT_EN_CLR BIT31 [31..31]  ============================================ */
typedef enum {
  GPIOn_INT_EN_CLR_BIT31_nop           = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_EN_CLR_BIT31_clear         = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_EN_CLR_BIT31_Type;

/* =======================================================  INT_STAT  ======================================================== */
/* ==============================================  GPIOn INT_STAT BIT0 [0..0]  =============================================== */
typedef enum {
  GPIOn_INT_STAT_BIT0_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT0_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT0_Type;

/* ==============================================  GPIOn INT_STAT BIT1 [1..1]  =============================================== */
typedef enum {
  GPIOn_INT_STAT_BIT1_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT1_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT1_Type;

/* ==============================================  GPIOn INT_STAT BIT2 [2..2]  =============================================== */
typedef enum {
  GPIOn_INT_STAT_BIT2_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT2_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT2_Type;

/* ==============================================  GPIOn INT_STAT BIT3 [3..3]  =============================================== */
typedef enum {
  GPIOn_INT_STAT_BIT3_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT3_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT3_Type;

/* ==============================================  GPIOn INT_STAT BIT4 [4..4]  =============================================== */
typedef enum {
  GPIOn_INT_STAT_BIT4_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT4_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT4_Type;

/* ==============================================  GPIOn INT_STAT BIT5 [5..5]  =============================================== */
typedef enum {
  GPIOn_INT_STAT_BIT5_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT5_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT5_Type;

/* ==============================================  GPIOn INT_STAT BIT6 [6..6]  =============================================== */
typedef enum {
  GPIOn_INT_STAT_BIT6_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT6_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT6_Type;

/* ==============================================  GPIOn INT_STAT BIT7 [7..7]  =============================================== */
typedef enum {
  GPIOn_INT_STAT_BIT7_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT7_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT7_Type;

/* ==============================================  GPIOn INT_STAT BIT8 [8..8]  =============================================== */
typedef enum {
  GPIOn_INT_STAT_BIT8_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT8_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT8_Type;

/* ==============================================  GPIOn INT_STAT BIT9 [9..9]  =============================================== */
typedef enum {
  GPIOn_INT_STAT_BIT9_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT9_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT9_Type;

/* =============================================  GPIOn INT_STAT BIT10 [10..10]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT10_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT10_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT10_Type;

/* =============================================  GPIOn INT_STAT BIT11 [11..11]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT11_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT11_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT11_Type;

/* =============================================  GPIOn INT_STAT BIT12 [12..12]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT12_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT12_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT12_Type;

/* =============================================  GPIOn INT_STAT BIT13 [13..13]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT13_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT13_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT13_Type;

/* =============================================  GPIOn INT_STAT BIT14 [14..14]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT14_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT14_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT14_Type;

/* =============================================  GPIOn INT_STAT BIT15 [15..15]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT15_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT15_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT15_Type;

/* =============================================  GPIOn INT_STAT BIT16 [16..16]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT16_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT16_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT16_Type;

/* =============================================  GPIOn INT_STAT BIT17 [17..17]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT17_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT17_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT17_Type;

/* =============================================  GPIOn INT_STAT BIT18 [18..18]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT18_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT18_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT18_Type;

/* =============================================  GPIOn INT_STAT BIT19 [19..19]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT19_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT19_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT19_Type;

/* =============================================  GPIOn INT_STAT BIT20 [20..20]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT20_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT20_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT20_Type;

/* =============================================  GPIOn INT_STAT BIT21 [21..21]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT21_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT21_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT21_Type;

/* =============================================  GPIOn INT_STAT BIT22 [22..22]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT22_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT22_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT22_Type;

/* =============================================  GPIOn INT_STAT BIT23 [23..23]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT23_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT23_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT23_Type;

/* =============================================  GPIOn INT_STAT BIT24 [24..24]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT24_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT24_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT24_Type;

/* =============================================  GPIOn INT_STAT BIT25 [25..25]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT25_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT25_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT25_Type;

/* =============================================  GPIOn INT_STAT BIT26 [26..26]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT26_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT26_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT26_Type;

/* =============================================  GPIOn INT_STAT BIT27 [27..27]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT27_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT27_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT27_Type;

/* =============================================  GPIOn INT_STAT BIT28 [28..28]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT28_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT28_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT28_Type;

/* =============================================  GPIOn INT_STAT BIT29 [29..29]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT29_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT29_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT29_Type;

/* =============================================  GPIOn INT_STAT BIT30 [30..30]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT30_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT30_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT30_Type;

/* =============================================  GPIOn INT_STAT BIT31 [31..31]  ============================================= */
typedef enum {
  GPIOn_INT_STAT_BIT31_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  GPIOn_INT_STAT_BIT31_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} GPIOn_INT_STAT_BIT31_Type;

/* ========================================================  INT_CLR  ======================================================== */
/* ===============================================  GPIOn INT_CLR BIT0 [0..0]  =============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT0_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT0_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT0_Type;

/* ===============================================  GPIOn INT_CLR BIT1 [1..1]  =============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT1_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT1_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT1_Type;

/* ===============================================  GPIOn INT_CLR BIT2 [2..2]  =============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT2_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT2_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT2_Type;

/* ===============================================  GPIOn INT_CLR BIT3 [3..3]  =============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT3_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT3_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT3_Type;

/* ===============================================  GPIOn INT_CLR BIT4 [4..4]  =============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT4_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT4_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT4_Type;

/* ===============================================  GPIOn INT_CLR BIT5 [5..5]  =============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT5_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT5_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT5_Type;

/* ===============================================  GPIOn INT_CLR BIT6 [6..6]  =============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT6_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT6_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT6_Type;

/* ===============================================  GPIOn INT_CLR BIT7 [7..7]  =============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT7_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT7_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT7_Type;

/* ===============================================  GPIOn INT_CLR BIT8 [8..8]  =============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT8_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT8_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT8_Type;

/* ===============================================  GPIOn INT_CLR BIT9 [9..9]  =============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT9_nop               = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT9_clear             = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT9_Type;

/* =============================================  GPIOn INT_CLR BIT10 [10..10]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT10_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT10_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT10_Type;

/* =============================================  GPIOn INT_CLR BIT11 [11..11]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT11_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT11_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT11_Type;

/* =============================================  GPIOn INT_CLR BIT12 [12..12]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT12_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT12_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT12_Type;

/* =============================================  GPIOn INT_CLR BIT13 [13..13]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT13_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT13_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT13_Type;

/* =============================================  GPIOn INT_CLR BIT14 [14..14]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT14_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT14_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT14_Type;

/* =============================================  GPIOn INT_CLR BIT15 [15..15]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT15_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT15_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT15_Type;

/* =============================================  GPIOn INT_CLR BIT16 [16..16]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT16_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT16_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT16_Type;

/* =============================================  GPIOn INT_CLR BIT17 [17..17]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT17_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT17_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT17_Type;

/* =============================================  GPIOn INT_CLR BIT18 [18..18]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT18_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT18_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT18_Type;

/* =============================================  GPIOn INT_CLR BIT19 [19..19]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT19_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT19_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT19_Type;

/* =============================================  GPIOn INT_CLR BIT20 [20..20]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT20_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT20_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT20_Type;

/* =============================================  GPIOn INT_CLR BIT21 [21..21]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT21_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT21_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT21_Type;

/* =============================================  GPIOn INT_CLR BIT22 [22..22]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT22_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT22_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT22_Type;

/* =============================================  GPIOn INT_CLR BIT23 [23..23]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT23_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT23_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT23_Type;

/* =============================================  GPIOn INT_CLR BIT24 [24..24]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT24_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT24_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT24_Type;

/* =============================================  GPIOn INT_CLR BIT25 [25..25]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT25_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT25_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT25_Type;

/* =============================================  GPIOn INT_CLR BIT26 [26..26]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT26_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT26_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT26_Type;

/* =============================================  GPIOn INT_CLR BIT27 [27..27]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT27_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT27_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT27_Type;

/* =============================================  GPIOn INT_CLR BIT28 [28..28]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT28_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT28_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT28_Type;

/* =============================================  GPIOn INT_CLR BIT29 [29..29]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT29_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT29_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT29_Type;

/* =============================================  GPIOn INT_CLR BIT30 [30..30]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT30_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT30_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT30_Type;

/* =============================================  GPIOn INT_CLR BIT31 [31..31]  ============================================== */
typedef enum {
  GPIOn_INT_CLR_BIT31_nop              = 0,     /*!< nop : No effect                                                           */
  GPIOn_INT_CLR_BIT31_clear            = 1,     /*!< clear : Clear bit in this position                                        */
} GPIOn_INT_CLR_BIT31_Type;

/* ========================================================  WAKE_EN  ======================================================== */
/* ===============================================  GPIOn WAKE_EN BIT0 [0..0]  =============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT0_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT0_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT0_Type;

/* ===============================================  GPIOn WAKE_EN BIT1 [1..1]  =============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT1_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT1_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT1_Type;

/* ===============================================  GPIOn WAKE_EN BIT2 [2..2]  =============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT2_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT2_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT2_Type;

/* ===============================================  GPIOn WAKE_EN BIT3 [3..3]  =============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT3_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT3_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT3_Type;

/* ===============================================  GPIOn WAKE_EN BIT4 [4..4]  =============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT4_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT4_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT4_Type;

/* ===============================================  GPIOn WAKE_EN BIT5 [5..5]  =============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT5_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT5_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT5_Type;

/* ===============================================  GPIOn WAKE_EN BIT6 [6..6]  =============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT6_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT6_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT6_Type;

/* ===============================================  GPIOn WAKE_EN BIT7 [7..7]  =============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT7_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT7_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT7_Type;

/* ===============================================  GPIOn WAKE_EN BIT8 [8..8]  =============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT8_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT8_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT8_Type;

/* ===============================================  GPIOn WAKE_EN BIT9 [9..9]  =============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT9_disable           = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT9_enable            = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT9_Type;

/* =============================================  GPIOn WAKE_EN BIT10 [10..10]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT10_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT10_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT10_Type;

/* =============================================  GPIOn WAKE_EN BIT11 [11..11]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT11_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT11_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT11_Type;

/* =============================================  GPIOn WAKE_EN BIT12 [12..12]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT12_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT12_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT12_Type;

/* =============================================  GPIOn WAKE_EN BIT13 [13..13]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT13_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT13_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT13_Type;

/* =============================================  GPIOn WAKE_EN BIT14 [14..14]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT14_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT14_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT14_Type;

/* =============================================  GPIOn WAKE_EN BIT15 [15..15]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT15_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT15_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT15_Type;

/* =============================================  GPIOn WAKE_EN BIT16 [16..16]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT16_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT16_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT16_Type;

/* =============================================  GPIOn WAKE_EN BIT17 [17..17]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT17_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT17_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT17_Type;

/* =============================================  GPIOn WAKE_EN BIT18 [18..18]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT18_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT18_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT18_Type;

/* =============================================  GPIOn WAKE_EN BIT19 [19..19]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT19_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT19_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT19_Type;

/* =============================================  GPIOn WAKE_EN BIT20 [20..20]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT20_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT20_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT20_Type;

/* =============================================  GPIOn WAKE_EN BIT21 [21..21]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT21_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT21_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT21_Type;

/* =============================================  GPIOn WAKE_EN BIT22 [22..22]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT22_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT22_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT22_Type;

/* =============================================  GPIOn WAKE_EN BIT23 [23..23]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT23_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT23_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT23_Type;

/* =============================================  GPIOn WAKE_EN BIT24 [24..24]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT24_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT24_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT24_Type;

/* =============================================  GPIOn WAKE_EN BIT25 [25..25]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT25_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT25_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT25_Type;

/* =============================================  GPIOn WAKE_EN BIT26 [26..26]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT26_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT26_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT26_Type;

/* =============================================  GPIOn WAKE_EN BIT27 [27..27]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT27_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT27_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT27_Type;

/* =============================================  GPIOn WAKE_EN BIT28 [28..28]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT28_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT28_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT28_Type;

/* =============================================  GPIOn WAKE_EN BIT29 [29..29]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT29_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT29_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT29_Type;

/* =============================================  GPIOn WAKE_EN BIT30 [30..30]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT30_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT30_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT30_Type;

/* =============================================  GPIOn WAKE_EN BIT31 [31..31]  ============================================== */
typedef enum {
  GPIOn_WAKE_EN_BIT31_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_WAKE_EN_BIT31_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_WAKE_EN_BIT31_Type;

/* =====================================================  INT_DUAL_EDGE  ===================================================== */
/* ============================================  GPIOn INT_DUAL_EDGE BIT0 [0..0]  ============================================ */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT0_disable     = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT0_enable      = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT0_Type;

/* ============================================  GPIOn INT_DUAL_EDGE BIT1 [1..1]  ============================================ */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT1_disable     = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT1_enable      = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT1_Type;

/* ============================================  GPIOn INT_DUAL_EDGE BIT2 [2..2]  ============================================ */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT2_disable     = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT2_enable      = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT2_Type;

/* ============================================  GPIOn INT_DUAL_EDGE BIT3 [3..3]  ============================================ */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT3_disable     = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT3_enable      = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT3_Type;

/* ============================================  GPIOn INT_DUAL_EDGE BIT4 [4..4]  ============================================ */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT4_disable     = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT4_enable      = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT4_Type;

/* ============================================  GPIOn INT_DUAL_EDGE BIT5 [5..5]  ============================================ */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT5_disable     = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT5_enable      = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT5_Type;

/* ============================================  GPIOn INT_DUAL_EDGE BIT6 [6..6]  ============================================ */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT6_disable     = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT6_enable      = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT6_Type;

/* ============================================  GPIOn INT_DUAL_EDGE BIT7 [7..7]  ============================================ */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT7_disable     = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT7_enable      = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT7_Type;

/* ============================================  GPIOn INT_DUAL_EDGE BIT8 [8..8]  ============================================ */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT8_disable     = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT8_enable      = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT8_Type;

/* ============================================  GPIOn INT_DUAL_EDGE BIT9 [9..9]  ============================================ */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT9_disable     = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT9_enable      = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT9_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT10 [10..10]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT10_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT10_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT10_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT11 [11..11]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT11_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT11_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT11_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT12 [12..12]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT12_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT12_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT12_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT13 [13..13]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT13_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT13_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT13_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT14 [14..14]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT14_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT14_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT14_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT15 [15..15]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT15_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT15_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT15_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT16 [16..16]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT16_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT16_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT16_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT17 [17..17]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT17_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT17_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT17_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT18 [18..18]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT18_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT18_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT18_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT19 [19..19]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT19_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT19_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT19_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT20 [20..20]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT20_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT20_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT20_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT21 [21..21]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT21_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT21_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT21_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT22 [22..22]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT22_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT22_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT22_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT23 [23..23]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT23_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT23_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT23_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT24 [24..24]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT24_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT24_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT24_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT25 [25..25]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT25_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT25_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT25_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT26 [26..26]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT26_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT26_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT26_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT27 [27..27]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT27_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT27_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT27_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT28 [28..28]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT28_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT28_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT28_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT29 [29..29]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT29_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT29_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT29_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT30 [30..30]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT30_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT30_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT30_Type;

/* ==========================================  GPIOn INT_DUAL_EDGE BIT31 [31..31]  =========================================== */
typedef enum {
  GPIOn_INT_DUAL_EDGE_BIT31_disable    = 0,     /*!< disable : Disable                                                         */
  GPIOn_INT_DUAL_EDGE_BIT31_enable     = 1,     /*!< enable : Enable                                                           */
} GPIOn_INT_DUAL_EDGE_BIT31_Type;

/* =======================================================  PAD_CFG1  ======================================================== */
/* ==============================================  GPIOn PAD_CFG1 BIT0 [0..0]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG1_BIT0_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT0_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT0_Type;

/* ==============================================  GPIOn PAD_CFG1 BIT1 [1..1]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG1_BIT1_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT1_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT1_Type;

/* ==============================================  GPIOn PAD_CFG1 BIT2 [2..2]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG1_BIT2_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT2_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT2_Type;

/* ==============================================  GPIOn PAD_CFG1 BIT3 [3..3]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG1_BIT3_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT3_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT3_Type;

/* ==============================================  GPIOn PAD_CFG1 BIT4 [4..4]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG1_BIT4_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT4_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT4_Type;

/* ==============================================  GPIOn PAD_CFG1 BIT5 [5..5]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG1_BIT5_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT5_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT5_Type;

/* ==============================================  GPIOn PAD_CFG1 BIT6 [6..6]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG1_BIT6_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT6_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT6_Type;

/* ==============================================  GPIOn PAD_CFG1 BIT7 [7..7]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG1_BIT7_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT7_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT7_Type;

/* ==============================================  GPIOn PAD_CFG1 BIT8 [8..8]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG1_BIT8_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT8_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT8_Type;

/* ==============================================  GPIOn PAD_CFG1 BIT9 [9..9]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG1_BIT9_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT9_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT9_Type;

/* =============================================  GPIOn PAD_CFG1 BIT10 [10..10]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT10_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT10_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT10_Type;

/* =============================================  GPIOn PAD_CFG1 BIT11 [11..11]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT11_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT11_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT11_Type;

/* =============================================  GPIOn PAD_CFG1 BIT12 [12..12]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT12_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT12_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT12_Type;

/* =============================================  GPIOn PAD_CFG1 BIT13 [13..13]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT13_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT13_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT13_Type;

/* =============================================  GPIOn PAD_CFG1 BIT14 [14..14]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT14_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT14_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT14_Type;

/* =============================================  GPIOn PAD_CFG1 BIT15 [15..15]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT15_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT15_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT15_Type;

/* =============================================  GPIOn PAD_CFG1 BIT16 [16..16]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT16_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT16_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT16_Type;

/* =============================================  GPIOn PAD_CFG1 BIT17 [17..17]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT17_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT17_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT17_Type;

/* =============================================  GPIOn PAD_CFG1 BIT18 [18..18]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT18_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT18_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT18_Type;

/* =============================================  GPIOn PAD_CFG1 BIT19 [19..19]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT19_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT19_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT19_Type;

/* =============================================  GPIOn PAD_CFG1 BIT20 [20..20]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT20_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT20_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT20_Type;

/* =============================================  GPIOn PAD_CFG1 BIT21 [21..21]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT21_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT21_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT21_Type;

/* =============================================  GPIOn PAD_CFG1 BIT22 [22..22]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT22_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT22_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT22_Type;

/* =============================================  GPIOn PAD_CFG1 BIT23 [23..23]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT23_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT23_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT23_Type;

/* =============================================  GPIOn PAD_CFG1 BIT24 [24..24]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT24_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT24_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT24_Type;

/* =============================================  GPIOn PAD_CFG1 BIT25 [25..25]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT25_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT25_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT25_Type;

/* =============================================  GPIOn PAD_CFG1 BIT26 [26..26]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT26_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT26_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT26_Type;

/* =============================================  GPIOn PAD_CFG1 BIT27 [27..27]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT27_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT27_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT27_Type;

/* =============================================  GPIOn PAD_CFG1 BIT28 [28..28]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT28_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT28_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT28_Type;

/* =============================================  GPIOn PAD_CFG1 BIT29 [29..29]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT29_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT29_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT29_Type;

/* =============================================  GPIOn PAD_CFG1 BIT30 [30..30]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT30_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT30_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT30_Type;

/* =============================================  GPIOn PAD_CFG1 BIT31 [31..31]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG1_BIT31_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG1_BIT31_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG1_BIT31_Type;

/* =======================================================  PAD_CFG2  ======================================================== */
/* ==============================================  GPIOn PAD_CFG2 BIT0 [0..0]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG2_BIT0_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT0_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT0_Type;

/* ==============================================  GPIOn PAD_CFG2 BIT1 [1..1]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG2_BIT1_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT1_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT1_Type;

/* ==============================================  GPIOn PAD_CFG2 BIT2 [2..2]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG2_BIT2_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT2_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT2_Type;

/* ==============================================  GPIOn PAD_CFG2 BIT3 [3..3]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG2_BIT3_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT3_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT3_Type;

/* ==============================================  GPIOn PAD_CFG2 BIT4 [4..4]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG2_BIT4_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT4_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT4_Type;

/* ==============================================  GPIOn PAD_CFG2 BIT5 [5..5]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG2_BIT5_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT5_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT5_Type;

/* ==============================================  GPIOn PAD_CFG2 BIT6 [6..6]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG2_BIT6_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT6_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT6_Type;

/* ==============================================  GPIOn PAD_CFG2 BIT7 [7..7]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG2_BIT7_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT7_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT7_Type;

/* ==============================================  GPIOn PAD_CFG2 BIT8 [8..8]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG2_BIT8_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT8_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT8_Type;

/* ==============================================  GPIOn PAD_CFG2 BIT9 [9..9]  =============================================== */
typedef enum {
  GPIOn_PAD_CFG2_BIT9_disable          = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT9_enable           = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT9_Type;

/* =============================================  GPIOn PAD_CFG2 BIT10 [10..10]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT10_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT10_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT10_Type;

/* =============================================  GPIOn PAD_CFG2 BIT11 [11..11]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT11_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT11_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT11_Type;

/* =============================================  GPIOn PAD_CFG2 BIT12 [12..12]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT12_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT12_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT12_Type;

/* =============================================  GPIOn PAD_CFG2 BIT13 [13..13]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT13_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT13_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT13_Type;

/* =============================================  GPIOn PAD_CFG2 BIT14 [14..14]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT14_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT14_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT14_Type;

/* =============================================  GPIOn PAD_CFG2 BIT15 [15..15]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT15_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT15_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT15_Type;

/* =============================================  GPIOn PAD_CFG2 BIT16 [16..16]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT16_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT16_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT16_Type;

/* =============================================  GPIOn PAD_CFG2 BIT17 [17..17]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT17_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT17_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT17_Type;

/* =============================================  GPIOn PAD_CFG2 BIT18 [18..18]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT18_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT18_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT18_Type;

/* =============================================  GPIOn PAD_CFG2 BIT19 [19..19]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT19_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT19_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT19_Type;

/* =============================================  GPIOn PAD_CFG2 BIT20 [20..20]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT20_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT20_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT20_Type;

/* =============================================  GPIOn PAD_CFG2 BIT21 [21..21]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT21_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT21_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT21_Type;

/* =============================================  GPIOn PAD_CFG2 BIT22 [22..22]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT22_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT22_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT22_Type;

/* =============================================  GPIOn PAD_CFG2 BIT23 [23..23]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT23_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT23_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT23_Type;

/* =============================================  GPIOn PAD_CFG2 BIT24 [24..24]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT24_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT24_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT24_Type;

/* =============================================  GPIOn PAD_CFG2 BIT25 [25..25]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT25_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT25_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT25_Type;

/* =============================================  GPIOn PAD_CFG2 BIT26 [26..26]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT26_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT26_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT26_Type;

/* =============================================  GPIOn PAD_CFG2 BIT27 [27..27]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT27_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT27_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT27_Type;

/* =============================================  GPIOn PAD_CFG2 BIT28 [28..28]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT28_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT28_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT28_Type;

/* =============================================  GPIOn PAD_CFG2 BIT29 [29..29]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT29_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT29_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT29_Type;

/* =============================================  GPIOn PAD_CFG2 BIT30 [30..30]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT30_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT30_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT30_Type;

/* =============================================  GPIOn PAD_CFG2 BIT31 [31..31]  ============================================= */
typedef enum {
  GPIOn_PAD_CFG2_BIT31_disable         = 0,     /*!< disable : Disable                                                         */
  GPIOn_PAD_CFG2_BIT31_enable          = 1,     /*!< enable : Enable                                                           */
} GPIOn_PAD_CFG2_BIT31_Type;

/* ==========================================================  EN1  ========================================================== */
/* =================================================  GPIOn EN1 BIT0 [0..0]  ================================================= */
typedef enum {
  GPIOn_EN1_BIT0_primary               = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT0_secondary             = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT0_Type;

/* =================================================  GPIOn EN1 BIT1 [1..1]  ================================================= */
typedef enum {
  GPIOn_EN1_BIT1_primary               = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT1_secondary             = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT1_Type;

/* =================================================  GPIOn EN1 BIT2 [2..2]  ================================================= */
typedef enum {
  GPIOn_EN1_BIT2_primary               = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT2_secondary             = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT2_Type;

/* =================================================  GPIOn EN1 BIT3 [3..3]  ================================================= */
typedef enum {
  GPIOn_EN1_BIT3_primary               = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT3_secondary             = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT3_Type;

/* =================================================  GPIOn EN1 BIT4 [4..4]  ================================================= */
typedef enum {
  GPIOn_EN1_BIT4_primary               = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT4_secondary             = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT4_Type;

/* =================================================  GPIOn EN1 BIT5 [5..5]  ================================================= */
typedef enum {
  GPIOn_EN1_BIT5_primary               = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT5_secondary             = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT5_Type;

/* =================================================  GPIOn EN1 BIT6 [6..6]  ================================================= */
typedef enum {
  GPIOn_EN1_BIT6_primary               = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT6_secondary             = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT6_Type;

/* =================================================  GPIOn EN1 BIT7 [7..7]  ================================================= */
typedef enum {
  GPIOn_EN1_BIT7_primary               = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT7_secondary             = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT7_Type;

/* =================================================  GPIOn EN1 BIT8 [8..8]  ================================================= */
typedef enum {
  GPIOn_EN1_BIT8_primary               = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT8_secondary             = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT8_Type;

/* =================================================  GPIOn EN1 BIT9 [9..9]  ================================================= */
typedef enum {
  GPIOn_EN1_BIT9_primary               = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT9_secondary             = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT9_Type;

/* ===============================================  GPIOn EN1 BIT10 [10..10]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT10_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT10_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT10_Type;

/* ===============================================  GPIOn EN1 BIT11 [11..11]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT11_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT11_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT11_Type;

/* ===============================================  GPIOn EN1 BIT12 [12..12]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT12_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT12_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT12_Type;

/* ===============================================  GPIOn EN1 BIT13 [13..13]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT13_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT13_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT13_Type;

/* ===============================================  GPIOn EN1 BIT14 [14..14]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT14_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT14_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT14_Type;

/* ===============================================  GPIOn EN1 BIT15 [15..15]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT15_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT15_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT15_Type;

/* ===============================================  GPIOn EN1 BIT16 [16..16]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT16_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT16_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT16_Type;

/* ===============================================  GPIOn EN1 BIT17 [17..17]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT17_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT17_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT17_Type;

/* ===============================================  GPIOn EN1 BIT18 [18..18]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT18_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT18_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT18_Type;

/* ===============================================  GPIOn EN1 BIT19 [19..19]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT19_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT19_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT19_Type;

/* ===============================================  GPIOn EN1 BIT20 [20..20]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT20_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT20_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT20_Type;

/* ===============================================  GPIOn EN1 BIT21 [21..21]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT21_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT21_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT21_Type;

/* ===============================================  GPIOn EN1 BIT22 [22..22]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT22_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT22_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT22_Type;

/* ===============================================  GPIOn EN1 BIT23 [23..23]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT23_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT23_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT23_Type;

/* ===============================================  GPIOn EN1 BIT24 [24..24]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT24_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT24_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT24_Type;

/* ===============================================  GPIOn EN1 BIT25 [25..25]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT25_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT25_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT25_Type;

/* ===============================================  GPIOn EN1 BIT26 [26..26]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT26_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT26_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT26_Type;

/* ===============================================  GPIOn EN1 BIT27 [27..27]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT27_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT27_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT27_Type;

/* ===============================================  GPIOn EN1 BIT28 [28..28]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT28_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT28_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT28_Type;

/* ===============================================  GPIOn EN1 BIT29 [29..29]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT29_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT29_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT29_Type;

/* ===============================================  GPIOn EN1 BIT30 [30..30]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT30_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT30_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT30_Type;

/* ===============================================  GPIOn EN1 BIT31 [31..31]  ================================================ */
typedef enum {
  GPIOn_EN1_BIT31_primary              = 0,     /*!< primary : Primary                                                         */
  GPIOn_EN1_BIT31_secondary            = 1,     /*!< secondary : Secondary                                                     */
} GPIOn_EN1_BIT31_Type;

/* ==========================================================  DS  =========================================================== */
/* =================================================  GPIOn DS BIT0 [0..0]  ================================================== */
typedef enum {
  GPIOn_DS_BIT0_loDrive                = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT0_hiDrive                = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT0_Type;

/* =================================================  GPIOn DS BIT1 [1..1]  ================================================== */
typedef enum {
  GPIOn_DS_BIT1_loDrive                = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT1_hiDrive                = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT1_Type;

/* =================================================  GPIOn DS BIT2 [2..2]  ================================================== */
typedef enum {
  GPIOn_DS_BIT2_loDrive                = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT2_hiDrive                = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT2_Type;

/* =================================================  GPIOn DS BIT3 [3..3]  ================================================== */
typedef enum {
  GPIOn_DS_BIT3_loDrive                = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT3_hiDrive                = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT3_Type;

/* =================================================  GPIOn DS BIT4 [4..4]  ================================================== */
typedef enum {
  GPIOn_DS_BIT4_loDrive                = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT4_hiDrive                = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT4_Type;

/* =================================================  GPIOn DS BIT5 [5..5]  ================================================== */
typedef enum {
  GPIOn_DS_BIT5_loDrive                = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT5_hiDrive                = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT5_Type;

/* =================================================  GPIOn DS BIT6 [6..6]  ================================================== */
typedef enum {
  GPIOn_DS_BIT6_loDrive                = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT6_hiDrive                = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT6_Type;

/* =================================================  GPIOn DS BIT7 [7..7]  ================================================== */
typedef enum {
  GPIOn_DS_BIT7_loDrive                = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT7_hiDrive                = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT7_Type;

/* =================================================  GPIOn DS BIT8 [8..8]  ================================================== */
typedef enum {
  GPIOn_DS_BIT8_loDrive                = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT8_hiDrive                = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT8_Type;

/* =================================================  GPIOn DS BIT9 [9..9]  ================================================== */
typedef enum {
  GPIOn_DS_BIT9_loDrive                = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT9_hiDrive                = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT9_Type;

/* ================================================  GPIOn DS BIT10 [10..10]  ================================================ */
typedef enum {
  GPIOn_DS_BIT10_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT10_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT10_Type;

/* ================================================  GPIOn DS BIT11 [11..11]  ================================================ */
typedef enum {
  GPIOn_DS_BIT11_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT11_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT11_Type;

/* ================================================  GPIOn DS BIT12 [12..12]  ================================================ */
typedef enum {
  GPIOn_DS_BIT12_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT12_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT12_Type;

/* ================================================  GPIOn DS BIT13 [13..13]  ================================================ */
typedef enum {
  GPIOn_DS_BIT13_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT13_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT13_Type;

/* ================================================  GPIOn DS BIT14 [14..14]  ================================================ */
typedef enum {
  GPIOn_DS_BIT14_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT14_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT14_Type;

/* ================================================  GPIOn DS BIT15 [15..15]  ================================================ */
typedef enum {
  GPIOn_DS_BIT15_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT15_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT15_Type;

/* ================================================  GPIOn DS BIT16 [16..16]  ================================================ */
typedef enum {
  GPIOn_DS_BIT16_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT16_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT16_Type;

/* ================================================  GPIOn DS BIT17 [17..17]  ================================================ */
typedef enum {
  GPIOn_DS_BIT17_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT17_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT17_Type;

/* ================================================  GPIOn DS BIT18 [18..18]  ================================================ */
typedef enum {
  GPIOn_DS_BIT18_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT18_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT18_Type;

/* ================================================  GPIOn DS BIT19 [19..19]  ================================================ */
typedef enum {
  GPIOn_DS_BIT19_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT19_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT19_Type;

/* ================================================  GPIOn DS BIT20 [20..20]  ================================================ */
typedef enum {
  GPIOn_DS_BIT20_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT20_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT20_Type;

/* ================================================  GPIOn DS BIT21 [21..21]  ================================================ */
typedef enum {
  GPIOn_DS_BIT21_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT21_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT21_Type;

/* ================================================  GPIOn DS BIT22 [22..22]  ================================================ */
typedef enum {
  GPIOn_DS_BIT22_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT22_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT22_Type;

/* ================================================  GPIOn DS BIT23 [23..23]  ================================================ */
typedef enum {
  GPIOn_DS_BIT23_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT23_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT23_Type;

/* ================================================  GPIOn DS BIT24 [24..24]  ================================================ */
typedef enum {
  GPIOn_DS_BIT24_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT24_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT24_Type;

/* ================================================  GPIOn DS BIT25 [25..25]  ================================================ */
typedef enum {
  GPIOn_DS_BIT25_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT25_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT25_Type;

/* ================================================  GPIOn DS BIT26 [26..26]  ================================================ */
typedef enum {
  GPIOn_DS_BIT26_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT26_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT26_Type;

/* ================================================  GPIOn DS BIT27 [27..27]  ================================================ */
typedef enum {
  GPIOn_DS_BIT27_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT27_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT27_Type;

/* ================================================  GPIOn DS BIT28 [28..28]  ================================================ */
typedef enum {
  GPIOn_DS_BIT28_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT28_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT28_Type;

/* ================================================  GPIOn DS BIT29 [29..29]  ================================================ */
typedef enum {
  GPIOn_DS_BIT29_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT29_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT29_Type;

/* ================================================  GPIOn DS BIT30 [30..30]  ================================================ */
typedef enum {
  GPIOn_DS_BIT30_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT30_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT30_Type;

/* ================================================  GPIOn DS BIT31 [31..31]  ================================================ */
typedef enum {
  GPIOn_DS_BIT31_loDrive               = 0,     /*!< loDrive : GPIO port pin is in low-drive mode.                             */
  GPIOn_DS_BIT31_hiDrive               = 1,     /*!< hiDrive : GPIO port pin is in high-drive mode.                            */
} GPIOn_DS_BIT31_Type;



/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CN  =========================================================== */
/* ==================================================  ADC CN ADEN [0..0]  =================================================== */
typedef enum {
  ADC_CN_ADEN_disable                  = 0,     /*!< disable : Disable                                                         */
  ADC_CN_ADEN_enable                   = 1,     /*!< enable : Enable                                                           */
} ADC_CN_ADEN_Type;

/* =================================================  ADC CN ADDAIE [1..1]  ================================================== */
typedef enum {
  ADC_CN_ADDAIE_disable                = 0,     /*!< disable : Disable                                                         */
  ADC_CN_ADDAIE_enable                 = 1,     /*!< enable : Enable                                                           */
} ADC_CN_ADDAIE_Type;

/* =================================================  ADC CN ADALGN [2..2]  ================================================== */
typedef enum {
  ADC_CN_ADALGN_rightAlign             = 0,     /*!< rightAlign : ADC data is in right alignment format in ADDDATA[9:0]
                                                      while ADDATA[15:10] is filled with zero.                                 */
  ADC_CN_ADALGN_leftAlign              = 1,     /*!< leftAlign : ADC data is in left alignment format in ADDDATA[15:6]
                                                      while ADDATA[5:0] is filled with zero.                                   */
} ADC_CN_ADALGN_Type;

/* ==================================================  ADC CN ADCH [3..4]  =================================================== */
typedef enum {
  ADC_CN_ADCH_an0                      = 0,     /*!< an0 : AN0                                                                 */
  ADC_CN_ADCH_an1                      = 1,     /*!< an1 : AN1                                                                 */
  ADC_CN_ADCH_tempSensor               = 3,     /*!< tempSensor : Internal Temp Sensor                                         */
} ADC_CN_ADCH_Type;

/* ==================================================  ADC CN ADSCL [5..5]  ================================================== */
typedef enum {
  ADC_CN_ADSCL_disable                 = 0,     /*!< disable : Disable                                                         */
  ADC_CN_ADSCL_enable                  = 1,     /*!< enable : Enable                                                           */
} ADC_CN_ADSCL_Type;

/* ==================================================  ADC CN ADREF [6..6]  ================================================== */
typedef enum {
  ADC_CN_ADREF_avdd                    = 0,     /*!< avdd : AVDD                                                               */
  ADC_CN_ADREF_internalRef             = 1,     /*!< internalRef : Internal Reference                                          */
} ADC_CN_ADREF_Type;

/* =================================================  ADC CN IREFEN [7..7]  ================================================== */
typedef enum {
  ADC_CN_IREFEN_avdd                   = 0,     /*!< avdd : AVDD                                                               */
  ADC_CN_IREFEN_internalRef            = 1,     /*!< internalRef : Internal Reference                                          */
} ADC_CN_IREFEN_Type;

/* =================================================  ADC CN ADCCLK [8..9]  ================================================== */
typedef enum {
  ADC_CN_ADCCLK_div16                  = 0,     /*!< div16 : PCLK / 16                                                         */
  ADC_CN_ADCCLK_div32                  = 1,     /*!< div32 : PCLK / 32                                                         */
  ADC_CN_ADCCLK_div64                  = 2,     /*!< div64 : PCLK / 64                                                         */
  ADC_CN_ADCCLK_div128                 = 3,     /*!< div128 : PCLK / 128                                                       */
} ADC_CN_ADCCLK_Type;

/* ================================================  ADC CN ADLTIE [10..10]  ================================================= */
typedef enum {
  ADC_CN_ADLTIE_disable                = 0,     /*!< disable : Disable                                                         */
  ADC_CN_ADLTIE_enable                 = 1,     /*!< enable : Enable                                                           */
} ADC_CN_ADLTIE_Type;

/* ================================================  ADC CN ADHTIE [11..11]  ================================================= */
typedef enum {
  ADC_CN_ADHTIE_disable                = 0,     /*!< disable : Disable                                                         */
  ADC_CN_ADHTIE_enable                 = 1,     /*!< enable : Enable                                                           */
} ADC_CN_ADHTIE_Type;

/* =================================================  ADC CN TSEN [12..12]  ================================================== */
typedef enum {
  ADC_CN_TSEN_disable                  = 0,     /*!< disable : Disable                                                         */
  ADC_CN_TSEN_enable                   = 1,     /*!< enable : Enable                                                           */
} ADC_CN_TSEN_Type;

/* ===============================================  ADC CN ADOVFDIS [15..15]  ================================================ */
typedef enum {
  ADC_CN_ADOVFDIS_enable               = 0,     /*!< enable : ADST.ADOVF bit will be set when the ADC overflows.
                                                      In this case ADDATA will return a data of 0x3FF if an
                                                      overflow occurs.                                                         */
  ADC_CN_ADOVFDIS_disable              = 1,     /*!< disable : ADST.ADOVF bit will not be set when an overflow occurs.
                                                      In this case ADDATA will return the overflowed data.                     */
} ADC_CN_ADOVFDIS_Type;

/* ==========================================================  ST  =========================================================== */
/* =================================================  ADC ST ADCONV [0..0]  ================================================== */
typedef enum {
  ADC_ST_ADCONV_stop                   = 0,     /*!< stop : Stop ADC conversion. The ADC will stop acquiring data
                                                      immediately.                                                             */
  ADC_ST_ADCONV_start                  = 1,     /*!< start : Starts an ADC conversion when the ADC is enabled (ADEN=1).        */
} ADC_ST_ADCONV_Type;

/* ==================================================  ADC ST ADDAI [1..1]  ================================================== */
typedef enum {
  ADC_ST_ADDAI_inactive                = 0,     /*!< inactive : Inactive                                                       */
  ADC_ST_ADDAI_pending                 = 1,     /*!< pending : Flag asserted                                                   */
} ADC_ST_ADDAI_Type;

/* ==================================================  ADC ST ADOVF [2..2]  ================================================== */
typedef enum {
  ADC_ST_ADOVF_inactive                = 0,     /*!< inactive : Inactive                                                       */
  ADC_ST_ADOVF_pending                 = 1,     /*!< pending : Flag asserted                                                   */
} ADC_ST_ADOVF_Type;

/* =================================================  ADC ST ADLTIF [3..3]  ================================================== */
typedef enum {
  ADC_ST_ADLTIF_inactive               = 0,     /*!< inactive : Inactive                                                       */
  ADC_ST_ADLTIF_pending                = 1,     /*!< pending : Flag asserted                                                   */
} ADC_ST_ADLTIF_Type;

/* =================================================  ADC ST ADHTIF [4..4]  ================================================== */
typedef enum {
  ADC_ST_ADHTIF_inactive               = 0,     /*!< inactive : Inactive                                                       */
  ADC_ST_ADHTIF_pending                = 1,     /*!< pending : Flag asserted                                                   */
} ADC_ST_ADHTIF_Type;

/* =========================================================  DATA  ========================================================== */
/* ==========================================================  LT0  ========================================================== */
/* ==========================================================  LT1  ========================================================== */
/* ==========================================================  LT2  ========================================================== */
/* ==========================================================  HT0  ========================================================== */
/* ==========================================================  HT1  ========================================================== */
/* ==========================================================  HT2  ========================================================== */


/* =========================================================================================================================== */
/* ================                                          CRYPTO                                           ================ */
/* =========================================================================================================================== */

/* ======================================================  CRYPTO_CTRL  ====================================================== */
/* =============================================  CRYPTO CRYPTO_CTRL RST [0..0]  ============================================= */
typedef enum {
  CRYPTO_CRYPTO_CTRL_RST_reset_write_reset = 1, /*!< reset : Starts reset operation                                            */
} CRYPTO_CRYPTO_CTRL_RST_reset_write_Type;

typedef enum {
  CRYPTO_CRYPTO_CTRL_RST_reset_read_reset = 0,  /*!< reset : Reset complete                                                    */
  CRYPTO_CRYPTO_CTRL_RST_reset_read_busy = 1,   /*!< busy : Reset in progress                                                  */
} CRYPTO_CRYPTO_CTRL_RST_reset_read_Type;

/* =============================================  CRYPTO CRYPTO_CTRL INT [1..1]  ============================================= */
typedef enum {
  CRYPTO_CRYPTO_CTRL_INT_disable       = 0,     /*!< disable : Disable                                                         */
  CRYPTO_CRYPTO_CTRL_INT_enable        = 1,     /*!< enable : Enable                                                           */
} CRYPTO_CRYPTO_CTRL_INT_Type;

/* =============================================  CRYPTO CRYPTO_CTRL SRC [2..2]  ============================================= */
typedef enum {
  CRYPTO_CRYPTO_CTRL_SRC_inputFIFO     = 0,     /*!< inputFIFO : Input FIFO                                                    */
  CRYPTO_CRYPTO_CTRL_SRC_outputFIFO    = 1,     /*!< outputFIFO : Output FIFO                                                  */
} CRYPTO_CRYPTO_CTRL_SRC_Type;

/* =============================================  CRYPTO CRYPTO_CTRL BSO [4..4]  ============================================= */
typedef enum {
  CRYPTO_CRYPTO_CTRL_BSO_disable       = 0,     /*!< disable : Disable                                                         */
  CRYPTO_CRYPTO_CTRL_BSO_enable        = 1,     /*!< enable : Enable                                                           */
} CRYPTO_CRYPTO_CTRL_BSO_Type;

/* =============================================  CRYPTO CRYPTO_CTRL BSI [5..5]  ============================================= */
typedef enum {
  CRYPTO_CRYPTO_CTRL_BSI_disable       = 0,     /*!< disable : Disable                                                         */
  CRYPTO_CRYPTO_CTRL_BSI_enable        = 1,     /*!< enable : Enable                                                           */
} CRYPTO_CRYPTO_CTRL_BSI_Type;

/* ===========================================  CRYPTO CRYPTO_CTRL WAIT_EN [6..6]  =========================================== */
typedef enum {
  CRYPTO_CRYPTO_CTRL_WAIT_EN_disable   = 0,     /*!< disable : Disable                                                         */
  CRYPTO_CRYPTO_CTRL_WAIT_EN_enable    = 1,     /*!< enable : Enable                                                           */
} CRYPTO_CRYPTO_CTRL_WAIT_EN_Type;

/* ==========================================  CRYPTO CRYPTO_CTRL WAIT_POL [7..7]  =========================================== */
typedef enum {
  CRYPTO_CRYPTO_CTRL_WAIT_POL_activeLo = 0,     /*!< activeLo : Active Low                                                     */
  CRYPTO_CRYPTO_CTRL_WAIT_POL_activeHi = 1,     /*!< activeHi : Active High                                                    */
} CRYPTO_CRYPTO_CTRL_WAIT_POL_Type;

/* ============================================  CRYPTO CRYPTO_CTRL WRSRC [8..9]  ============================================ */
typedef enum {
  CRYPTO_CRYPTO_CTRL_WRSRC_none        = 0,     /*!< none : None                                                               */
  CRYPTO_CRYPTO_CTRL_WRSRC_cipherOutput = 1,    /*!< cipherOutput : Cipher Output                                              */
  CRYPTO_CRYPTO_CTRL_WRSRC_readFIFO    = 2,     /*!< readFIFO : Read FIFO                                                      */
} CRYPTO_CRYPTO_CTRL_WRSRC_Type;

/* ===========================================  CRYPTO CRYPTO_CTRL RDSRC [10..11]  =========================================== */
typedef enum {
  CRYPTO_CRYPTO_CTRL_RDSRC_dmaDisabled = 0,     /*!< dmaDisabled : DMA Disable                                                 */
  CRYPTO_CRYPTO_CTRL_RDSRC_dmaOrApb    = 1,     /*!< dmaOrApb : DMA Or APB                                                     */
  CRYPTO_CRYPTO_CTRL_RDSRC_rng         = 2,     /*!< rng : RNG                                                                 */
} CRYPTO_CRYPTO_CTRL_RDSRC_Type;

/* =========================================  CRYPTO CRYPTO_CTRL DMA_DONE [24..24]  ========================================== */
typedef enum {
  CRYPTO_CRYPTO_CTRL_DMA_DONE_notDone  = 0,     /*!< notDone : Not Done                                                        */
  CRYPTO_CRYPTO_CTRL_DMA_DONE_done     = 1,     /*!< done : Done                                                               */
} CRYPTO_CRYPTO_CTRL_DMA_DONE_Type;

/* =========================================  CRYPTO CRYPTO_CTRL GLS_DONE [25..25]  ========================================== */
typedef enum {
  CRYPTO_CRYPTO_CTRL_GLS_DONE_notDone  = 0,     /*!< notDone : Not Done                                                        */
  CRYPTO_CRYPTO_CTRL_GLS_DONE_done     = 1,     /*!< done : Done                                                               */
} CRYPTO_CRYPTO_CTRL_GLS_DONE_Type;

/* =========================================  CRYPTO CRYPTO_CTRL HSH_DONE [26..26]  ========================================== */
typedef enum {
  CRYPTO_CRYPTO_CTRL_HSH_DONE_notDone  = 0,     /*!< notDone : Not Done                                                        */
  CRYPTO_CRYPTO_CTRL_HSH_DONE_done     = 1,     /*!< done : Done                                                               */
} CRYPTO_CRYPTO_CTRL_HSH_DONE_Type;

/* =========================================  CRYPTO CRYPTO_CTRL CPH_DONE [27..27]  ========================================== */
typedef enum {
  CRYPTO_CRYPTO_CTRL_CPH_DONE_notDone  = 0,     /*!< notDone : Not Done                                                        */
  CRYPTO_CRYPTO_CTRL_CPH_DONE_done     = 1,     /*!< done : Done                                                               */
} CRYPTO_CRYPTO_CTRL_CPH_DONE_Type;

/* =========================================  CRYPTO CRYPTO_CTRL MAA_DONE [28..28]  ========================================== */
typedef enum {
  CRYPTO_CRYPTO_CTRL_MAA_DONE_notDone  = 0,     /*!< notDone : Not Done                                                        */
  CRYPTO_CRYPTO_CTRL_MAA_DONE_done     = 1,     /*!< done : Done                                                               */
} CRYPTO_CRYPTO_CTRL_MAA_DONE_Type;

/* ============================================  CRYPTO CRYPTO_CTRL ERR [29..29]  ============================================ */
typedef enum {
  CRYPTO_CRYPTO_CTRL_ERR_noError       = 0,     /*!< noError : No Error                                                        */
  CRYPTO_CRYPTO_CTRL_ERR_error         = 1,     /*!< error : Error                                                             */
} CRYPTO_CRYPTO_CTRL_ERR_Type;

/* ============================================  CRYPTO CRYPTO_CTRL RDY [30..30]  ============================================ */
typedef enum {
  CRYPTO_CRYPTO_CTRL_RDY_busy          = 0,     /*!< busy : Busy                                                               */
  CRYPTO_CRYPTO_CTRL_RDY_ready         = 1,     /*!< ready : Ready                                                             */
} CRYPTO_CRYPTO_CTRL_RDY_Type;

/* ===========================================  CRYPTO CRYPTO_CTRL DONE [31..31]  ============================================ */
typedef enum {
  CRYPTO_CRYPTO_CTRL_DONE_notDone      = 0,     /*!< notDone : Not Done                                                        */
  CRYPTO_CRYPTO_CTRL_DONE_done         = 1,     /*!< done : Done                                                               */
} CRYPTO_CRYPTO_CTRL_DONE_Type;

/* ======================================================  CIPHER_CTRL  ====================================================== */
/* =============================================  CRYPTO CIPHER_CTRL ENC [0..0]  ============================================= */
typedef enum {
  CRYPTO_CIPHER_CTRL_ENC_encrypt       = 0,     /*!< encrypt : Encrypt                                                         */
  CRYPTO_CIPHER_CTRL_ENC_decrypt       = 1,     /*!< decrypt : Decrypt                                                         */
} CRYPTO_CIPHER_CTRL_ENC_Type;

/* =============================================  CRYPTO CIPHER_CTRL KEY [1..1]  ============================================= */
typedef enum {
  CRYPTO_CIPHER_CTRL_KEY_complete      = 0,     /*!< complete : No operation/complete                                          */
  CRYPTO_CIPHER_CTRL_KEY_start         = 1,     /*!< start : Start operation                                                   */
} CRYPTO_CIPHER_CTRL_KEY_Type;

/* =============================================  CRYPTO CIPHER_CTRL SRC [3..3]  ============================================= */
typedef enum {
  CRYPTO_CIPHER_CTRL_SRC_cipherKey     = 0,     /*!< cipherKey : User cipher key (0x4000_1060)                                 */
  CRYPTO_CIPHER_CTRL_SRC_regFile       = 1,     /*!< regFile : Key from battery-backed register file (0x4000_5000
                                                      to 0x4000_501F)                                                          */
} CRYPTO_CIPHER_CTRL_SRC_Type;

/* ===========================================  CRYPTO CIPHER_CTRL CIPHER [4..6]  ============================================ */
typedef enum {
  CRYPTO_CIPHER_CTRL_CIPHER_disabled   = 0,     /*!< disabled : Disabled                                                       */
  CRYPTO_CIPHER_CTRL_CIPHER_aes128     = 1,     /*!< aes128 : AES 128                                                          */
  CRYPTO_CIPHER_CTRL_CIPHER_aes192     = 2,     /*!< aes192 : AES 192                                                          */
  CRYPTO_CIPHER_CTRL_CIPHER_aes256     = 3,     /*!< aes256 : AES 256                                                          */
  CRYPTO_CIPHER_CTRL_CIPHER_des        = 4,     /*!< des : DES                                                                 */
  CRYPTO_CIPHER_CTRL_CIPHER_tdes       = 5,     /*!< tdes : Triple DES                                                         */
} CRYPTO_CIPHER_CTRL_CIPHER_Type;

/* ============================================  CRYPTO CIPHER_CTRL MODE [8..10]  ============================================ */
typedef enum {
  CRYPTO_CIPHER_CTRL_MODE_ECB          = 0,     /*!< ECB : ECB Mode                                                            */
  CRYPTO_CIPHER_CTRL_MODE_CBC          = 1,     /*!< CBC : CBC Mode                                                            */
  CRYPTO_CIPHER_CTRL_MODE_CFB          = 2,     /*!< CFB : CFB (AES only)                                                      */
  CRYPTO_CIPHER_CTRL_MODE_OFB          = 3,     /*!< OFB : OFB (AES only)                                                      */
  CRYPTO_CIPHER_CTRL_MODE_CTR          = 4,     /*!< CTR : CTR (AES only)                                                      */
} CRYPTO_CIPHER_CTRL_MODE_Type;

/* =======================================================  HASH_CTRL  ======================================================= */
/* =============================================  CRYPTO HASH_CTRL INIT [0..0]  ============================================== */
typedef enum {
  CRYPTO_HASH_CTRL_INIT_nop            = 0,     /*!< nop : No operation/complete                                               */
  CRYPTO_HASH_CTRL_INIT_start          = 1,     /*!< start : Start operation                                                   */
} CRYPTO_HASH_CTRL_INIT_Type;

/* ==============================================  CRYPTO HASH_CTRL XOR [1..1]  ============================================== */
typedef enum {
  CRYPTO_HASH_CTRL_XOR_disable         = 0,     /*!< disable : Disable                                                         */
  CRYPTO_HASH_CTRL_XOR_enable          = 1,     /*!< enable : Enable                                                           */
} CRYPTO_HASH_CTRL_XOR_Type;

/* =============================================  CRYPTO HASH_CTRL HASH [2..4]  ============================================== */
typedef enum {
  CRYPTO_HASH_CTRL_HASH_disabled       = 0,     /*!< disabled : Disabled                                                       */
  CRYPTO_HASH_CTRL_HASH_sha1           = 1,     /*!< sha1 : SHA-1                                                              */
  CRYPTO_HASH_CTRL_HASH_sha224         = 2,     /*!< sha224 : SHA 224                                                          */
  CRYPTO_HASH_CTRL_HASH_sha256         = 3,     /*!< sha256 : SHA 256                                                          */
  CRYPTO_HASH_CTRL_HASH_sha384         = 4,     /*!< sha384 : SHA 384                                                          */
  CRYPTO_HASH_CTRL_HASH_sha512         = 5,     /*!< sha512 : SHA 512                                                          */
} CRYPTO_HASH_CTRL_HASH_Type;

/* =============================================  CRYPTO HASH_CTRL LAST [5..5]  ============================================== */
typedef enum {
  CRYPTO_HASH_CTRL_LAST_noEffect       = 0,     /*!< noEffect : No Effect                                                      */
  CRYPTO_HASH_CTRL_LAST_lastMsgData    = 1,     /*!< lastMsgData : Last Message Data                                           */
} CRYPTO_HASH_CTRL_LAST_Type;

/* =======================================================  CRC_CTRL  ======================================================== */
/* ==============================================  CRYPTO CRC_CTRL CRC [0..0]  =============================================== */
typedef enum {
  CRYPTO_CRC_CTRL_CRC_disable          = 0,     /*!< disable : Disable                                                         */
  CRYPTO_CRC_CTRL_CRC_enable           = 1,     /*!< enable : Enable                                                           */
} CRYPTO_CRC_CTRL_CRC_Type;

/* ==============================================  CRYPTO CRC_CTRL MSB [1..1]  =============================================== */
typedef enum {
  CRYPTO_CRC_CTRL_MSB_lsbFirst         = 0,     /*!< lsbFirst : LSB First                                                      */
  CRYPTO_CRC_CTRL_MSB_msbFirst         = 1,     /*!< msbFirst : MSB First                                                      */
} CRYPTO_CRC_CTRL_MSB_Type;

/* ==============================================  CRYPTO CRC_CTRL PRNG [2..2]  ============================================== */
typedef enum {
  CRYPTO_CRC_CTRL_PRNG_disable         = 0,     /*!< disable : Disable                                                         */
  CRYPTO_CRC_CTRL_PRNG_enable          = 1,     /*!< enable : Enable                                                           */
} CRYPTO_CRC_CTRL_PRNG_Type;

/* ==============================================  CRYPTO CRC_CTRL ENT [3..3]  =============================================== */
typedef enum {
  CRYPTO_CRC_CTRL_ENT_disable          = 0,     /*!< disable : Disable                                                         */
  CRYPTO_CRC_CTRL_ENT_enable           = 1,     /*!< enable : Enable                                                           */
} CRYPTO_CRC_CTRL_ENT_Type;

/* ==============================================  CRYPTO CRC_CTRL HAM [4..4]  =============================================== */
typedef enum {
  CRYPTO_CRC_CTRL_HAM_disable          = 0,     /*!< disable : Disable                                                         */
  CRYPTO_CRC_CTRL_HAM_enable           = 1,     /*!< enable : Enable                                                           */
} CRYPTO_CRC_CTRL_HAM_Type;

/* ==============================================  CRYPTO CRC_CTRL HRST [5..5]  ============================================== */
typedef enum {
  CRYPTO_CRC_CTRL_HRST_reset           = 1,     /*!< reset : Starts reset operation                                            */
} CRYPTO_CRC_CTRL_HRST_Type;

/* ========================================================  DMA_SRC  ======================================================== */
/* =======================================================  DMA_DEST  ======================================================== */
/* ========================================================  DMA_CNT  ======================================================== */
/* =======================================================  MAA_CTRL  ======================================================== */
/* ==============================================  CRYPTO MAA_CTRL STC [0..0]  =============================================== */
typedef enum {
  CRYPTO_MAA_CTRL_STC_nop              = 0,     /*!< nop : No operation/complete                                               */
  CRYPTO_MAA_CTRL_STC_start            = 1,     /*!< start : Start operation                                                   */
} CRYPTO_MAA_CTRL_STC_Type;

/* ==============================================  CRYPTO MAA_CTRL CLC [1..3]  =============================================== */
typedef enum {
  CRYPTO_MAA_CTRL_CLC_exp              = 0,     /*!< exp : Exponentiation                                                      */
  CRYPTO_MAA_CTRL_CLC_sq               = 1,     /*!< sq : Square operation                                                     */
  CRYPTO_MAA_CTRL_CLC_mul              = 2,     /*!< mul : Multiplication                                                      */
  CRYPTO_MAA_CTRL_CLC_sqMul            = 3,     /*!< sqMul : Square followed by a multiplication                               */
  CRYPTO_MAA_CTRL_CLC_add              = 4,     /*!< add : Addition                                                            */
  CRYPTO_MAA_CTRL_CLC_sub              = 5,     /*!< sub : Subtraction                                                         */
} CRYPTO_MAA_CTRL_CLC_Type;

/* =============================================  CRYPTO MAA_CTRL OCALC [4..4]  ============================================== */
typedef enum {
  CRYPTO_MAA_CTRL_OCALC_disable        = 0,     /*!< disable : Disable                                                         */
  CRYPTO_MAA_CTRL_OCALC_enable         = 1,     /*!< enable : Enable                                                           */
} CRYPTO_MAA_CTRL_OCALC_Type;

/* =============================================  CRYPTO MAA_CTRL MAAER [7..7]  ============================================== */
typedef enum {
  CRYPTO_MAA_CTRL_MAAER_noError        = 0,     /*!< noError : No Error                                                        */
  CRYPTO_MAA_CTRL_MAAER_error          = 1,     /*!< error : Error                                                             */
} CRYPTO_MAA_CTRL_MAAER_Type;

/* =====================================================  CRYPTO_DIN_0  ====================================================== */
/* =====================================================  CRYPTO_DIN_1  ====================================================== */
/* =====================================================  CRYPTO_DIN_2  ====================================================== */
/* =====================================================  CRYPTO_DIN_3  ====================================================== */
/* =====================================================  CRYPTO_DOUT_0  ===================================================== */
/* =====================================================  CRYPTO_DOUT_1  ===================================================== */
/* =====================================================  CRYPTO_DOUT_2  ===================================================== */
/* =====================================================  CRYPTO_DOUT_3  ===================================================== */
/* =======================================================  CRC_POLY  ======================================================== */
/* ========================================================  CRC_VAL  ======================================================== */
/* =======================================================  CRC_PRNG  ======================================================== */
/* ========================================================  HAM_ECC  ======================================================== */
/* ==============================================  CRYPTO HAM_ECC PAR [16..16]  ============================================== */
typedef enum {
  CRYPTO_HAM_ECC_PAR_even              = 0,     /*!< even : Even                                                               */
  CRYPTO_HAM_ECC_PAR_odd               = 1,     /*!< odd : Odd                                                                 */
} CRYPTO_HAM_ECC_PAR_Type;

/* =====================================================  CIPHER_INIT_0  ===================================================== */
/* =====================================================  CIPHER_INIT_1  ===================================================== */
/* =====================================================  CIPHER_INIT_2  ===================================================== */
/* =====================================================  CIPHER_INIT_3  ===================================================== */
/* =====================================================  CIPHER_KEY_0  ====================================================== */
/* =====================================================  CIPHER_KEY_1  ====================================================== */
/* =====================================================  CIPHER_KEY_2  ====================================================== */
/* =====================================================  CIPHER_KEY_3  ====================================================== */
/* =====================================================  CIPHER_KEY_4  ====================================================== */
/* =====================================================  CIPHER_KEY_5  ====================================================== */
/* =====================================================  CIPHER_KEY_6  ====================================================== */
/* =====================================================  CIPHER_KEY_7  ====================================================== */
/* =====================================================  HASH_DIGEST_0  ===================================================== */
/* =====================================================  HASH_DIGEST_1  ===================================================== */
/* =====================================================  HASH_DIGEST_2  ===================================================== */
/* =====================================================  HASH_DIGEST_3  ===================================================== */
/* =====================================================  HASH_DIGEST_4  ===================================================== */
/* =====================================================  HASH_DIGEST_5  ===================================================== */
/* =====================================================  HASH_DIGEST_6  ===================================================== */
/* =====================================================  HASH_DIGEST_7  ===================================================== */
/* =====================================================  HASH_DIGEST_8  ===================================================== */
/* =====================================================  HASH_DIGEST_9  ===================================================== */
/* ====================================================  HASH_DIGEST_10  ===================================================== */
/* ====================================================  HASH_DIGEST_11  ===================================================== */
/* ====================================================  HASH_DIGEST_12  ===================================================== */
/* ====================================================  HASH_DIGEST_13  ===================================================== */
/* ====================================================  HASH_DIGEST_14  ===================================================== */
/* ====================================================  HASH_DIGEST_15  ===================================================== */
/* =====================================================  HASH_MSG_SZ_0  ===================================================== */
/* =====================================================  HASH_MSG_SZ_1  ===================================================== */
/* =====================================================  HASH_MSG_SZ_2  ===================================================== */
/* =====================================================  HASH_MSG_SZ_3  ===================================================== */
/* =======================================================  MAA_MAWS  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            DAC                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
/* ================================================  DAC CTRL DACFAF [5..5]  ================================================= */
typedef enum {
  DAC_CTRL_DACFAF_false                = 0,     /*!< false : The assertion is False                                            */
  DAC_CTRL_DACFAF_true                 = 1,     /*!< true : The assertion is True                                              */
} DAC_CTRL_DACFAF_Type;

/* =================================================  DAC CTRL DACFE [6..6]  ================================================= */
typedef enum {
  DAC_CTRL_DACFE_false                 = 0,     /*!< false : The assertion is False                                            */
  DAC_CTRL_DACFE_true                  = 1,     /*!< true : The assertion is True                                              */
} DAC_CTRL_DACFE_Type;

/* ================================================  DAC CTRL DACFAE [7..7]  ================================================= */
typedef enum {
  DAC_CTRL_DACFAE_false                = 0,     /*!< false : The assertion is False                                            */
  DAC_CTRL_DACFAE_true                 = 1,     /*!< true : The assertion is True                                              */
} DAC_CTRL_DACFAE_Type;

/* ============================================  DAC CTRL DACINTERPMODE [8..10]  ============================================= */
typedef enum {
  DAC_CTRL_DACINTERPMODE_disabled      = 0,     /*!< disabled : Disabled                                                       */
  DAC_CTRL_DACINTERPMODE_interp1to2    = 1,     /*!< interp1to2 : 1:2 Interpolation                                            */
  DAC_CTRL_DACINTERPMODE_interp1to4    = 2,     /*!< interp1to4 : 1:4 Interpolation                                            */
  DAC_CTRL_DACINTERPMODE_interp1to8    = 3,     /*!< interp1to8 : 1:8 Interpolation                                            */
} DAC_CTRL_DACINTERPMODE_Type;

/* ==============================================  DAC CTRL DACSTMODE [16..17]  ============================================== */
typedef enum {
  DAC_CTRL_DACSTMODE_notEmpty          = 0,     /*!< notEmpty : Start on FIFO not empty                                        */
  DAC_CTRL_DACSTMODE_strobe            = 2,     /*!< strobe : Start on local DAC Start Strobe                                  */
} DAC_CTRL_DACSTMODE_Type;

/* ==============================================  DAC CTRL CPUDACST [20..20]  =============================================== */
typedef enum {
  DAC_CTRL_CPUDACST_start              = 1,     /*!< start : Start Conversion                                                  */
} DAC_CTRL_CPUDACST_Type;

/* ===============================================  DAC CTRL DACMODE [24..25]  =============================================== */
typedef enum {
  DAC_CTRL_DACMODE_onAvail             = 0,     /*!< onAvail : Output Data in FIFO as soon as available.                       */
  DAC_CTRL_DACMODE_perDacRateCnt       = 1,     /*!< perDacRateCnt : Output DacSmplCnt[15:0] Data points from FIFO
                                                      at Ts defined by DacRateCnt[15:0].                                       */
  DAC_CTRL_DACMODE_perDacReg           = 2,     /*!< perDacReg : Use DAC_REG control.                                          */
  DAC_CTRL_DACMODE_toModeChange        = 3,     /*!< toModeChange : Output DacSmplCnt[15:0] Data points from FIFO
                                                      at Ts until mode changed.                                                */
} DAC_CTRL_DACMODE_Type;

/* ================================================  DAC CTRL DACPU [28..28]  ================================================ */
typedef enum {
  DAC_CTRL_DACPU_disable               = 0,     /*!< disable : Disable                                                         */
  DAC_CTRL_DACPU_enable                = 1,     /*!< enable : Enable                                                           */
} DAC_CTRL_DACPU_Type;

/* ==============================================  DAC CTRL DACCLKEN [29..29]  =============================================== */
typedef enum {
  DAC_CTRL_DACCLKEN_disable            = 0,     /*!< disable : Disable                                                         */
  DAC_CTRL_DACCLKEN_enable             = 1,     /*!< enable : Enable                                                           */
} DAC_CTRL_DACCLKEN_Type;

/* ===============================================  DAC CTRL DACRST [31..31]  ================================================ */
typedef enum {
  DAC_CTRL_DACRST_reset                = 1,     /*!< reset : Starts reset operation                                            */
} DAC_CTRL_DACRST_Type;

/* =========================================================  RATE  ========================================================== */
/* ==========================================================  INT  ========================================================== */
/* ===============================================  DAC INT DACDONEISR [0..0]  =============================================== */
typedef enum {
  DAC_INT_DACDONEISR_flag_read_inactive = 0,    /*!< inactive : No interrupt is pending                                        */
  DAC_INT_DACDONEISR_flag_read_pending = 1,     /*!< pending : An interrupt is pending                                         */
} DAC_INT_DACDONEISR_flag_read_Type;

typedef enum {
  DAC_INT_DACDONEISR_w1c_write_clear   = 1,     /*!< clear : Clear                                                             */
} DAC_INT_DACDONEISR_w1c_write_Type;

/* ===============================================  DAC INT DACFUFISR [1..1]  ================================================ */
typedef enum {
  DAC_INT_DACFUFISR_flag_read_inactive = 0,     /*!< inactive : No interrupt is pending                                        */
  DAC_INT_DACFUFISR_flag_read_pending  = 1,     /*!< pending : An interrupt is pending                                         */
} DAC_INT_DACFUFISR_flag_read_Type;

typedef enum {
  DAC_INT_DACFUFISR_w1c_write_clear    = 1,     /*!< clear : Clear                                                             */
} DAC_INT_DACFUFISR_w1c_write_Type;

/* ===============================================  DAC INT DACFAEISR [2..2]  ================================================ */
typedef enum {
  DAC_INT_DACFAEISR_flag_read_inactive = 0,     /*!< inactive : No interrupt is pending                                        */
  DAC_INT_DACFAEISR_flag_read_pending  = 1,     /*!< pending : An interrupt is pending                                         */
} DAC_INT_DACFAEISR_flag_read_Type;

typedef enum {
  DAC_INT_DACFAEISR_w1c_write_clear    = 1,     /*!< clear : Clear                                                             */
} DAC_INT_DACFAEISR_w1c_write_Type;

/* ================================================  DAC INT DACFUFST [3..3]  ================================================ */
typedef enum {
  DAC_INT_DACFUFST_flag_read_inactive  = 0,     /*!< inactive : No interrupt is pending                                        */
  DAC_INT_DACFUFST_flag_read_pending   = 1,     /*!< pending : An interrupt is pending                                         */
} DAC_INT_DACFUFST_flag_read_Type;

typedef enum {
  DAC_INT_DACFUFST_w1c_write_clear     = 1,     /*!< clear : Clear                                                             */
} DAC_INT_DACFUFST_w1c_write_Type;

/* ==============================================  DAC INT DACDONEIE [16..16]  =============================================== */
typedef enum {
  DAC_INT_DACDONEIE_disable            = 0,     /*!< disable : Disable                                                         */
  DAC_INT_DACDONEIE_enable             = 1,     /*!< enable : Enable                                                           */
} DAC_INT_DACDONEIE_Type;

/* ===============================================  DAC INT DACFUFIE [17..17]  =============================================== */
typedef enum {
  DAC_INT_DACFUFIE_disable             = 0,     /*!< disable : Disable                                                         */
  DAC_INT_DACFUFIE_enable              = 1,     /*!< enable : Enable                                                           */
} DAC_INT_DACFUFIE_Type;

/* ===============================================  DAC INT DACFAEIE [18..18]  =============================================== */
typedef enum {
  DAC_INT_DACFAEIE_disable             = 0,     /*!< disable : Disable                                                         */
  DAC_INT_DACFAEIE_enable              = 1,     /*!< enable : Enable                                                           */
} DAC_INT_DACFAEIE_Type;

/* ==========================================================  REG  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           DMAC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CN  =========================================================== */
/* ================================================  DMAC CN CH0_IEN [0..0]  ================================================= */
typedef enum {
  DMAC_CN_CHn_IEN_disable              = 0,     /*!< disable : Disable                                                         */
  DMAC_CN_CHn_IEN_enable               = 1,     /*!< enable : Enable                                                           */
} DMAC_CN_CHn_IEN_Type;

/* ================================================  DMAC CN CH1_IEN [1..1]  ================================================= */
/* ================================================  DMAC CN CH2_IEN [2..2]  ================================================= */
/* ================================================  DMAC CN CH3_IEN [3..3]  ================================================= */
/* ==========================================================  INT  ========================================================== */
/* ===============================================  DMAC INT CH0_IPEND [0..0]  =============================================== */
typedef enum {
  DMAC_INT_CHn_IPEND_inactive          = 0,     /*!< inactive : No interrupt is pending                                        */
  DMAC_INT_CHn_IPEND_pending           = 1,     /*!< pending : An interrupt is pending                                         */
} DMAC_INT_CHn_IPEND_Type;

/* ===============================================  DMAC INT CH1_IPEND [1..1]  =============================================== */
/* ===============================================  DMAC INT CH2_IPEND [2..2]  =============================================== */
/* ===============================================  DMAC INT CH3_IPEND [3..3]  =============================================== */
/* =======================================================  DMA0_CFG  ======================================================== */
/* ===============================================  DMAC DMA0_CFG CHEN [0..0]  =============================================== */
typedef enum {
  DMAn_CFG_CHEN_disable   = 0,     /*!< disable : Disable                                                         */
  DMAn_CFG_CHEN_enable    = 1,     /*!< enable : Enable                                                           */
} DMAn_CFG_CHEN_Type;

/* ==============================================  DMAC DMA0_CFG RLDEN [1..1]  =============================================== */
typedef enum {
  DMAn_CFG_RLDEN_disable  = 0,     /*!< disable : Disable                                                         */
  DMAn_CFG_RLDEN_enable   = 1,     /*!< enable : Enable                                                           */
} DMAn_CFG_RLDEN_Type;

/* ===============================================  DMAC DMA0_CFG PRI [2..3]  ================================================ */
typedef enum {
  DMAn_CFG_PRI_high       = 0,     /*!< high : Highest Priority                                                   */
  DMAn_CFG_PRI_medHigh    = 1,     /*!< medHigh : Medium High Priority                                            */
  DMAn_CFG_PRI_medLow     = 2,     /*!< medLow : Medium Low Priority                                              */
  DMAn_CFG_PRI_low        = 3,     /*!< low : Lowest Priority                                                     */
} DMAn_CFG_PRI_Type;

/* ==============================================  DMAC DMA0_CFG REQSEL [4..9]  ============================================== */
typedef enum {
  DMAn_CFG_REQSEL_memToMem = 0,    /*!< memToMem : Memory To Memory                                               */
  DMAn_CFG_REQSEL_spi0Rx  = 1,     /*!< spi0Rx : SPI0 RX                                                          */
  DMAn_CFG_REQSEL_spi1Rx  = 2,     /*!< spi1Rx : SPI1 RX                                                          */
  DMAn_CFG_REQSEL_spi2Rx  = 3,     /*!< spi2Rx : SPI2 RX                                                          */
  DMAn_CFG_REQSEL_uart0Rx = 4,     /*!< uart0Rx : UART0 RX                                                        */
  DMAn_CFG_REQSEL_uart1Rx = 5,     /*!< uart1Rx : UART1 RX                                                        */
  DMAn_CFG_REQSEL_i2cRx   = 7,     /*!< i2cRx : I2C RX                                                            */
  DMAn_CFG_REQSEL_msrT1Rx = 11,    /*!< msrT1Rx : MSR DSP T1                                                      */
  DMAn_CFG_REQSEL_msrT2Rx = 12,    /*!< msrT2Rx : MSR DSP T2                                                      */
  DMAn_CFG_REQSEL_msrT3Rx = 13,    /*!< msrT3Rx : MSR DSP T3                                                      */
  DMAn_CFG_REQSEL_spi0Tx  = 33,    /*!< spi0Tx : SPI0 TX                                                          */
  DMAn_CFG_REQSEL_spi1Tx  = 34,    /*!< spi1Tx : SPI1 TX                                                          */
  DMAn_CFG_REQSEL_spi2Tx  = 35,    /*!< spi2Tx : SPI2 TX                                                          */
  DMAn_CFG_REQSEL_uart0Tx = 36,    /*!< uart0Tx : UART0 TX                                                        */
  DMAn_CFG_REQSEL_uart1Tx = 37,    /*!< uart1Tx : UART1 TX                                                        */
  DMAn_CFG_REQSEL_i2cTx   = 39,    /*!< i2cTx : I2C TX                                                            */
} DMAn_CFG_REQSEL_Type;

/* ============================================  DMAC DMA0_CFG REQWAIT [10..10]  ============================================= */
typedef enum {
  DMAn_CFG_REQWAIT_disable = 0,    /*!< disable : Disable                                                         */
  DMAn_CFG_REQWAIT_enable = 1,     /*!< enable : Enable                                                           */
} DMAn_CFG_REQWAIT_Type;

/* =============================================  DMAC DMA0_CFG TOSEL [11..13]  ============================================== */
typedef enum {
  DMAn_CFG_TOSEL_to4      = 0,     /*!< to4 : Timeout of 3 to 4 prescale clocks                                   */
  DMAn_CFG_TOSEL_to8      = 1,     /*!< to8 : Timeout of 7 to 8 prescale clocks                                   */
  DMAn_CFG_TOSEL_to16     = 2,     /*!< to16 : Timeout of 15 to 16 prescale clocks                                */
  DMAn_CFG_TOSEL_to32     = 3,     /*!< to32 : Timeout of 31 to 32 prescale clocks                                */
  DMAn_CFG_TOSEL_to64     = 4,     /*!< to64 : Timeout of 63 to 64 prescale clocks                                */
  DMAn_CFG_TOSEL_to128    = 5,     /*!< to128 : Timeout of 127 to 128 prescale clocks                             */
  DMAn_CFG_TOSEL_to256    = 6,     /*!< to256 : Timeout of 255 to 256 prescale clocks                             */
  DMAn_CFG_TOSEL_to512    = 7,     /*!< to512 : Timeout of 511 to 512 prescale clocks                             */
} DMAn_CFG_TOSEL_Type;

/* =============================================  DMAC DMA0_CFG PSSEL [14..15]  ============================================== */
typedef enum {
  DMAn_CFG_PSSEL_disable  = 0,     /*!< disable : Disable timer                                                   */
  DMAn_CFG_PSSEL_div256   = 1,     /*!< div256 : hclk / 256                                                       */
  DMAn_CFG_PSSEL_div64k   = 2,     /*!< div64k : hclk / 64k                                                       */
  DMAn_CFG_PSSEL_div16M   = 3,     /*!< div16M : hclk / 16M                                                       */
} DMAn_CFG_PSSEL_Type;

/* =============================================  DMAC DMA0_CFG SRCWD [16..17]  ============================================== */
typedef enum {
  DMAn_CFG_SRCWD_byte     = 0,     /*!< byte : Byte                                                               */
  DMAn_CFG_SRCWD_halfWord = 1,     /*!< halfWord : Halfword                                                       */
  DMAn_CFG_SRCWD_word     = 2,     /*!< word : Word                                                               */
} DMAn_CFG_SRCWD_Type;

/* =============================================  DMAC DMA0_CFG SRCINC [18..18]  ============================================= */
typedef enum {
  DMAn_CFG_SRCINC_disable = 0,     /*!< disable : Disable                                                         */
  DMAn_CFG_SRCINC_enable  = 1,     /*!< enable : Enable                                                           */
} DMAn_CFG_SRCINC_Type;

/* =============================================  DMAC DMA0_CFG DSTWD [20..21]  ============================================== */
typedef enum {
  DMAn_CFG_DSTWD_byte     = 0,     /*!< byte : Byte                                                               */
  DMAn_CFG_DSTWD_halfWord = 1,     /*!< halfWord : Halfword                                                       */
  DMAn_CFG_DSTWD_word     = 2,     /*!< word : Word                                                               */
} DMAn_CFG_DSTWD_Type;

/* =============================================  DMAC DMA0_CFG DSTINC [22..22]  ============================================= */
typedef enum {
  DMAn_CFG_DSTINC_disable = 0,     /*!< disable : Disable                                                         */
  DMAn_CFG_DSTINC_enable  = 1,     /*!< enable : Enable                                                           */
} DMAn_CFG_DSTINC_Type;

/* =============================================  DMAC DMA0_CFG CHDIEN [30..30]  ============================================= */
typedef enum {
  DMAn_CFG_CHDIEN_disable = 0,     /*!< disable : Disable                                                         */
  DMAn_CFG_CHDIEN_enable  = 1,     /*!< enable : Enable                                                           */
} DMAn_CFG_CHDIEN_Type;

/* =============================================  DMAC DMA0_CFG CTZIEN [31..31]  ============================================= */
typedef enum {
  DMAn_CFG_CTZIEN_disable = 0,     /*!< disable : Disable                                                         */
  DMAn_CFG_CTZIEN_enable  = 1,     /*!< enable : Enable                                                           */
} DMAn_CFG_CTZIEN_Type;

/* ========================================================  DMA0_ST  ======================================================== */
/* ===============================================  DMAC DMA0_ST CH_ST [0..0]  =============================================== */
typedef enum {
  DMAn_ST_CH_ST_disable    = 0,     /*!< disable : Disable                                                         */
  DMAn_ST_CH_ST_enable     = 1,     /*!< enable : Enable                                                           */
} DMAn_ST_CH_ST_Type;

/* ===============================================  DMAC DMA0_ST IPEND [1..1]  =============================================== */
typedef enum {
  DMAn_ST_IPEND_inactive   = 0,     /*!< inactive : No interrupt is pending                                        */
  DMAn_ST_IPEND_pending    = 1,     /*!< pending : An interrupt is pending                                         */
} DMAn_ST_IPEND_Type;

/* ==============================================  DMAC DMA0_ST CTZ_ST [2..2]  =============================================== */
typedef enum {
  DMAn_ST_CTZ_ST_event_flag_read_noEvent = 0,/*!< noEvent : The event has not occurred                             */
  DMAn_ST_CTZ_ST_event_flag_read_occurred = 1,/*!< occurred : The event has occurred                               */
} DMAn_ST_CTZ_ST_event_flag_read_Type;

typedef enum {
  DMAn_ST_CTZ_ST_w1c_write_clear = 1,/*!< clear : Clear                                                            */
} DMAn_ST_CTZ_ST_w1c_write_Type;

/* ==============================================  DMAC DMA0_ST RLD_ST [3..3]  =============================================== */
typedef enum {
  DMAn_ST_RLD_ST_event_flag_read_noEvent = 0,/*!< noEvent : The event has not occurred                             */
  DMAn_ST_RLD_ST_event_flag_read_occurred = 1,/*!< occurred : The event has occurred                               */
} DMAn_ST_RLD_ST_event_flag_read_Type;

typedef enum {
  DMAn_ST_RLD_ST_w1c_write_clear = 1,/*!< clear : Clear                                                            */
} DMAn_ST_RLD_ST_w1c_write_Type;

/* ==============================================  DMAC DMA0_ST BUS_ERR [4..4]  ============================================== */
typedef enum {
  DMAn_ST_BUS_ERR_event_flag_read_noEvent = 0,/*!< noEvent : The event has not occurred                            */
  DMAn_ST_BUS_ERR_event_flag_read_occurred = 1,/*!< occurred : The event has occurred                              */
} DMAn_ST_BUS_ERR_event_flag_read_Type;

typedef enum {
  DMAn_ST_BUS_ERR_w1c_write_clear = 1,/*!< clear : Clear                                                           */
} DMAn_ST_BUS_ERR_w1c_write_Type;

/* ===============================================  DMAC DMA0_ST TO_ST [6..6]  =============================================== */
typedef enum {
  DMAn_ST_TO_ST_event_flag_read_noEvent = 0,/*!< noEvent : The event has not occurred                              */
  DMAn_ST_TO_ST_event_flag_read_occurred = 1,/*!< occurred : The event has occurred                                */
} DMAn_ST_TO_ST_event_flag_read_Type;

typedef enum {
  DMAn_ST_TO_ST_w1c_write_clear = 1,/*!< clear : Clear                                                             */
} DMAn_ST_TO_ST_w1c_write_Type;

/* =======================================================  DMAn_SRC  ======================================================== */
/* =======================================================  DMAn_DST  ======================================================== */
/* =======================================================  DMAn_CNT  ======================================================== */
/* =====================================================  DMAn_SRC_RLD  ====================================================== */
/* =====================================================  DMAn_DST_RLD  ====================================================== */
/* =====================================================  DMAn_CNT_RLD  ====================================================== */
/* ===========================================  DMAC DMAn_CNT_RLD RLDEN [31..31]  ============================================ */
typedef enum {
  DMAn_CNT_RLD_RLDEN_disable = 0,/*!< disable : Disable                                                       */
  DMAn_CNT_RLD_RLDEN_enable = 1,/*!< enable : Enable                                                          */
} DMAn_CNT_RLD_RLDEN_Type;



/* =========================================================================================================================== */
/* ================                                            FC                                             ================ */
/* =========================================================================================================================== */

/* =======================================================  FLSH_ADDR  ======================================================= */
/* ======================================================  FLSH_CLKDIV  ====================================================== */
/* ========================================================  FLSH_CN  ======================================================== */
/* =================================================  FC FLSH_CN WR [0..0]  ================================================== */
typedef enum {
  FC_CN_WR_complete                    = 0,     /*!< complete : No operation/complete                                          */
  FC_CN_WR_start                       = 1,     /*!< start : Start operation                                                   */
} FC_CN_WR_Type;

/* =================================================  FC FLSH_CN ME [1..1]  ================================================== */
typedef enum {
  FC_CN_ME_complete                    = 0,     /*!< complete : No operation/complete                                          */
  FC_CN_ME_start                       = 1,     /*!< start : Start operation                                                   */
} FC_CN_ME_Type;

/* =================================================  FC FLSH_CN PGE [2..2]  ================================================= */
typedef enum {
  FC_CN_PGE_complete                   = 0,     /*!< complete : No operation/complete                                          */
  FC_CN_PGE_start                      = 1,     /*!< start : Start operation                                                   */
} FC_CN_PGE_Type;

/* ================================================  FC FLSH_CN WDTH [4..4]  ================================================= */
typedef enum {
  FC_CN_WDTH_size128                   = 0,     /*!< size128 : 128-bit                                                         */
  FC_CN_WDTH_size32                    = 1,     /*!< size32 : 32-bit                                                           */
} FC_CN_WDTH_Type;

/* =============================================  FC FLSH_CN ERASE_CODE [8..15]  ============================================= */
typedef enum {
  FC_CN_ERASE_CODE_nop                 = 0,     /*!< nop : No operation                                                        */
  FC_CN_ERASE_CODE_erasePage           = 85,    /*!< erasePage : Enable Page Erase                                             */
  FC_CN_ERASE_CODE_eraseAll            = 170,   /*!< eraseAll : Enable Mass Erase. The debug port must be enabled.             */
} FC_CN_ERASE_CODE_Type;

/* ===============================================  FC FLSH_CN PEND [24..24]  ================================================ */
typedef enum {
  FC_CN_PEND_idle                      = 0,     /*!< idle : Idle                                                               */
  FC_CN_PEND_busy                      = 1,     /*!< busy : Busy                                                               */
} FC_CN_PEND_Type;

/* ==============================================  FC FLSH_CN PREBOOT [26..26]  ============================================== */
typedef enum {
  FC_CN_PREBOOT_idle                   = 0,     /*!< idle : Idle                                                               */
  FC_CN_PREBOOT_busy                   = 1,     /*!< busy : Busy                                                               */
} FC_CN_PREBOOT_Type;

/* ===============================================  FC FLSH_CN BRST [27..27]  ================================================ */
typedef enum {
  FC_CN_BRST_disable                   = 0,     /*!< disable : Disable                                                         */
  FC_CN_BRST_enable                    = 1,     /*!< enable : Enable                                                           */
} FC_CN_BRST_Type;

/* ==============================================  FC FLSH_CN UNLOCK [28..31]  =============================================== */
typedef enum {
  FC_CN_UNLOCK_unlocked                = 2,     /*!< unlocked : Flash Unlocked                                                 */
} FC_CN_UNLOCK_Type;

/* =======================================================  FLSH_INT  ======================================================== */
/* ================================================  FC FLSH_INT DONE [0..0]  ================================================ */
typedef enum {
  FC_INT_DONE_inactive                 = 0,     /*!< inactive : No interrupt is pending.                                       */
  FC_INT_DONE_pending                  = 1,     /*!< pending : An interrupt is pending.                                        */
} FC_INT_DONE_Type;

/* =================================================  FC FLSH_INT AF [1..1]  ================================================= */
typedef enum {
  FC_INT_AF_noError                    = 0,     /*!< noError : No Failure                                                      */
  FC_INT_AF_error                      = 1,     /*!< error : Failure occurs                                                    */
} FC_INT_AF_Type;

/* ===============================================  FC FLSH_INT DONEIE [8..8]  =============================================== */
typedef enum {
  FC_INT_DONEIE_disable                = 0,     /*!< disable : Disable                                                         */
  FC_INT_DONEIE_enable                 = 1,     /*!< enable : Enable                                                           */
} FC_INT_DONEIE_Type;

/* ================================================  FC FLSH_INT AFIE [9..9]  ================================================ */
typedef enum {
  FC_INT_AFIE_disable                  = 0,     /*!< disable : Disable                                                         */
  FC_INT_AFIE_enable                   = 1,     /*!< enable : Enable                                                           */
} FC_INT_AFIE_Type;

/* ======================================================  FLSH_DATA0  ======================================================= */
/* ======================================================  FLSH_DATA1  ======================================================= */
/* ======================================================  FLSH_DATA2  ======================================================= */
/* ======================================================  FLSH_DATA3  ======================================================= */
/* ======================================================  FLSH_ACNTL  ======================================================= */


/* =========================================================================================================================== */
/* ================                                            I2C                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==================================================  I2C CR RXTHD [0..3]  ================================================== */
typedef enum {
  I2C_CR_RXTHD_word1                   = 1,     /*!< word1 : 1 word                                                            */
  I2C_CR_RXTHD_word2                   = 2,     /*!< word2 : 2 words                                                           */
  I2C_CR_RXTHD_word3                   = 3,     /*!< word3 : 3 words                                                           */
  I2C_CR_RXTHD_word4                   = 4,     /*!< word4 : 4 words                                                           */
  I2C_CR_RXTHD_word5                   = 5,     /*!< word5 : 5 words                                                           */
  I2C_CR_RXTHD_word6                   = 6,     /*!< word6 : 6 words                                                           */
  I2C_CR_RXTHD_word7                   = 7,     /*!< word7 : 7 words                                                           */
  I2C_CR_RXTHD_word8                   = 8,     /*!< word8 : 8 words                                                           */
} I2C_CR_RXTHD_Type;

/* =================================================  I2C CR AUTOSTT [4..4]  ================================================= */
typedef enum {
  I2C_CR_AUTOSTT_disable               = 0,     /*!< disable : Disable                                                         */
  I2C_CR_AUTOSTT_enable                = 1,     /*!< enable : Enable                                                           */
} I2C_CR_AUTOSTT_Type;

/* ==================================================  I2C CR START [5..5]  ================================================== */
typedef enum {
  I2C_CR_START_complete                = 0,     /*!< complete : No operation/complete                                          */
  I2C_CR_START_start                   = 1,     /*!< start : Start operation                                                   */
} I2C_CR_START_Type;

/* =================================================  I2C CR RESTART [6..6]  ================================================= */
typedef enum {
  I2C_CR_RESTART_complete              = 0,     /*!< complete : No operation/complete                                          */
  I2C_CR_RESTART_start                 = 1,     /*!< start : Start operation                                                   */
} I2C_CR_RESTART_Type;

/* ==================================================  I2C CR STOP [7..7]  =================================================== */
typedef enum {
  I2C_CR_STOP_complete                 = 0,     /*!< complete : No operation/complete                                          */
  I2C_CR_STOP_start                    = 1,     /*!< start : Start operation                                                   */
} I2C_CR_STOP_Type;

/* =================================================  I2C CR TXFLUSH [8..8]  ================================================= */
typedef enum {
  I2C_CR_TXFLUSH_complete              = 0,     /*!< complete : No operation/complete                                          */
  I2C_CR_TXFLUSH_start                 = 1,     /*!< start : Start operation                                                   */
} I2C_CR_TXFLUSH_Type;

/* =================================================  I2C CR RXFLUSH [9..9]  ================================================= */
typedef enum {
  I2C_CR_RXFLUSH_complete              = 0,     /*!< complete : No operation/complete                                          */
  I2C_CR_RXFLUSH_start                 = 1,     /*!< start : Start operation                                                   */
} I2C_CR_RXFLUSH_Type;

/* ================================================  I2C CR AFREAD [10..10]  ================================================= */
typedef enum {
  I2C_CR_AFREAD_disable                = 0,     /*!< disable : Disable                                                         */
  I2C_CR_AFREAD_enable                 = 1,     /*!< enable : Enable                                                           */
} I2C_CR_AFREAD_Type;

/* ================================================  I2C CR FREEZE [11..11]  ================================================= */
typedef enum {
  I2C_CR_FREEZE_disable                = 0,     /*!< disable : Disable                                                         */
  I2C_CR_FREEZE_enable                 = 1,     /*!< enable : Enable                                                           */
} I2C_CR_FREEZE_Type;

/* ==========================================================  SR  =========================================================== */
/* ==================================================  I2C SR BUSY [0..0]  =================================================== */
typedef enum {
  I2C_SR_BUSY_idle                     = 0,     /*!< idle : Idle                                                               */
  I2C_SR_BUSY_busy                     = 1,     /*!< busy : Busy                                                               */
} I2C_SR_BUSY_Type;

/* =================================================  I2C SR FROZEN [1..1]  ================================================== */
typedef enum {
  I2C_SR_FROZEN_notFrozen              = 0,     /*!< notFrozen : Not Frozen                                                    */
  I2C_SR_FROZEN_frozen                 = 1,     /*!< frozen : Frozen                                                           */
} I2C_SR_FROZEN_Type;

/* =================================================  I2C SR RXEMPTY [4..4]  ================================================= */
typedef enum {
  I2C_SR_RXEMPTY_notEmpty              = 0,     /*!< notEmpty : Not Empty                                                      */
  I2C_SR_RXEMPTY_empty                 = 1,     /*!< empty : Empty                                                             */
} I2C_SR_RXEMPTY_Type;

/* =================================================  I2C SR RXFULL [5..5]  ================================================== */
typedef enum {
  I2C_SR_RXFULL_notFull                = 0,     /*!< notFull : Not Full                                                        */
  I2C_SR_RXFULL_full                   = 1,     /*!< full : Full                                                               */
} I2C_SR_RXFULL_Type;

/* =================================================  I2C SR TXEMPTY [6..6]  ================================================= */
typedef enum {
  I2C_SR_TXEMPTY_notEmpty              = 0,     /*!< notEmpty : Not Empty                                                      */
  I2C_SR_TXEMPTY_empty                 = 1,     /*!< empty : Empty                                                             */
} I2C_SR_TXEMPTY_Type;

/* =================================================  I2C SR TXFULL [7..7]  ================================================== */
typedef enum {
  I2C_SR_TXFULL_notFull                = 0,     /*!< notFull : Not Full                                                        */
  I2C_SR_TXFULL_full                   = 1,     /*!< full : Full                                                               */
} I2C_SR_TXFULL_Type;

/* ==========================================================  IER  ========================================================== */
/* =================================================  I2C IER LOSTIE [0..0]  ================================================= */
typedef enum {
  I2C_IER_LOSTIE_disable               = 0,     /*!< disable : Disable                                                         */
  I2C_IER_LOSTIE_enable                = 1,     /*!< enable : Enable                                                           */
} I2C_IER_LOSTIE_Type;

/* ================================================  I2C IER NOANSIE [1..1]  ================================================= */
typedef enum {
  I2C_IER_NOANSIE_disable              = 0,     /*!< disable : Disable                                                         */
  I2C_IER_NOANSIE_enable               = 1,     /*!< enable : Enable                                                           */
} I2C_IER_NOANSIE_Type;

/* ================================================  I2C IER COMENDIE [2..2]  ================================================ */
typedef enum {
  I2C_IER_COMENDIE_disable             = 0,     /*!< disable : Disable                                                         */
  I2C_IER_COMENDIE_enable              = 1,     /*!< enable : Enable                                                           */
} I2C_IER_COMENDIE_Type;

/* ================================================  I2C IER RDYRDIE [3..3]  ================================================= */
typedef enum {
  I2C_IER_RDYRDIE_disable              = 0,     /*!< disable : Disable                                                         */
  I2C_IER_RDYRDIE_enable               = 1,     /*!< enable : Enable                                                           */
} I2C_IER_RDYRDIE_Type;

/* =================================================  I2C IER FFRXIE [4..4]  ================================================= */
typedef enum {
  I2C_IER_FFRXIE_disable               = 0,     /*!< disable : Disable                                                         */
  I2C_IER_FFRXIE_enable                = 1,     /*!< enable : Enable                                                           */
} I2C_IER_FFRXIE_Type;

/* ================================================  I2C IER FFTXOIE [5..5]  ================================================= */
typedef enum {
  I2C_IER_FFTXOIE_disable              = 0,     /*!< disable : Disable                                                         */
  I2C_IER_FFTXOIE_enable               = 1,     /*!< enable : Enable                                                           */
} I2C_IER_FFTXOIE_Type;

/* ================================================  I2C IER FFTXHIE [6..6]  ================================================= */
typedef enum {
  I2C_IER_FFTXHIE_disable              = 0,     /*!< disable : Disable                                                         */
  I2C_IER_FFTXHIE_enable               = 1,     /*!< enable : Enable                                                           */
} I2C_IER_FFTXHIE_Type;

/* ==========================================================  ISR  ========================================================== */
/* =================================================  I2C ISR LOSTIS [0..0]  ================================================= */
typedef enum {
  I2C_ISR_LOSTIS_inactive              = 0,     /*!< inactive : No interrupt is pending.                                       */
  I2C_ISR_LOSTIS_pending               = 1,     /*!< pending : An interrupt is pending.                                        */
} I2C_ISR_LOSTIS_Type;

/* ================================================  I2C ISR NOANSIS [1..1]  ================================================= */
typedef enum {
  I2C_ISR_NOANSIS_inactive             = 0,     /*!< inactive : No interrupt is pending.                                       */
  I2C_ISR_NOANSIS_pending              = 1,     /*!< pending : An interrupt is pending.                                        */
} I2C_ISR_NOANSIS_Type;

/* ================================================  I2C ISR COMENDIS [2..2]  ================================================ */
typedef enum {
  I2C_ISR_COMENDIS_inactive            = 0,     /*!< inactive : No interrupt is pending.                                       */
  I2C_ISR_COMENDIS_pending             = 1,     /*!< pending : An interrupt is pending.                                        */
} I2C_ISR_COMENDIS_Type;

/* ================================================  I2C ISR RDYRDIS [3..3]  ================================================= */
typedef enum {
  I2C_ISR_RDYRDIS_inactive             = 0,     /*!< inactive : No interrupt is pending.                                       */
  I2C_ISR_RDYRDIS_pending              = 1,     /*!< pending : An interrupt is pending.                                        */
} I2C_ISR_RDYRDIS_Type;

/* =================================================  I2C ISR FFRXIS [4..4]  ================================================= */
typedef enum {
  I2C_ISR_FFRXIS_inactive              = 0,     /*!< inactive : No interrupt is pending.                                       */
  I2C_ISR_FFRXIS_pending               = 1,     /*!< pending : An interrupt is pending.                                        */
} I2C_ISR_FFRXIS_Type;

/* ================================================  I2C ISR FFTXOIS [5..5]  ================================================= */
typedef enum {
  I2C_ISR_FFTXOIS_inactive             = 0,     /*!< inactive : No interrupt is pending.                                       */
  I2C_ISR_FFTXOIS_pending              = 1,     /*!< pending : An interrupt is pending.                                        */
} I2C_ISR_FFTXOIS_Type;

/* ================================================  I2C ISR FFTXHIS [6..6]  ================================================= */
typedef enum {
  I2C_ISR_FFTXHIS_inactive             = 0,     /*!< inactive : No interrupt is pending.                                       */
  I2C_ISR_FFTXHIS_pending              = 1,     /*!< pending : An interrupt is pending.                                        */
} I2C_ISR_FFTXHIS_Type;

/* ==========================================================  BRR  ========================================================== */
/* ==========================================================  RCR  ========================================================== */
/* ==========================================================  TXR  ========================================================== */
/* ==========================================================  DR  =========================================================== */
/* ==========================================================  DMR  ========================================================== */
/* ==================================================  I2C DMR TXEN [4..4]  ================================================== */
typedef enum {
  I2C_DMR_TXEN_disable                 = 0,     /*!< disable : Disable                                                         */
  I2C_DMR_TXEN_enable                  = 1,     /*!< enable : Enable                                                           */
} I2C_DMR_TXEN_Type;

/* ==================================================  I2C DMR RXEN [9..9]  ================================================== */
typedef enum {
  I2C_DMR_RXEN_disable                 = 0,     /*!< disable : Disable                                                         */
  I2C_DMR_RXEN_enable                  = 1,     /*!< enable : Enable                                                           */
} I2C_DMR_RXEN_Type;



/* =========================================================================================================================== */
/* ================                                            MSR                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  DSPADDR  ======================================================== */
/* ================================================  MSR DSPADDR ADDR [0..7]  ================================================ */
typedef enum {
  MSR_DSPADDR_ADDR_t13Scale            = 0,     /*!< t13Scale : Track 1 and 3 scale factor                                     */
  MSR_DSPADDR_ADDR_t2Scale             = 1,     /*!< t2Scale : Track 2 scale factor                                            */
  MSR_DSPADDR_ADDR_t13ZctFast          = 2,     /*!< t13ZctFast : Zero Cross Threshold Fast for Tracks 1 and 3                 */
  MSR_DSPADDR_ADDR_t13ZctMid           = 3,     /*!< t13ZctMid : Zero Cross Threshold Middle for Tracks 1 and 3                */
  MSR_DSPADDR_ADDR_t13ZctSlow          = 4,     /*!< t13ZctSlow : Zero Cross Threshold Slow for Tracks 1 and 3                 */
  MSR_DSPADDR_ADDR_t2ZctFast           = 5,     /*!< t2ZctFast : Zero Cross Threshold Fast for Track 2                         */
  MSR_DSPADDR_ADDR_t2ZctMid            = 6,     /*!< t2ZctMid : Zero Cross Threshold Middle for Track 2                        */
  MSR_DSPADDR_ADDR_t2ZctSlow           = 7,     /*!< t2ZctSlow : Zero Cross Threshold Slow for Track 2                         */
  MSR_DSPADDR_ADDR_startPcnt           = 8,     /*!< startPcnt : Leading 0 Detection Count                                     */
  MSR_DSPADDR_ADDR_t1DataCnt           = 9,     /*!< t1DataCnt : Track 1 Data Count                                            */
  MSR_DSPADDR_ADDR_t2DataCnt           = 10,    /*!< t2DataCnt : Track 2 Data Count                                            */
  MSR_DSPADDR_ADDR_t3DataCnt           = 11,    /*!< t3DataCnt : Track 3 Data Count                                            */
  MSR_DSPADDR_ADDR_adcCfg              = 18,    /*!< adcCfg : ADC Configuration                                                */
} MSR_DSPADDR_ADDR_Type;

/* ========================================================  DSPCTRL  ======================================================== */
/* ===============================================  MSR DSPCTRL DSPEN [0..0]  ================================================ */
typedef enum {
  MSR_DSPCTRL_DSPEN_disable            = 0,     /*!< disable : Disable                                                         */
  MSR_DSPCTRL_DSPEN_enable             = 1,     /*!< enable : Enable                                                           */
} MSR_DSPCTRL_DSPEN_Type;

/* ============================================  MSR DSPCTRL DSP_PKDETECT [1..1]  ============================================ */
typedef enum {
  MSR_DSPCTRL_DSP_PKDETECT_variable    = 0,     /*!< variable : Select Variable Threshold Mode                                 */
  MSR_DSPCTRL_DSP_PKDETECT_fixed       = 1,     /*!< fixed : Select Fixed Threshold Mode                                       */
} MSR_DSPCTRL_DSP_PKDETECT_Type;

/* ============================================  MSR DSPCTRL FIFO_INT_EN [2..2]  ============================================= */
typedef enum {
  MSR_DSPCTRL_FIFO_INT_EN_disable      = 0,     /*!< disable : Disable                                                         */
  MSR_DSPCTRL_FIFO_INT_EN_enable       = 1,     /*!< enable : Enable                                                           */
} MSR_DSPCTRL_FIFO_INT_EN_Type;

/* ==============================================  MSR DSPCTRL DSP_INTF [4..4]  ============================================== */
typedef enum {
  MSR_DSPCTRL_DSP_INTF_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  MSR_DSPCTRL_DSP_INTF_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} MSR_DSPCTRL_DSP_INTF_Type;

/* ==============================================  MSR DSPCTRL T1_INTF [5..5]  =============================================== */
typedef enum {
  MSR_DSPCTRL_T1_INTF_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  MSR_DSPCTRL_T1_INTF_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} MSR_DSPCTRL_T1_INTF_Type;

/* ==============================================  MSR DSPCTRL T2_INTF [6..6]  =============================================== */
typedef enum {
  MSR_DSPCTRL_T2_INTF_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  MSR_DSPCTRL_T2_INTF_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} MSR_DSPCTRL_T2_INTF_Type;

/* ==============================================  MSR DSPCTRL T3_INTF [7..7]  =============================================== */
typedef enum {
  MSR_DSPCTRL_T3_INTF_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  MSR_DSPCTRL_T3_INTF_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} MSR_DSPCTRL_T3_INTF_Type;

/* ========================================================  DSPDATA  ======================================================== */
/* ========================================================  T1FIFO  ========================================================= */
/* ========================================================  T2FIFO  ========================================================= */
/* ========================================================  T3FIFO  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           MLCD                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CN  =========================================================== */
/* ==================================================  MLCD CN TXIE [0..0]  ================================================== */
typedef enum {
  MLCD_CN_TXIE_disable                 = 0,     /*!< disable : Disable                                                         */
  MLCD_CN_TXIE_enable                  = 1,     /*!< enable : Enable                                                           */
} MLCD_CN_TXIE_Type;

/* ==================================================  MLCD CN RXIE [1..1]  ================================================== */
typedef enum {
  MLCD_CN_RXIE_disable                 = 0,     /*!< disable : Disable                                                         */
  MLCD_CN_RXIE_enable                  = 1,     /*!< enable : Enable                                                           */
} MLCD_CN_RXIE_Type;

/* ===================================================  MLCD CN AE [2..2]  =================================================== */
typedef enum {
  MLCD_CN_AE_disable                   = 0,     /*!< disable : Disable                                                         */
  MLCD_CN_AE_enable                    = 1,     /*!< enable : Enable                                                           */
} MLCD_CN_AE_Type;

/* =================================================  MLCD CN NIBBLE [3..3]  ================================================= */
typedef enum {
  MLCD_CN_NIBBLE_width8bit             = 0,     /*!< width8bit : 8 bit bus width                                               */
  MLCD_CN_NIBBLE_width4bit             = 1,     /*!< width4bit : 4 bit bus width (This feature is only available
                                                      when AUTOEN=1)                                                           */
} MLCD_CN_NIBBLE_Type;

/* ===================================================  MLCD CN RS [4..4]  =================================================== */
typedef enum {
  MLCD_CN_RS_lo                        = 0,     /*!< lo : Logic 0 (low)                                                        */
  MLCD_CN_RS_hi                        = 1,     /*!< hi : Logic 1 (high)                                                       */
} MLCD_CN_RS_Type;

/* ===================================================  MLCD CN RW [5..5]  =================================================== */
typedef enum {
  MLCD_CN_RW_lo                        = 0,     /*!< lo : Logic 0 (low)                                                        */
  MLCD_CN_RW_hi                        = 1,     /*!< hi : Logic 1 (high)                                                       */
} MLCD_CN_RW_Type;

/* ==================================================  MLCD CN ENB [6..6]  =================================================== */
typedef enum {
  MLCD_CN_ENB_loOrActiveHi             = 0,     /*!< loOrActiveHi : If automatic mode, LCD_EN is active high, else
                                                      LCD is set low.                                                          */
  MLCD_CN_ENB_hiOrActiveLo             = 1,     /*!< hiOrActiveLo : If automatic mode, LCD_EN is active low, else
                                                      LCD is set high.                                                         */
} MLCD_CN_ENB_Type;

/* ==================================================  MLCD CN READ [7..7]  ================================================== */
typedef enum {
  MLCD_CN_READ_complete                = 0,     /*!< complete : No operation/complete                                          */
  MLCD_CN_READ_start                   = 1,     /*!< start : Start operation                                                   */
} MLCD_CN_READ_Type;

/* ==========================================================  EPR  ========================================================== */
/* ==========================================================  SR  =========================================================== */
/* ==================================================  MLCD SR TXIS [0..0]  ================================================== */
typedef enum {
  MLCD_SR_TXIS_notSent                 = 0,     /*!< notSent : The content of the data register has not yet been
                                                      sent.                                                                    */
  MLCD_SR_TXIS_sent                    = 1,     /*!< sent : The content of the data register has been sent. This
                                                      bit is set by hardware and must be cleared by software
                                                      to be acknowledged.                                                      */
} MLCD_SR_TXIS_Type;

/* ==================================================  MLCD SR RXIS [1..1]  ================================================== */
typedef enum {
  MLCD_SR_RXIS_noDataAvailable         = 0,     /*!< noDataAvailable : No data has been received.                              */
  MLCD_SR_RXIS_dataAvailable           = 1,     /*!< dataAvailable : Data is available in LCD_DATA register. This
                                                      bit is set by hardware and must be cleared by software
                                                      to be acknowledged.                                                      */
} MLCD_SR_RXIS_Type;

/* =================================================  MLCD SR READY [2..2]  ================================================== */
typedef enum {
  MLCD_SR_READY_busy                   = 0,     /*!< busy : Busy                                                               */
  MLCD_SR_READY_ready                  = 1,     /*!< ready : Ready                                                             */
} MLCD_SR_READY_Type;

/* =========================================================  DATA  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  SEC  ========================================================== */
/* =========================================================  SSEC  ========================================================== */
/* ==========================================================  RAS  ========================================================== */
/* =========================================================  RSSA  ========================================================== */
/* ==========================================================  CN  =========================================================== */
/* ==================================================  RTC CN RTCE [0..0]  =================================================== */
typedef enum {
  RTC_CN_RTCE_disable                  = 0,     /*!< disable : Disable                                                         */
  RTC_CN_RTCE_enable                   = 1,     /*!< enable : Enable                                                           */
} RTC_CN_RTCE_Type;

/* ===================================================  RTC CN ADE [1..1]  =================================================== */
typedef enum {
  RTC_CN_ADE_disable                   = 0,     /*!< disable : Disable                                                         */
  RTC_CN_ADE_enable                    = 1,     /*!< enable : Enable                                                           */
} RTC_CN_ADE_Type;

/* ===================================================  RTC CN ASE [2..2]  =================================================== */
typedef enum {
  RTC_CN_ASE_disable                   = 0,     /*!< disable : Disable                                                         */
  RTC_CN_ASE_enable                    = 1,     /*!< enable : Enable                                                           */
} RTC_CN_ASE_Type;

/* ==================================================  RTC CN BUSY [3..3]  =================================================== */
typedef enum {
  RTC_CN_BUSY_idle                     = 0,     /*!< idle : Idle                                                               */
  RTC_CN_BUSY_busy                     = 1,     /*!< busy : Busy                                                               */
} RTC_CN_BUSY_Type;

/* ===================================================  RTC CN RDY [4..4]  =================================================== */
typedef enum {
  RTC_CN_RDY_busy                      = 0,     /*!< busy : Busy                                                               */
  RTC_CN_RDY_ready                     = 1,     /*!< ready : Ready                                                             */
} RTC_CN_RDY_Type;

/* ==================================================  RTC CN RDYE [5..5]  =================================================== */
typedef enum {
  RTC_CN_RDYE_disable                  = 0,     /*!< disable : Disable                                                         */
  RTC_CN_RDYE_enable                   = 1,     /*!< enable : Enable                                                           */
} RTC_CN_RDYE_Type;

/* ==================================================  RTC CN ALDF [6..6]  =================================================== */
typedef enum {
  RTC_CN_ALDF_inactive                 = 0,     /*!< inactive : No interrupt is pending.                                       */
  RTC_CN_ALDF_pending                  = 1,     /*!< pending : An interrupt is pending.                                        */
} RTC_CN_ALDF_Type;

/* ==================================================  RTC CN ALSF [7..7]  =================================================== */
typedef enum {
  RTC_CN_ALSF_inactive                 = 0,     /*!< inactive : No interrupt is pending.                                       */
  RTC_CN_ALSF_pending                  = 1,     /*!< pending : An interrupt is pending.                                        */
} RTC_CN_ALSF_Type;

/* ===================================================  RTC CN SQE [8..8]  =================================================== */
typedef enum {
  RTC_CN_SQE_disable                   = 0,     /*!< disable : Disable                                                         */
  RTC_CN_SQE_enable                    = 1,     /*!< enable : Enable                                                           */
} RTC_CN_SQE_Type;

/* ===================================================  RTC CN FT [9..10]  =================================================== */
typedef enum {
  RTC_CN_FT_freq1Hz                    = 0,     /*!< freq1Hz : 1 Hz (Compensated)                                              */
  RTC_CN_FT_freq512Hz                  = 1,     /*!< freq512Hz : 512 Hz (Compensated)                                          */
} RTC_CN_FT_Type;

/* ================================================  RTC CN X32KMD [11..12]  ================================================= */
typedef enum {
  RTC_CN_X32KMD_noiseImmuneMode        = 0,     /*!< noiseImmuneMode : Always operate in Noise Immune Mode. Oscillator
                                                      warm-up required.                                                        */
  RTC_CN_X32KMD_quietMode              = 1,     /*!< quietMode : Always operate in Quiet Mode. No oscillator warm-up
                                                      required.                                                                */
  RTC_CN_X32KMD_quietInStopWithWarmup  = 2,     /*!< quietInStopWithWarmup : Operate in Noise Immune Mode normally,
                                                      switch to Quiet Mode on Stop Mode entry. Will wait for
                                                      32K oscillator warm-up before code execution on Stop Mode
                                                      exit.                                                                    */
  RTC_CN_X32KMD_quietInStopNoWarmup    = 3,     /*!< quietInStopNoWarmup : Operate in Noise Immune Mode normally,
                                                      switch to Quiet Mode on Stop Mode entry. Will not wait
                                                      for 32K oscillator warm-up before code execution on Stop
                                                      Mode exit.                                                               */
} RTC_CN_X32KMD_Type;

/* ==================================================  RTC CN WE [15..15]  =================================================== */
typedef enum {
  RTC_CN_WE_disable                    = 0,     /*!< disable : Disable                                                         */
  RTC_CN_WE_enable                     = 1,     /*!< enable : Enable                                                           */
} RTC_CN_WE_Type;

/* =========================================================  TRIM  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           SKBD                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR0  ========================================================== */
/* ================================================  SKBD CR0 KBDIO_0 [0..0]  ================================================ */
typedef enum {
  SKBD_CR0_KBDIO_0_input               = 0,     /*!< input : Input                                                             */
  SKBD_CR0_KBDIO_0_output              = 1,     /*!< output : Output                                                           */
} SKBD_CR0_KBDIO_0_Type;

/* ================================================  SKBD CR0 KBDIO_1 [1..1]  ================================================ */
typedef enum {
  SKBD_CR0_KBDIO_1_input               = 0,     /*!< input : Input                                                             */
  SKBD_CR0_KBDIO_1_output              = 1,     /*!< output : Output                                                           */
} SKBD_CR0_KBDIO_1_Type;

/* ================================================  SKBD CR0 KBDIO_2 [2..2]  ================================================ */
typedef enum {
  SKBD_CR0_KBDIO_2_input               = 0,     /*!< input : Input                                                             */
  SKBD_CR0_KBDIO_2_output              = 1,     /*!< output : Output                                                           */
} SKBD_CR0_KBDIO_2_Type;

/* ================================================  SKBD CR0 KBDIO_3 [3..3]  ================================================ */
typedef enum {
  SKBD_CR0_KBDIO_3_input               = 0,     /*!< input : Input                                                             */
  SKBD_CR0_KBDIO_3_output              = 1,     /*!< output : Output                                                           */
} SKBD_CR0_KBDIO_3_Type;

/* ================================================  SKBD CR0 KBDIO_4 [4..4]  ================================================ */
typedef enum {
  SKBD_CR0_KBDIO_4_input               = 0,     /*!< input : Input                                                             */
  SKBD_CR0_KBDIO_4_output              = 1,     /*!< output : Output                                                           */
} SKBD_CR0_KBDIO_4_Type;

/* ================================================  SKBD CR0 KBDIO_5 [5..5]  ================================================ */
typedef enum {
  SKBD_CR0_KBDIO_5_input               = 0,     /*!< input : Input                                                             */
  SKBD_CR0_KBDIO_5_output              = 1,     /*!< output : Output                                                           */
} SKBD_CR0_KBDIO_5_Type;

/* ================================================  SKBD CR0 KBDIO_6 [6..6]  ================================================ */
typedef enum {
  SKBD_CR0_KBDIO_6_input               = 0,     /*!< input : Input                                                             */
  SKBD_CR0_KBDIO_6_output              = 1,     /*!< output : Output                                                           */
} SKBD_CR0_KBDIO_6_Type;

/* ================================================  SKBD CR0 KBDIO_7 [7..7]  ================================================ */
typedef enum {
  SKBD_CR0_KBDIO_7_input               = 0,     /*!< input : Input                                                             */
  SKBD_CR0_KBDIO_7_output              = 1,     /*!< output : Output                                                           */
} SKBD_CR0_KBDIO_7_Type;

/* ==========================================================  CR1  ========================================================== */
/* ================================================  SKBD CR1 AUTOEN [0..0]  ================================================= */
typedef enum {
  SKBD_CR1_AUTOEN_disable              = 0,     /*!< disable : Disable                                                         */
  SKBD_CR1_AUTOEN_enable               = 1,     /*!< enable : Enable                                                           */
} SKBD_CR1_AUTOEN_Type;

/* =================================================  SKBD CR1 CLEAR [1..1]  ================================================= */
typedef enum {
  SKBD_CR1_CLEAR_disable               = 0,     /*!< disable : Disable                                                         */
  SKBD_CR1_CLEAR_enable                = 1,     /*!< enable : Enable                                                           */
} SKBD_CR1_CLEAR_Type;

/* ================================================  SKBD CR1 DBTM [13..15]  ================================================= */
typedef enum {
  SKBD_CR1_DBTM_time4ms                = 0,     /*!< time4ms : 4.1 ms                                                          */
  SKBD_CR1_DBTM_time5ms                = 1,     /*!< time5ms : 5.3 ms                                                          */
  SKBD_CR1_DBTM_time6ms                = 2,     /*!< time6ms : 6.5 ms                                                          */
  SKBD_CR1_DBTM_time7ms                = 3,     /*!< time7ms : 7.6 ms                                                          */
  SKBD_CR1_DBTM_time8ms                = 4,     /*!< time8ms : 8.8 ms                                                          */
  SKBD_CR1_DBTM_time10ms               = 5,     /*!< time10ms : 10.0 ms                                                        */
  SKBD_CR1_DBTM_time11ms               = 6,     /*!< time11ms : 11.2 ms                                                        */
  SKBD_CR1_DBTM_time12ms               = 7,     /*!< time12ms : 12.3 ms                                                        */
} SKBD_CR1_DBTM_Type;

/* ==========================================================  SR  =========================================================== */
/* ==================================================  SKBD SR BUSY [0..0]  ================================================== */
typedef enum {
  SKBD_SR_BUSY_idle                    = 0,     /*!< idle : Idle                                                               */
  SKBD_SR_BUSY_busy                    = 1,     /*!< busy : Busy                                                               */
} SKBD_SR_BUSY_Type;

/* ==========================================================  IER  ========================================================== */
/* ================================================  SKBD IER PUSHIE [0..0]  ================================================= */
typedef enum {
  SKBD_IER_PUSHIE_disable              = 0,     /*!< disable : Disable                                                         */
  SKBD_IER_PUSHIE_enable               = 1,     /*!< enable : Enable                                                           */
} SKBD_IER_PUSHIE_Type;

/* ===============================================  SKBD IER RELEASEIE [1..1]  =============================================== */
typedef enum {
  SKBD_IER_RELEASEIE_disable           = 0,     /*!< disable : Disable                                                         */
  SKBD_IER_RELEASEIE_enable            = 1,     /*!< enable : Enable                                                           */
} SKBD_IER_RELEASEIE_Type;

/* ================================================  SKBD IER OVERIE [2..2]  ================================================= */
typedef enum {
  SKBD_IER_OVERIE_disable              = 0,     /*!< disable : Disable                                                         */
  SKBD_IER_OVERIE_enable               = 1,     /*!< enable : Enable                                                           */
} SKBD_IER_OVERIE_Type;

/* ==========================================================  ISR  ========================================================== */
/* ================================================  SKBD ISR PUSHIS [0..0]  ================================================= */
typedef enum {
  SKBD_ISR_PUSHIS_inactive             = 0,     /*!< inactive : No interrupt is pending.                                       */
  SKBD_ISR_PUSHIS_pending              = 1,     /*!< pending : An interrupt is pending.                                        */
} SKBD_ISR_PUSHIS_Type;

/* ===============================================  SKBD ISR RELEASEIS [1..1]  =============================================== */
typedef enum {
  SKBD_ISR_RELEASEIS_inactive          = 0,     /*!< inactive : No interrupt is pending.                                       */
  SKBD_ISR_RELEASEIS_pending           = 1,     /*!< pending : An interrupt is pending.                                        */
} SKBD_ISR_RELEASEIS_Type;

/* ================================================  SKBD ISR OVERIS [2..2]  ================================================= */
typedef enum {
  SKBD_ISR_OVERIS_inactive             = 0,     /*!< inactive : No interrupt is pending.                                       */
  SKBD_ISR_OVERIS_pending              = 1,     /*!< pending : An interrupt is pending.                                        */
} SKBD_ISR_OVERIS_Type;

/* ==========================================================  K0R  ========================================================== */
/* ================================================  SKBD K0R PUSH [10..10]  ================================================= */
typedef enum {
  SKBD_KR_K0R_PUSH_pushed              = 0,     /*!< pushed : Pushed                                                           */
  SKBD_KR_K0R_PUSH_released            = 1,     /*!< released : Released                                                       */
} SKBD_KR_K0R_PUSH_Type;

/* ================================================  SKBD K0R READ [11..11]  ================================================= */
typedef enum {
  SKBD_KR_K0R_READ_notRead             = 0,     /*!< notRead : This register has not been read since its last change.          */
  SKBD_KR_K0R_READ_read                = 1,     /*!< read : This register has been read.                                       */
} SKBD_KR_K0R_READ_Type;

/* ================================================  SKBD K0R NEXT [12..12]  ================================================= */
typedef enum {
  SKBD_KR_K0R_NEXT_none                = 0,     /*!< none : No more key register contain a key event.                          */
  SKBD_KR_K0R_NEXT_more                = 1,     /*!< more : Other key registers contain a key event.                           */
} SKBD_KR_K0R_NEXT_Type;

/* ==========================================================  K1R  ========================================================== */
/* ================================================  SKBD K1R PUSH [10..10]  ================================================= */
typedef enum {
  SKBD_KR_K1R_PUSH_pushed              = 0,     /*!< pushed : Pushed                                                           */
  SKBD_KR_K1R_PUSH_released            = 1,     /*!< released : Released                                                       */
} SKBD_KR_K1R_PUSH_Type;

/* ================================================  SKBD K1R READ [11..11]  ================================================= */
typedef enum {
  SKBD_KR_K1R_READ_notRead             = 0,     /*!< notRead : This register has not been read since its last change.          */
  SKBD_KR_K1R_READ_read                = 1,     /*!< read : This register has been read.                                       */
} SKBD_KR_K1R_READ_Type;

/* ================================================  SKBD K1R NEXT [12..12]  ================================================= */
typedef enum {
  SKBD_KR_K1R_NEXT_none                = 0,     /*!< none : No more key register contain a key event.                          */
  SKBD_KR_K1R_NEXT_more                = 1,     /*!< more : Other key registers contain a key event.                           */
} SKBD_KR_K1R_NEXT_Type;

/* ==========================================================  K2R  ========================================================== */
/* ================================================  SKBD K2R PUSH [10..10]  ================================================= */
typedef enum {
  SKBD_KR_K2R_PUSH_pushed              = 0,     /*!< pushed : Pushed                                                           */
  SKBD_KR_K2R_PUSH_released            = 1,     /*!< released : Released                                                       */
} SKBD_KR_K2R_PUSH_Type;

/* ================================================  SKBD K2R READ [11..11]  ================================================= */
typedef enum {
  SKBD_KR_K2R_READ_notRead             = 0,     /*!< notRead : This register has not been read since its last change.          */
  SKBD_KR_K2R_READ_read                = 1,     /*!< read : This register has been read.                                       */
} SKBD_KR_K2R_READ_Type;

/* ================================================  SKBD K2R NEXT [12..12]  ================================================= */
typedef enum {
  SKBD_KR_K2R_NEXT_none                = 0,     /*!< none : No more key register contain a key event.                          */
  SKBD_KR_K2R_NEXT_more                = 1,     /*!< more : Other key registers contain a key event.                           */
} SKBD_KR_K2R_NEXT_Type;

/* ==========================================================  K3R  ========================================================== */
/* ================================================  SKBD K3R PUSH [10..10]  ================================================= */
typedef enum {
  SKBD_KR_K3R_PUSH_pushed              = 0,     /*!< pushed : Pushed                                                           */
  SKBD_KR_K3R_PUSH_released            = 1,     /*!< released : Released                                                       */
} SKBD_KR_K3R_PUSH_Type;

/* ================================================  SKBD K3R READ [11..11]  ================================================= */
typedef enum {
  SKBD_KR_K3R_READ_notRead             = 0,     /*!< notRead : This register has not been read since its last change.          */
  SKBD_KR_K3R_READ_read                = 1,     /*!< read : This register has been read.                                       */
} SKBD_KR_K3R_READ_Type;

/* ================================================  SKBD K3R NEXT [12..12]  ================================================= */
typedef enum {
  SKBD_KR_K3R_NEXT_none                = 0,     /*!< none : No more key register contain a key event.                          */
  SKBD_KR_K3R_NEXT_more                = 1,     /*!< more : Other key registers contain a key event.                           */
} SKBD_KR_K3R_NEXT_Type;



/* =========================================================================================================================== */
/* ================                                           SMON                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  EXTSCN  ========================================================= */
/* ==============================================  SMON EXTSCN EXTS_EN0 [0..0]  ============================================== */
typedef enum {
  SMON_EXTSCN_EXTS_EN0_disable         = 0,     /*!< disable : Disable                                                         */
  SMON_EXTSCN_EXTS_EN0_enable          = 1,     /*!< enable : Enable                                                           */
} SMON_EXTSCN_EXTS_EN0_Type;

/* ==============================================  SMON EXTSCN EXTS_EN1 [1..1]  ============================================== */
typedef enum {
  SMON_EXTSCN_EXTS_EN1_disable         = 0,     /*!< disable : Disable                                                         */
  SMON_EXTSCN_EXTS_EN1_enable          = 1,     /*!< enable : Enable                                                           */
} SMON_EXTSCN_EXTS_EN1_Type;

/* ==============================================  SMON EXTSCN EXTS_EN2 [2..2]  ============================================== */
typedef enum {
  SMON_EXTSCN_EXTS_EN2_disable         = 0,     /*!< disable : Disable                                                         */
  SMON_EXTSCN_EXTS_EN2_enable          = 1,     /*!< enable : Enable                                                           */
} SMON_EXTSCN_EXTS_EN2_Type;

/* ==============================================  SMON EXTSCN EXTS_EN3 [3..3]  ============================================== */
typedef enum {
  SMON_EXTSCN_EXTS_EN3_disable         = 0,     /*!< disable : Disable                                                         */
  SMON_EXTSCN_EXTS_EN3_enable          = 1,     /*!< enable : Enable                                                           */
} SMON_EXTSCN_EXTS_EN3_Type;

/* ==============================================  SMON EXTSCN EXTS_EN4 [4..4]  ============================================== */
typedef enum {
  SMON_EXTSCN_EXTS_EN4_disable         = 0,     /*!< disable : Disable                                                         */
  SMON_EXTSCN_EXTS_EN4_enable          = 1,     /*!< enable : Enable                                                           */
} SMON_EXTSCN_EXTS_EN4_Type;

/* ==============================================  SMON EXTSCN EXTS_EN5 [5..5]  ============================================== */
typedef enum {
  SMON_EXTSCN_EXTS_EN5_disable         = 0,     /*!< disable : Disable                                                         */
  SMON_EXTSCN_EXTS_EN5_enable          = 1,     /*!< enable : Enable                                                           */
} SMON_EXTSCN_EXTS_EN5_Type;

/* ==============================================  SMON EXTSCN EXTFRQ [21..23]  ============================================== */
typedef enum {
  SMON_EXTSCN_EXTFRQ_freq2000Hz        = 0,     /*!< freq2000Hz : Div 4 (2000Hz)                                               */
  SMON_EXTSCN_EXTFRQ_freq1000Hz        = 1,     /*!< freq1000Hz : Div 8 (1000Hz)                                               */
  SMON_EXTSCN_EXTFRQ_freq500Hz         = 2,     /*!< freq500Hz : Div 16 (500Hz)                                                */
  SMON_EXTSCN_EXTFRQ_freq250Hz         = 3,     /*!< freq250Hz : Div 32 (250Hz)                                                */
  SMON_EXTSCN_EXTFRQ_freq125Hz         = 4,     /*!< freq125Hz : Div 64 (125Hz)                                                */
  SMON_EXTSCN_EXTFRQ_freq63Hz          = 5,     /*!< freq63Hz : Div 128 (63Hz)                                                 */
  SMON_EXTSCN_EXTFRQ_freq31Hz          = 6,     /*!< freq31Hz : Div 256 (31Hz)                                                 */
  SMON_EXTSCN_EXTFRQ_RFU               = 7,     /*!< RFU : Reserved. Do not use.                                               */
} SMON_EXTSCN_EXTFRQ_Type;

/* ==============================================  SMON EXTSCN DIVCLK [24..26]  ============================================== */
typedef enum {
  SMON_EXTSCN_DIVCLK_div1              = 0,     /*!< div1 : Divide by 1 (8000 Hz)                                              */
  SMON_EXTSCN_DIVCLK_div2              = 1,     /*!< div2 : Divide by 2 (4000 Hz)                                              */
  SMON_EXTSCN_DIVCLK_div4              = 2,     /*!< div4 : Divide by 4 (2000 Hz)                                              */
  SMON_EXTSCN_DIVCLK_div8              = 3,     /*!< div8 : Divide by 8 (1000 Hz)                                              */
  SMON_EXTSCN_DIVCLK_div16             = 4,     /*!< div16 : Divide by 16 (500 Hz)                                             */
  SMON_EXTSCN_DIVCLK_div32             = 5,     /*!< div32 : Divide by 32 (250 Hz)                                             */
  SMON_EXTSCN_DIVCLK_div64             = 6,     /*!< div64 : Divide by 64 (125 Hz)                                             */
} SMON_EXTSCN_DIVCLK_Type;

/* ===============================================  SMON EXTSCN BUSY [30..30]  =============================================== */
typedef enum {
  SMON_EXTSCN_BUSY_idle                = 0,     /*!< idle : Idle                                                               */
  SMON_EXTSCN_BUSY_busy                = 1,     /*!< busy : Update in Progress                                                 */
} SMON_EXTSCN_BUSY_Type;

/* ===============================================  SMON EXTSCN LOCK [31..31]  =============================================== */
typedef enum {
  SMON_EXTSCN_LOCK_unlocked            = 0,     /*!< unlocked : Unlocked                                                       */
  SMON_EXTSCN_LOCK_locked              = 1,     /*!< locked : Locked                                                           */
} SMON_EXTSCN_LOCK_Type;

/* ========================================================  INTSCN  ========================================================= */
/* =============================================  SMON INTSCN SHIELD_EN [0..0]  ============================================== */
typedef enum {
  SMON_INTSCN_SHIELD_EN_disable        = 0,     /*!< disable : Disable                                                         */
  SMON_INTSCN_SHIELD_EN_enable         = 1,     /*!< enable : Enable                                                           */
} SMON_INTSCN_SHIELD_EN_Type;

/* ==============================================  SMON INTSCN TEMP_EN [1..1]  =============================================== */
typedef enum {
  SMON_INTSCN_TEMP_EN_disable          = 0,     /*!< disable : Disable                                                         */
  SMON_INTSCN_TEMP_EN_enable           = 1,     /*!< enable : Enable                                                           */
} SMON_INTSCN_TEMP_EN_Type;

/* ==============================================  SMON INTSCN VBAT_EN [2..2]  =============================================== */
typedef enum {
  SMON_INTSCN_VBAT_EN_disable          = 0,     /*!< disable : Disable                                                         */
  SMON_INTSCN_VBAT_EN_enable           = 1,     /*!< enable : Enable                                                           */
} SMON_INTSCN_VBAT_EN_Type;

/* ============================================  SMON INTSCN LOTEMP_SEL [16..16]  ============================================ */
typedef enum {
  SMON_INTSCN_LOTEMP_SEL_neg50C        = 0,     /*!< neg50C : -50 degrees C                                                    */
  SMON_INTSCN_LOTEMP_SEL_neg30C        = 1,     /*!< neg30C : -30 degrees C                                                    */
} SMON_INTSCN_LOTEMP_SEL_Type;

/* ============================================  SMON INTSCN VCORELOEN [18..18]  ============================================= */
typedef enum {
  SMON_INTSCN_VCORELOEN_disable        = 0,     /*!< disable : Disable                                                         */
  SMON_INTSCN_VCORELOEN_enable         = 1,     /*!< enable : Enable                                                           */
} SMON_INTSCN_VCORELOEN_Type;

/* ============================================  SMON INTSCN VCOREHIEN [19..19]  ============================================= */
typedef enum {
  SMON_INTSCN_VCOREHIEN_disable        = 0,     /*!< disable : Disable                                                         */
  SMON_INTSCN_VCOREHIEN_enable         = 1,     /*!< enable : Enable                                                           */
} SMON_INTSCN_VCOREHIEN_Type;

/* =============================================  SMON INTSCN VDDLOEN [20..20]  ============================================== */
typedef enum {
  SMON_INTSCN_VDDLOEN_disable          = 0,     /*!< disable : Disable                                                         */
  SMON_INTSCN_VDDLOEN_enable           = 1,     /*!< enable : Enable                                                           */
} SMON_INTSCN_VDDLOEN_Type;

/* =============================================  SMON INTSCN VDDHIEN [21..21]  ============================================== */
typedef enum {
  SMON_INTSCN_VDDHIEN_disable          = 0,     /*!< disable : Disable                                                         */
  SMON_INTSCN_VDDHIEN_enable           = 1,     /*!< enable : Enable                                                           */
} SMON_INTSCN_VDDHIEN_Type;

/* ==============================================  SMON INTSCN VGLEN [22..22]  =============================================== */
typedef enum {
  SMON_INTSCN_VGLEN_disable            = 0,     /*!< disable : Disable                                                         */
  SMON_INTSCN_VGLEN_enable             = 1,     /*!< enable : Enable                                                           */
} SMON_INTSCN_VGLEN_Type;

/* ===============================================  SMON INTSCN LOCK [31..31]  =============================================== */
typedef enum {
  SMON_INTSCN_LOCK_unlocked            = 0,     /*!< unlocked : Unlocked                                                       */
  SMON_INTSCN_LOCK_locked              = 1,     /*!< locked : Locked                                                           */
} SMON_INTSCN_LOCK_Type;

/* ========================================================  SECALM  ========================================================= */
/* ================================================  SMON SECALM DRS [0..0]  ================================================= */
typedef enum {
  SMON_SECALM_DRS_complete             = 0,     /*!< complete : No operation/complete                                          */
  SMON_SECALM_DRS_start                = 1,     /*!< start : Start operation                                                   */
} SMON_SECALM_DRS_Type;

/* ==============================================  SMON SECALM KEYWIPE [1..1]  =============================================== */
typedef enum {
  SMON_SECALM_KEYWIPE_complete         = 0,     /*!< complete : No operation/complete                                          */
  SMON_SECALM_KEYWIPE_start            = 1,     /*!< start : Start operation                                                   */
} SMON_SECALM_KEYWIPE_Type;

/* ==============================================  SMON SECALM SHIELDF [2..2]  =============================================== */
typedef enum {
  SMON_SECALM_SHIELDF_noEvent          = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_SHIELDF_occurred         = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_SHIELDF_Type;

/* ===============================================  SMON SECALM LOTEMP [3..3]  =============================================== */
typedef enum {
  SMON_SECALM_LOTEMP_noEvent           = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_LOTEMP_occurred          = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_LOTEMP_Type;

/* ===============================================  SMON SECALM HITEMP [4..4]  =============================================== */
typedef enum {
  SMON_SECALM_HITEMP_noEvent           = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_HITEMP_occurred          = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_HITEMP_Type;

/* ===============================================  SMON SECALM BATLO [5..5]  ================================================ */
typedef enum {
  SMON_SECALM_BATLO_noEvent            = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_BATLO_occurred           = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_BATLO_Type;

/* ===============================================  SMON SECALM BATHI [6..6]  ================================================ */
typedef enum {
  SMON_SECALM_BATHI_noEvent            = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_BATHI_occurred           = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_BATHI_Type;

/* ================================================  SMON SECALM EXTF [7..7]  ================================================ */
typedef enum {
  SMON_SECALM_EXTF_noEvent             = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_EXTF_occurred            = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_EXTF_Type;

/* ===============================================  SMON SECALM VDDLO [8..8]  ================================================ */
typedef enum {
  SMON_SECALM_VDDLO_noEvent            = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_VDDLO_occurred           = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_VDDLO_Type;

/* ==============================================  SMON SECALM VCORELO [9..9]  =============================================== */
typedef enum {
  SMON_SECALM_VCORELO_noEvent          = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_VCORELO_occurred         = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_VCORELO_Type;

/* =============================================  SMON SECALM VCOREHI [10..10]  ============================================== */
typedef enum {
  SMON_SECALM_VCOREHI_noEvent          = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_VCOREHI_occurred         = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_VCOREHI_Type;

/* ==============================================  SMON SECALM VDDHI [11..11]  =============================================== */
typedef enum {
  SMON_SECALM_VDDHI_noEvent            = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_VDDHI_occurred           = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_VDDHI_Type;

/* ===============================================  SMON SECALM VGL [12..12]  ================================================ */
typedef enum {
  SMON_SECALM_VGL_noEvent              = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_VGL_occurred             = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_VGL_Type;

/* =============================================  SMON SECALM EXTSTAT0 [16..16]  ============================================= */
typedef enum {
  SMON_SECALM_EXTSTAT0_noEvent         = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_EXTSTAT0_occurred        = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_EXTSTAT0_Type;

/* =============================================  SMON SECALM EXTSTAT1 [17..17]  ============================================= */
typedef enum {
  SMON_SECALM_EXTSTAT1_noEvent         = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_EXTSTAT1_occurred        = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_EXTSTAT1_Type;

/* =============================================  SMON SECALM EXTSTAT2 [18..18]  ============================================= */
typedef enum {
  SMON_SECALM_EXTSTAT2_noEvent         = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_EXTSTAT2_occurred        = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_EXTSTAT2_Type;

/* =============================================  SMON SECALM EXTSTAT3 [19..19]  ============================================= */
typedef enum {
  SMON_SECALM_EXTSTAT3_noEvent         = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_EXTSTAT3_occurred        = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_EXTSTAT3_Type;

/* =============================================  SMON SECALM EXTSTAT4 [20..20]  ============================================= */
typedef enum {
  SMON_SECALM_EXTSTAT4_noEvent         = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_EXTSTAT4_occurred        = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_EXTSTAT4_Type;

/* =============================================  SMON SECALM EXTSTAT5 [21..21]  ============================================= */
typedef enum {
  SMON_SECALM_EXTSTAT5_noEvent         = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_EXTSTAT5_occurred        = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_EXTSTAT5_Type;

/* ============================================  SMON SECALM EXTSWARN0 [24..24]  ============================================= */
typedef enum {
  SMON_SECALM_EXTSWARN0_noEvent        = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_EXTSWARN0_occurred       = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_EXTSWARN0_Type;

/* ============================================  SMON SECALM EXTSWARN1 [25..25]  ============================================= */
typedef enum {
  SMON_SECALM_EXTSWARN1_noEvent        = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_EXTSWARN1_occurred       = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_EXTSWARN1_Type;

/* ============================================  SMON SECALM EXTSWARN2 [26..26]  ============================================= */
typedef enum {
  SMON_SECALM_EXTSWARN2_noEvent        = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_EXTSWARN2_occurred       = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_EXTSWARN2_Type;

/* ============================================  SMON SECALM EXTSWARN3 [27..27]  ============================================= */
typedef enum {
  SMON_SECALM_EXTSWARN3_noEvent        = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_EXTSWARN3_occurred       = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_EXTSWARN3_Type;

/* ============================================  SMON SECALM EXTSWARN4 [28..28]  ============================================= */
typedef enum {
  SMON_SECALM_EXTSWARN4_noEvent        = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_EXTSWARN4_occurred       = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_EXTSWARN4_Type;

/* ============================================  SMON SECALM EXTSWARN5 [29..29]  ============================================= */
typedef enum {
  SMON_SECALM_EXTSWARN5_noEvent        = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECALM_EXTSWARN5_occurred       = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECALM_EXTSWARN5_Type;

/* ========================================================  SECDIAG  ======================================================== */
/* ===============================================  SMON SECDIAG BORF [0..0]  ================================================ */
typedef enum {
  SMON_SECDIAG_BORF_noEvent            = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECDIAG_BORF_occurred           = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECDIAG_BORF_Type;

/* ==============================================  SMON SECDIAG SHIELDF [2..2]  ============================================== */
typedef enum {
  SMON_SECDIAG_SHIELDF_noEvent         = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECDIAG_SHIELDF_occurred        = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECDIAG_SHIELDF_Type;

/* ==============================================  SMON SECDIAG LOTEMP [3..3]  =============================================== */
typedef enum {
  SMON_SECDIAG_LOTEMP_noEvent          = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECDIAG_LOTEMP_occurred         = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECDIAG_LOTEMP_Type;

/* ==============================================  SMON SECDIAG HITEMP [4..4]  =============================================== */
typedef enum {
  SMON_SECDIAG_HITEMP_noEvent          = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECDIAG_HITEMP_occurred         = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECDIAG_HITEMP_Type;

/* ===============================================  SMON SECDIAG BATLO [5..5]  =============================================== */
typedef enum {
  SMON_SECDIAG_BATLO_noEvent           = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECDIAG_BATLO_occurred          = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECDIAG_BATLO_Type;

/* ===============================================  SMON SECDIAG BATHI [6..6]  =============================================== */
typedef enum {
  SMON_SECDIAG_BATHI_noEvent           = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECDIAG_BATHI_occurred          = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECDIAG_BATHI_Type;

/* ===============================================  SMON SECDIAG DYNF [7..7]  ================================================ */
typedef enum {
  SMON_SECDIAG_DYNF_noEvent            = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECDIAG_DYNF_occurred           = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECDIAG_DYNF_Type;

/* ===============================================  SMON SECDIAG AESKT [8..8]  =============================================== */
typedef enum {
  SMON_SECDIAG_AESKT_incomplete        = 0,     /*!< incomplete : Key has not been transferred.                                */
  SMON_SECDIAG_AESKT_complete          = 1,     /*!< complete : Key has been transferred.                                      */
} SMON_SECDIAG_AESKT_Type;

/* ============================================  SMON SECDIAG EXTSTAT0 [16..16]  ============================================= */
typedef enum {
  SMON_SECDIAG_EXTSTAT0_noEvent        = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECDIAG_EXTSTAT0_occurred       = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECDIAG_EXTSTAT0_Type;

/* ============================================  SMON SECDIAG EXTSTAT1 [17..17]  ============================================= */
typedef enum {
  SMON_SECDIAG_EXTSTAT1_noEvent        = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECDIAG_EXTSTAT1_occurred       = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECDIAG_EXTSTAT1_Type;

/* ============================================  SMON SECDIAG EXTSTAT2 [18..18]  ============================================= */
typedef enum {
  SMON_SECDIAG_EXTSTAT2_noEvent        = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECDIAG_EXTSTAT2_occurred       = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECDIAG_EXTSTAT2_Type;

/* ============================================  SMON SECDIAG EXTSTAT3 [19..19]  ============================================= */
typedef enum {
  SMON_SECDIAG_EXTSTAT3_noEvent        = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECDIAG_EXTSTAT3_occurred       = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECDIAG_EXTSTAT3_Type;

/* ============================================  SMON SECDIAG EXTSTAT4 [20..20]  ============================================= */
typedef enum {
  SMON_SECDIAG_EXTSTAT4_noEvent        = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECDIAG_EXTSTAT4_occurred       = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECDIAG_EXTSTAT4_Type;

/* ============================================  SMON SECDIAG EXTSTAT5 [21..21]  ============================================= */
typedef enum {
  SMON_SECDIAG_EXTSTAT5_noEvent        = 0,     /*!< noEvent : The event has not occurred                                      */
  SMON_SECDIAG_EXTSTAT5_occurred       = 1,     /*!< occurred : The event has occurred                                         */
} SMON_SECDIAG_EXTSTAT5_Type;

/* =========================================================  DLRTC  ========================================================= */
/* =========================================================  SECST  ========================================================= */
/* ===============================================  SMON SECST EXTSRS [0..0]  ================================================ */
typedef enum {
  SMON_SECST_EXTSRS_allowed            = 0,     /*!< allowed : Access authorized                                               */
  SMON_SECST_EXTSRS_notAllowed         = 1,     /*!< notAllowed : Access not authorized                                        */
} SMON_SECST_EXTSRS_Type;

/* ===============================================  SMON SECST INTSRS [1..1]  ================================================ */
typedef enum {
  SMON_SECST_INTSRS_allowed            = 0,     /*!< allowed : Access authorized                                               */
  SMON_SECST_INTSRS_notAllowed         = 1,     /*!< notAllowed : Access not authorized                                        */
} SMON_SECST_INTSRS_Type;

/* ===============================================  SMON SECST SECALRS [2..2]  =============================================== */
typedef enum {
  SMON_SECST_SECALRS_allowed           = 0,     /*!< allowed : Access authorized                                               */
  SMON_SECST_SECALRS_notAllowed        = 1,     /*!< notAllowed : Access not authorized                                        */
} SMON_SECST_SECALRS_Type;



/* =========================================================================================================================== */
/* ================                                           SPIn                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  DATA  ========================================================== */
/* =========================================================  CNTL  ========================================================== */
/* ================================================  SPIn CNTL SPIEN [0..0]  ================================================= */
typedef enum {
  SPIn_CNTL_SPIEN_disable              = 0,     /*!< disable : Disable                                                         */
  SPIn_CNTL_SPIEN_enable               = 1,     /*!< enable : Enable                                                           */
} SPIn_CNTL_SPIEN_Type;

/* =================================================  SPIn CNTL MMEN [1..1]  ================================================= */
typedef enum {
  SPIn_CNTL_MMEN_slave                 = 0,     /*!< slave : Slave                                                             */
  SPIn_CNTL_MMEN_master                = 1,     /*!< master : Master                                                           */
} SPIn_CNTL_MMEN_Type;

/* =================================================  SPIn CNTL WOR [2..2]  ================================================== */
typedef enum {
  SPIn_CNTL_WOR_disable                = 0,     /*!< disable : Disable                                                         */
  SPIn_CNTL_WOR_enable                 = 1,     /*!< enable : Enable                                                           */
} SPIn_CNTL_WOR_Type;

/* ================================================  SPIn CNTL CLKPOL [3..3]  ================================================ */
typedef enum {
  SPIn_CNTL_CLKPOL_idleLo              = 0,     /*!< idleLo : SCLK idles Low (0) after character transmission/reception.       */
  SPIn_CNTL_CLKPOL_idleHi              = 1,     /*!< idleHi : SCLK idles High (1) after character transmission/reception.      */
} SPIn_CNTL_CLKPOL_Type;

/* ================================================  SPIn CNTL PHASE [4..4]  ================================================= */
typedef enum {
  SPIn_CNTL_PHASE_activeEdge           = 0,     /*!< activeEdge : Transmit on active edge of SCLK                              */
  SPIn_CNTL_PHASE_inactiveEdge         = 1,     /*!< inactiveEdge : Transmit on inactive edge of SCLK                          */
} SPIn_CNTL_PHASE_Type;

/* =================================================  SPIn CNTL BIRQ [5..5]  ================================================= */
typedef enum {
  SPIn_CNTL_BIRQ_disable               = 0,     /*!< disable : Disable                                                         */
  SPIn_CNTL_BIRQ_enable                = 1,     /*!< enable : Enable                                                           */
} SPIn_CNTL_BIRQ_Type;

/* =================================================  SPIn CNTL STR [6..6]  ================================================== */
typedef enum {
  SPIn_CNTL_STR_complete               = 0,     /*!< complete : No operation/complete                                          */
  SPIn_CNTL_STR_start                  = 1,     /*!< start : Start operation                                                   */
} SPIn_CNTL_STR_Type;

/* =================================================  SPIn CNTL IRQE [7..7]  ================================================= */
typedef enum {
  SPIn_CNTL_IRQE_disable               = 0,     /*!< disable : Disable                                                         */
  SPIn_CNTL_IRQE_enable                = 1,     /*!< enable : Enable                                                           */
} SPIn_CNTL_IRQE_Type;

/* ========================================================  STATUS  ========================================================= */
/* ================================================  SPIn STATUS SLAS [0..0]  ================================================ */
typedef enum {
  SPIn_STATUS_SLAS_selected            = 0,     /*!< selected : Selected                                                       */
  SPIn_STATUS_SLAS_notSelected         = 1,     /*!< notSelected : Not Selected                                                */
} SPIn_STATUS_SLAS_Type;

/* ================================================  SPIn STATUS TXST [1..1]  ================================================ */
typedef enum {
  SPIn_STATUS_TXST_idle                = 0,     /*!< idle : Idle                                                               */
  SPIn_STATUS_TXST_busy                = 1,     /*!< busy : Busy                                                               */
} SPIn_STATUS_TXST_Type;

/* ================================================  SPIn STATUS TUND [2..2]  ================================================ */
typedef enum {
  SPIn_STATUS_TUND_noEvent             = 0,     /*!< noEvent : The event has not occurred                                      */
  SPIn_STATUS_TUND_occurred            = 1,     /*!< occurred : The event has occurred.                                        */
} SPIn_STATUS_TUND_Type;

/* ================================================  SPIn STATUS ROVR [3..3]  ================================================ */
typedef enum {
  SPIn_STATUS_ROVR_noEvent             = 0,     /*!< noEvent : The event has not occurred                                      */
  SPIn_STATUS_ROVR_occurred            = 1,     /*!< occurred : The event has occurred.                                        */
} SPIn_STATUS_ROVR_Type;

/* ================================================  SPIn STATUS ABT [4..4]  ================================================= */
typedef enum {
  SPIn_STATUS_ABT_noEvent              = 0,     /*!< noEvent : The event has not occurred                                      */
  SPIn_STATUS_ABT_occurred             = 1,     /*!< occurred : The event has occurred.                                        */
} SPIn_STATUS_ABT_Type;

/* ================================================  SPIn STATUS COL [5..5]  ================================================= */
typedef enum {
  SPIn_STATUS_COL_noEvent              = 0,     /*!< noEvent : The event has not occurred                                      */
  SPIn_STATUS_COL_occurred             = 1,     /*!< occurred : The event has occurred.                                        */
} SPIn_STATUS_COL_Type;

/* ================================================  SPIn STATUS TOVR [6..6]  ================================================ */
typedef enum {
  SPIn_STATUS_TOVR_noEvent             = 0,     /*!< noEvent : The event has not occurred                                      */
  SPIn_STATUS_TOVR_occurred            = 1,     /*!< occurred : The event has occurred.                                        */
} SPIn_STATUS_TOVR_Type;

/* ================================================  SPIn STATUS IRQ [7..7]  ================================================= */
typedef enum {
  SPIn_STATUS_IRQ_inactive             = 0,     /*!< inactive : No interrupt is pending.                                       */
  SPIn_STATUS_IRQ_pending              = 1,     /*!< pending : An interrupt is pending.                                        */
} SPIn_STATUS_IRQ_Type;

/* ==========================================================  MOD  ========================================================== */
/* ==================================================  SPIn MOD SSV [0..0]  ================================================== */
typedef enum {
  SPIn_MOD_SSV_lo                      = 0,     /*!< lo : The SSEL pin will be driven low.                                     */
  SPIn_MOD_SSV_hi                      = 1,     /*!< hi : The SSEL pin will be driven high.                                    */
} SPIn_MOD_SSV_Type;

/* =================================================  SPIn MOD SSIO [1..1]  ================================================== */
typedef enum {
  SPIn_MOD_SSIO_input                  = 0,     /*!< input : The SSEL pin will is configured as an input.                      */
  SPIn_MOD_SSIO_output                 = 1,     /*!< output : The SSEL pin will is configured as an input.                     */
} SPIn_MOD_SSIO_Type;

/* ================================================  SPIn MOD NUMBITS [2..5]  ================================================ */
typedef enum {
  SPIn_MOD_NUMBITS_bits16              = 0,     /*!< bits16 : 16 bits by character                                             */
  SPIn_MOD_NUMBITS_bits1               = 1,     /*!< bits1 : 1 bit by character                                                */
  SPIn_MOD_NUMBITS_bits2               = 2,     /*!< bits2 : 2 bits by character                                               */
  SPIn_MOD_NUMBITS_bits3               = 3,     /*!< bits3 : 3 bits by character                                               */
  SPIn_MOD_NUMBITS_bits4               = 4,     /*!< bits4 : 4 bits by character                                               */
  SPIn_MOD_NUMBITS_bits5               = 5,     /*!< bits5 : 5 bits by character                                               */
  SPIn_MOD_NUMBITS_bits6               = 6,     /*!< bits6 : 6 bits by character                                               */
  SPIn_MOD_NUMBITS_bits7               = 7,     /*!< bits7 : 7 bits by character                                               */
  SPIn_MOD_NUMBITS_bits8               = 8,     /*!< bits8 : 8 bits by character                                               */
  SPIn_MOD_NUMBITS_bits9               = 9,     /*!< bits9 : 9 bits by character                                               */
  SPIn_MOD_NUMBITS_bits10              = 10,    /*!< bits10 : 10 bits by character                                             */
  SPIn_MOD_NUMBITS_bits11              = 11,    /*!< bits11 : 11 bits by character                                             */
  SPIn_MOD_NUMBITS_bits12              = 12,    /*!< bits12 : 12 bits by character                                             */
  SPIn_MOD_NUMBITS_bits13              = 13,    /*!< bits13 : 13 bits by character                                             */
  SPIn_MOD_NUMBITS_bits14              = 14,    /*!< bits14 : 14 bits by character                                             */
  SPIn_MOD_NUMBITS_bits15              = 15,    /*!< bits15 : 15 bits by character                                             */
} SPIn_MOD_NUMBITS_Type;

/* =================================================  SPIn MOD TX_LJ [7..7]  ================================================= */
typedef enum {
  SPIn_MOD_TX_LJ_disable               = 0,     /*!< disable : Disabled                                                        */
  SPIn_MOD_TX_LJ_enable                = 1,     /*!< enable : Enabled                                                          */
} SPIn_MOD_TX_LJ_Type;

/* =================================================  SPIn MOD SSL1 [8..8]  ================================================== */
typedef enum {
  SPIn_MOD_SSL1_hi                     = 0,     /*!< hi : High                                                                 */
  SPIn_MOD_SSL1_lo                     = 1,     /*!< lo : Low                                                                  */
} SPIn_MOD_SSL1_Type;

/* =================================================  SPIn MOD SSL2 [9..9]  ================================================== */
typedef enum {
  SPIn_MOD_SSL2_hi                     = 0,     /*!< hi : High                                                                 */
  SPIn_MOD_SSL2_lo                     = 1,     /*!< lo : Low                                                                  */
} SPIn_MOD_SSL2_Type;

/* ================================================  SPIn MOD SSL3 [10..10]  ================================================= */
typedef enum {
  SPIn_MOD_SSL3_hi                     = 0,     /*!< hi : High                                                                 */
  SPIn_MOD_SSL3_lo                     = 1,     /*!< lo : Low                                                                  */
} SPIn_MOD_SSL3_Type;

/* ==========================================================  BRG  ========================================================== */
/* ========================================================  DMA_REG  ======================================================== */
/* ===========================================  SPIn DMA_REG TX_FIFO_LEVEL [0..2]  =========================================== */
typedef enum {
  SPIn_DMA_REG_FIFO_LEVEL_entry1    = 0,     /*!< entry1 : Request DMA when FIFO has 1 free Entry                           */
  SPIn_DMA_REG_FIFO_LEVEL_entries2  = 1,     /*!< entries2 : Request DMA when FIFO has 2 free Entries                       */
  SPIn_DMA_REG_FIFO_LEVEL_entries3  = 2,     /*!< entries3 : Request DMA when FIFO has 3 free Entries                       */
  SPIn_DMA_REG_FIFO_LEVEL_entries4  = 3,     /*!< entries4 : Request DMA when FIFO has 4 free Entries                       */
  SPIn_DMA_REG_FIFO_LEVEL_entries5  = 4,     /*!< entries5 : Request DMA when FIFO has 5 free Entries                       */
  SPIn_DMA_REG_FIFO_LEVEL_entries6  = 5,     /*!< entries6 : Request DMA when FIFO has 6 free Entries                       */
  SPIn_DMA_REG_FIFO_LEVEL_entries7  = 6,     /*!< entries7 : Request DMA when FIFO has 7 free Entries                       */
  SPIn_DMA_REG_FIFO_LEVEL_entries8  = 7,     /*!< entries8 : Request DMA when FIFO has 8 free Entries                       */
} SPIn_DMA_REG_FIFO_LEVEL_Type;

/* ===========================================  SPIn DMA_REG TX_FIFO_CLEAR [4..4]  =========================================== */
typedef enum {
  SPIn_DMA_REG_FIFO_CLEAR_complete  = 0,     /*!< complete : No operation                                                   */
  SPIn_DMA_REG_FIFO_CLEAR_start     = 1,     /*!< start : Start operation                                                   */
} SPIn_DMA_REG_FIFO_CLEAR_Type;

/* ===========================================  SPIn DMA_REG TX_FIFO_CNT [8..11]  ============================================ */
typedef enum {
  SPIn_DMA_REG_FIFO_CNT_empty       = 0,     /*!< empty : Empty                                                             */
  SPIn_DMA_REG_FIFO_CNT_1entry      = 1,     /*!< 1entry : 1 Entry                                                          */
  SPIn_DMA_REG_FIFO_CNT_2entries    = 2,     /*!< 2entries : 2 Entries                                                      */
  SPIn_DMA_REG_FIFO_CNT_3entries    = 3,     /*!< 3entries : 3 Entries                                                      */
  SPIn_DMA_REG_FIFO_CNT_4entries    = 4,     /*!< 4entries : 4 Entries                                                      */
  SPIn_DMA_REG_FIFO_CNT_5entries    = 5,     /*!< 5entries : 5 Entries                                                      */
  SPIn_DMA_REG_FIFO_CNT_6entries    = 6,     /*!< 6entries : 6 Entries                                                      */
  SPIn_DMA_REG_FIFO_CNT_7entries    = 7,     /*!< 7entries : 7 Entries                                                      */
  SPIn_DMA_REG_FIFO_CNT_8entries    = 8,     /*!< 8entries : 8 Entries                                                      */
  SPIn_DMA_REG_FIFO_CNT_9entries    = 9,     /*!< 9entries : 9 Entries                                                      */
  SPIn_DMA_REG_FIFO_CNT_10entries   = 10,    /*!< 10entries : 10 Entries                                                    */
  SPIn_DMA_REG_FIFO_CNT_11entries   = 11,    /*!< 11entries : 11 Entries                                                    */
  SPIn_DMA_REG_FIFO_CNT_12entries   = 12,    /*!< 12entries : 12 Entries                                                    */
  SPIn_DMA_REG_FIFO_CNT_13entries   = 13,    /*!< 13entries : 13 Entries                                                    */
  SPIn_DMA_REG_FIFO_CNT_14entries   = 14,    /*!< 14entries : 14 Entries                                                    */
  SPIn_DMA_REG_FIFO_CNT_15entries   = 15,    /*!< 15entries : 15 Entries                                                    */
} SPIn_DMA_REG_FIFO_CNT_Type;

/* ============================================  SPIn DMA_REG TX_DMA_EN [15..15]  ============================================ */
typedef enum {
  SPIn_DMA_REG_DMA_EN_disable       = 0,     /*!< disable : Disable DMA Request                                             */
  SPIn_DMA_REG_DMA_EN_enable        = 1,     /*!< enable : Enable DMA Request                                               */
} SPIn_DMA_REG_DMA_EN_Type;

/* ==========================================  SPIn DMA_REG RX_FIFO_LEVEL [16..18]  ========================================== */
/* ==========================================  SPIn DMA_REG RX_FIFO_CLEAR [20..20]  ========================================== */
/* ===========================================  SPIn DMA_REG RX_FIFO_CNT [24..27]  =========================================== */
/* ============================================  SPIn DMA_REG RX_DMA_EN [31..31]  ============================================ */
/* =======================================================  I2S_CNTL  ======================================================== */
/* ==============================================  SPIn I2S_CNTL I2S_EN [0..0]  ============================================== */
typedef enum {
  SPIn_I2S_CNTL_I2S_EN_disable         = 0,     /*!< disable : Disable                                                         */
  SPIn_I2S_CNTL_I2S_EN_enable          = 1,     /*!< enable : Enable                                                           */
} SPIn_I2S_CNTL_I2S_EN_Type;

/* =============================================  SPIn I2S_CNTL I2S_MUTE [1..1]  ============================================= */
typedef enum {
  SPIn_I2S_CNTL_I2S_MUTE_disable       = 0,     /*!< disable : Disable                                                         */
  SPIn_I2S_CNTL_I2S_MUTE_enable        = 1,     /*!< enable : Enable                                                           */
} SPIn_I2S_CNTL_I2S_MUTE_Type;

/* ============================================  SPIn I2S_CNTL I2S_PAUSE [2..2]  ============================================= */
typedef enum {
  SPIn_I2S_CNTL_I2S_PAUSE_disable      = 0,     /*!< disable : Disable                                                         */
  SPIn_I2S_CNTL_I2S_PAUSE_enable       = 1,     /*!< enable : Enable                                                           */
} SPIn_I2S_CNTL_I2S_PAUSE_Type;

/* =============================================  SPIn I2S_CNTL I2S_MONO [3..3]  ============================================= */
typedef enum {
  SPIn_I2S_CNTL_I2S_MONO_disable       = 0,     /*!< disable : Disable                                                         */
  SPIn_I2S_CNTL_I2S_MONO_enable        = 1,     /*!< enable : Enable                                                           */
} SPIn_I2S_CNTL_I2S_MONO_Type;

/* ==============================================  SPIn I2S_CNTL I2S_LJ [4..4]  ============================================== */
typedef enum {
  SPIn_I2S_CNTL_I2S_LJ_disable         = 0,     /*!< disable : Disable                                                         */
  SPIn_I2S_CNTL_I2S_LJ_enable          = 1,     /*!< enable : Enable                                                           */
} SPIn_I2S_CNTL_I2S_LJ_Type;



/* =========================================================================================================================== */
/* ================                                            SC                                             ================ */
/* =========================================================================================================================== */

/* =========================================================  SC_CR  ========================================================= */
/* =================================================  SC SC_CR CONV [0..0]  ================================================== */
typedef enum {
  SC_CR_CONV_direct                    = 0,     /*!< direct : Direct                                                           */
  SC_CR_CONV_indirect                  = 1,     /*!< indirect : Indirect                                                       */
} SC_CR_CONV_Type;

/* =================================================  SC SC_CR CREP [1..1]  ================================================== */
typedef enum {
  SC_CR_CREP_disable                   = 0,     /*!< disable : Disable                                                         */
  SC_CR_CREP_enable                    = 1,     /*!< enable : Enable                                                           */
} SC_CR_CREP_Type;

/* =================================================  SC SC_CR WTEN [2..2]  ================================================== */
typedef enum {
  SC_CR_WTEN_disable                   = 0,     /*!< disable : Disable                                                         */
  SC_CR_WTEN_enable                    = 1,     /*!< enable : Enable                                                           */
} SC_CR_WTEN_Type;

/* =================================================  SC SC_CR UART [3..3]  ================================================== */
typedef enum {
  SC_CR_UART_manual                    = 0,     /*!< manual : Manual                                                           */
  SC_CR_UART_auto                      = 1,     /*!< auto : Auto                                                               */
} SC_CR_UART_Type;

/* =================================================  SC SC_CR CCEN [4..4]  ================================================== */
typedef enum {
  SC_CR_CCEN_disable                   = 0,     /*!< disable : Disable                                                         */
  SC_CR_CCEN_enable                    = 1,     /*!< enable : Enable                                                           */
} SC_CR_CCEN_Type;

/* ================================================  SC SC_CR RXFLUSH [5..5]  ================================================ */
typedef enum {
  SC_CR_RXFLUSH_complete               = 0,     /*!< complete : No operation/complete                                          */
  SC_CR_RXFLUSH_start                  = 1,     /*!< start : Start operation                                                   */
} SC_CR_RXFLUSH_Type;

/* ================================================  SC SC_CR TXFLUSH [6..6]  ================================================ */
typedef enum {
  SC_CR_TXFLUSH_complete               = 0,     /*!< complete : No operation/complete                                          */
  SC_CR_TXFLUSH_start                  = 1,     /*!< start : Start operation                                                   */
} SC_CR_TXFLUSH_Type;

/* ================================================  SC SC_CR START [16..16]  ================================================ */
typedef enum {
  SC_CR_START_deactivation             = 0,     /*!< deactivation : Deactivation performed.                                    */
  SC_CR_START_activation               = 1,     /*!< activation : Activation performed.                                        */
} SC_CR_START_Type;

/* =============================================  SC SC_CR BYPASS_PHY [17..17]  ============================================== */
typedef enum {
  SC_CR_BYPASS_PHY_disable             = 0,     /*!< disable : Disable                                                         */
  SC_CR_BYPASS_PHY_enable              = 1,     /*!< enable : Enable                                                           */
} SC_CR_BYPASS_PHY_Type;

/* ================================================  SC SC_CR PRPOL [18..18]  ================================================ */
typedef enum {
  SC_CR_PRPOL_activeHi                 = 0,     /*!< activeHi : Logic 1 presence detect                                        */
  SC_CR_PRPOL_activeLo                 = 1,     /*!< activeLo : Logic 0 presence detect                                        */
} SC_CR_PRPOL_Type;

/* ===============================================  SC SC_CR DEBNCE [19..19]  ================================================ */
typedef enum {
  SC_CR_DEBNCE_disable                 = 0,     /*!< disable : Disable                                                         */
  SC_CR_DEBNCE_enable                  = 1,     /*!< enable : Enable                                                           */
} SC_CR_DEBNCE_Type;

/* =============================================  SC SC_CR BYPASS_SEQ [20..20]  ============================================== */
typedef enum {
  SC_CR_BYPASS_SEQ_disable             = 0,     /*!< disable : Disable                                                         */
  SC_CR_BYPASS_SEQ_enable              = 1,     /*!< enable : Enable                                                           */
} SC_CR_BYPASS_SEQ_Type;

/* =========================================================  SC_SR  ========================================================= */
/* ==================================================  SC SC_SR PAR [0..0]  ================================================== */
typedef enum {
  SC_SR_PAR_noEvent                    = 0,     /*!< noEvent : The event has not occurred                                      */
  SC_SR_PAR_occurred                   = 1,     /*!< occurred : The event has occurred                                         */
} SC_SR_PAR_Type;

/* =================================================  SC SC_SR WTOV [1..1]  ================================================== */
typedef enum {
  SC_SR_WTOV_noEvent                   = 0,     /*!< noEvent : The event has not occurred                                      */
  SC_SR_WTOV_occurred                  = 1,     /*!< occurred : The event has occurred                                         */
} SC_SR_WTOV_Type;

/* =================================================  SC SC_SR CCOV [2..2]  ================================================== */
typedef enum {
  SC_SR_CCOV_noEvent                   = 0,     /*!< noEvent : The event has not occurred                                      */
  SC_SR_CCOV_occurred                  = 1,     /*!< occurred : The event has occurred                                         */
} SC_SR_CCOV_Type;

/* =================================================  SC SC_SR TXCF [3..3]  ================================================== */
typedef enum {
  SC_SR_TXCF_noEvent                   = 0,     /*!< noEvent : The event has not occurred                                      */
  SC_SR_TXCF_occurred                  = 1,     /*!< occurred : The event has occurred                                         */
} SC_SR_TXCF_Type;

/* ================================================  SC SC_SR RXEMPTY [4..4]  ================================================ */
typedef enum {
  SC_SR_RXEMPTY_notEmpty               = 0,     /*!< notEmpty : Not Empty                                                      */
  SC_SR_RXEMPTY_empty                  = 1,     /*!< empty : Empty                                                             */
} SC_SR_RXEMPTY_Type;

/* ================================================  SC SC_SR RXFULL [5..5]  ================================================= */
typedef enum {
  SC_SR_RXFULL_notFull                 = 0,     /*!< notFull : Not Full                                                        */
  SC_SR_RXFULL_full                    = 1,     /*!< full : Full                                                               */
} SC_SR_RXFULL_Type;

/* ================================================  SC SC_SR TXEMPTY [6..6]  ================================================ */
typedef enum {
  SC_SR_TXEMPTY_notEmpty               = 0,     /*!< notEmpty : Not Empty                                                      */
  SC_SR_TXEMPTY_empty                  = 1,     /*!< empty : Empty                                                             */
} SC_SR_TXEMPTY_Type;

/* ================================================  SC SC_SR TXFULL [7..7]  ================================================= */
typedef enum {
  SC_SR_TXFULL_notFull                 = 0,     /*!< notFull : Not Full                                                        */
  SC_SR_TXFULL_full                    = 1,     /*!< full : Full                                                               */
} SC_SR_TXFULL_Type;

/* ================================================  SC SC_SR PRES [16..16]  ================================================= */
typedef enum {
  SC_SR_PRES_noEvent                   = 0,     /*!< noEvent : The event has not occurred                                      */
  SC_SR_PRES_occurred                  = 1,     /*!< occurred : The event has occurred                                         */
} SC_SR_PRES_Type;

/* =================================================  SC SC_SR PRC [18..18]  ================================================= */
typedef enum {
  SC_SR_PRC_noEvent                    = 0,     /*!< noEvent : The event has not occurred                                      */
  SC_SR_PRC_occurred                   = 1,     /*!< occurred : The event has occurred                                         */
} SC_SR_PRC_Type;

/* =================================================  SC SC_SR PDL [19..19]  ================================================= */
typedef enum {
  SC_SR_PDL_noEvent                    = 0,     /*!< noEvent : The event has not occurred                                      */
  SC_SR_PDL_occurred                   = 1,     /*!< occurred : The event has occurred                                         */
} SC_SR_PDL_Type;

/* ================================================  SC SC_SR ACTIV [20..20]  ================================================ */
typedef enum {
  SC_SR_ACTIV_busy                     = 0,     /*!< busy : Result not ready                                                   */
  SC_SR_ACTIV_ready                    = 1,     /*!< ready : Operation complete and result ready                               */
} SC_SR_ACTIV_Type;

/* =========================================================  SC_PN  ========================================================= */
/* ================================================  SC SC_PN CRDRST [0..0]  ================================================= */
typedef enum {
  SC_PN_CRDRST_lo                      = 0,     /*!< lo : Logic 0 (low)                                                        */
  SC_PN_CRDRST_hi                      = 1,     /*!< hi : Logic 1 (high)                                                       */
} SC_PN_CRDRST_Type;

/* ================================================  SC SC_PN CRDCLK [1..1]  ================================================= */
typedef enum {
  SC_PN_CRDCLK_lo                      = 0,     /*!< lo : Logic 0 (low)                                                        */
  SC_PN_CRDCLK_hi                      = 1,     /*!< hi : Logic 1 (high)                                                       */
} SC_PN_CRDCLK_Type;

/* =================================================  SC SC_PN CRDIO [2..2]  ================================================= */
typedef enum {
  SC_PN_CRDIO_lo                       = 0,     /*!< lo : Logic 0 (low)                                                        */
  SC_PN_CRDIO_hi                       = 1,     /*!< hi : Logic 1 (high)                                                       */
} SC_PN_CRDIO_Type;

/* =================================================  SC SC_PN CRDC4 [3..3]  ================================================= */
typedef enum {
  SC_PN_CRDC4_lo                       = 0,     /*!< lo : Logic 0 (low)                                                        */
  SC_PN_CRDC4_hi                       = 1,     /*!< hi : Logic 1 (high)                                                       */
} SC_PN_CRDC4_Type;

/* =================================================  SC SC_PN CRDC8 [4..4]  ================================================= */
typedef enum {
  SC_PN_CRDC8_lo                       = 0,     /*!< lo : Logic 0 (low)                                                        */
  SC_PN_CRDC8_hi                       = 1,     /*!< hi : Logic 1 (high)                                                       */
} SC_PN_CRDC8_Type;

/* ================================================  SC SC_PN CLKSEL [5..5]  ================================================= */
typedef enum {
  SC_PN_CLKSEL_manual                  = 0,     /*!< manual : Manual                                                           */
  SC_PN_CLKSEL_auto                    = 1,     /*!< auto : Auto                                                               */
} SC_PN_CLKSEL_Type;

/* ================================================  SC SC_PN VCCSEL [8..9]  ================================================= */
typedef enum {
  SC_PN_VCCSEL_v18                     = 0,     /*!< v18 : 1.8 V                                                               */
  SC_PN_VCCSEL_v30                     = 1,     /*!< v30 : 3.0 V                                                               */
} SC_PN_VCCSEL_Type;

/* ==============================================  SC SC_PN IO_C48_EN [16..16]  ============================================== */
typedef enum {
  SC_PN_IO_C48_EN_disable              = 0,     /*!< disable : Disable                                                         */
  SC_PN_IO_C48_EN_enable               = 1,     /*!< enable : Enable                                                           */
} SC_PN_IO_C48_EN_Type;

/* ===============================================  SC SC_PN CLK_EN [17..17]  ================================================ */
typedef enum {
  SC_PN_CLK_EN_disable                 = 0,     /*!< disable : Disable                                                         */
  SC_PN_CLK_EN_enable                  = 1,     /*!< enable : Enable                                                           */
} SC_PN_CLK_EN_Type;

/* ===============================================  SC SC_PN RST_EN [18..18]  ================================================ */
typedef enum {
  SC_PN_RST_EN_disable                 = 0,     /*!< disable : Disable                                                         */
  SC_PN_RST_EN_enable                  = 1,     /*!< enable : Enable                                                           */
} SC_PN_RST_EN_Type;

/* ===============================================  SC SC_PN VCC_EN [19..19]  ================================================ */
typedef enum {
  SC_PN_VCC_EN_disable                 = 0,     /*!< disable : Disable                                                         */
  SC_PN_VCC_EN_enable                  = 1,     /*!< enable : Enable                                                           */
} SC_PN_VCC_EN_Type;

/* ===============================================  SC SC_PN RAMP_EN [20..20]  =============================================== */
typedef enum {
  SC_PN_RAMP_EN_disable                = 0,     /*!< disable : Disable                                                         */
  SC_PN_RAMP_EN_enable                 = 1,     /*!< enable : Enable                                                           */
} SC_PN_RAMP_EN_Type;

/* ========================================================  SC_ETUR  ======================================================== */
/* ===============================================  SC SC_ETUR COMP [15..15]  ================================================ */
typedef enum {
  SC_ETUR_COMP_disable                 = 0,     /*!< disable : Disable                                                         */
  SC_ETUR_COMP_enable                  = 1,     /*!< enable : Enable                                                           */
} SC_ETUR_COMP_Type;

/* ===============================================  SC SC_ETUR HALF [16..16]  ================================================ */
typedef enum {
  SC_ETUR_HALF_disable                 = 0,     /*!< disable : Disable                                                         */
  SC_ETUR_HALF_enable                  = 1,     /*!< enable : Enable                                                           */
} SC_ETUR_HALF_Type;

/* ========================================================  SC_GTR  ========================================================= */
/* ========================================================  SC_WT0R  ======================================================== */
/* ========================================================  SC_WT1R  ======================================================== */
/* ========================================================  SC_IER  ========================================================= */
/* ========================================================  SC_ISR  ========================================================= */
/* ================================================  SC SC_ISR PARIS [0..0]  ================================================= */
typedef enum {
  SC_ISR_PARIS_inactive                = 0,     /*!< inactive : No interrupt is pending.                                       */
  SC_ISR_PARIS_pending                 = 1,     /*!< pending : An interrupt is pending.                                        */
} SC_ISR_PARIS_Type;

/* =================================================  SC SC_ISR WTIS [1..1]  ================================================= */
typedef enum {
  SC_ISR_WTIS_inactive                 = 0,     /*!< inactive : No interrupt is pending.                                       */
  SC_ISR_WTIS_pending                  = 1,     /*!< pending : An interrupt is pending.                                        */
} SC_ISR_WTIS_Type;

/* =================================================  SC SC_ISR CTIS [2..2]  ================================================= */
typedef enum {
  SC_ISR_CTIS_inactive                 = 0,     /*!< inactive : No interrupt is pending.                                       */
  SC_ISR_CTIS_pending                  = 1,     /*!< pending : An interrupt is pending.                                        */
} SC_ISR_CTIS_Type;

/* =================================================  SC SC_ISR TCIS [3..3]  ================================================= */
typedef enum {
  SC_ISR_TCIS_inactive                 = 0,     /*!< inactive : No interrupt is pending.                                       */
  SC_ISR_TCIS_pending                  = 1,     /*!< pending : An interrupt is pending.                                        */
} SC_ISR_TCIS_Type;

/* ================================================  SC SC_ISR RXEIS [4..4]  ================================================= */
typedef enum {
  SC_ISR_RXEIS_inactive                = 0,     /*!< inactive : No interrupt is pending.                                       */
  SC_ISR_RXEIS_pending                 = 1,     /*!< pending : An interrupt is pending.                                        */
} SC_ISR_RXEIS_Type;

/* ================================================  SC SC_ISR RXTIS [5..5]  ================================================= */
typedef enum {
  SC_ISR_RXTIS_inactive                = 0,     /*!< inactive : No interrupt is pending.                                       */
  SC_ISR_RXTIS_pending                 = 1,     /*!< pending : An interrupt is pending.                                        */
} SC_ISR_RXTIS_Type;

/* ================================================  SC SC_ISR RXFIS [6..6]  ================================================= */
typedef enum {
  SC_ISR_RXFIS_inactive                = 0,     /*!< inactive : No interrupt is pending.                                       */
  SC_ISR_RXFIS_pending                 = 1,     /*!< pending : An interrupt is pending.                                        */
} SC_ISR_RXFIS_Type;

/* ================================================  SC SC_ISR TXEIS [7..7]  ================================================= */
typedef enum {
  SC_ISR_TXEIS_inactive                = 0,     /*!< inactive : No interrupt is pending.                                       */
  SC_ISR_TXEIS_pending                 = 1,     /*!< pending : An interrupt is pending.                                        */
} SC_ISR_TXEIS_Type;

/* ================================================  SC SC_ISR TXTIS [8..8]  ================================================= */
typedef enum {
  SC_ISR_TXTIS_inactive                = 0,     /*!< inactive : No interrupt is pending.                                       */
  SC_ISR_TXTIS_pending                 = 1,     /*!< pending : An interrupt is pending.                                        */
} SC_ISR_TXTIS_Type;

/* ================================================  SC SC_ISR PRCIS [9..9]  ================================================= */
typedef enum {
  SC_ISR_PRCIS_inactive                = 0,     /*!< inactive : No interrupt is pending.                                       */
  SC_ISR_PRCIS_pending                 = 1,     /*!< pending : An interrupt is pending.                                        */
} SC_ISR_PRCIS_Type;

/* ===============================================  SC SC_ISR PDLIS [10..10]  ================================================ */
typedef enum {
  SC_ISR_PDLIS_inactive                = 0,     /*!< inactive : No interrupt is pending.                                       */
  SC_ISR_PDLIS_pending                 = 1,     /*!< pending : An interrupt is pending.                                        */
} SC_ISR_PDLIS_Type;

/* ==============================================  SC SC_ISR ACTIVIS [11..11]  =============================================== */
typedef enum {
  SC_ISR_ACTIVIS_inactive              = 0,     /*!< inactive : No interrupt is pending.                                       */
  SC_ISR_ACTIVIS_pending               = 1,     /*!< pending : An interrupt is pending.                                        */
} SC_ISR_ACTIVIS_Type;

/* ========================================================  SC_TXR  ========================================================= */
/* ========================================================  SC_RXR  ========================================================= */
/* ================================================  SC SC_RXR PARER [8..8]  ================================================= */
typedef enum {
  SC_RXR_PARER_noError                 = 0,     /*!< noError : No Error                                                        */
  SC_RXR_PARER_error                   = 1,     /*!< error : Parity Error                                                      */
} SC_RXR_PARER_Type;

/* ========================================================  SC_CCR  ========================================================= */
/* ================================================  SC SC_CCR MAN [31..31]  ================================================= */
typedef enum {
  SC_CCR_MAN_disable                   = 0,     /*!< disable : Disable                                                         */
  SC_CCR_MAN_enable                    = 1,     /*!< enable : Enable                                                           */
} SC_CCR_MAN_Type;



/* =========================================================================================================================== */
/* ================                                           TMRn                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CNT  ========================================================== */
/* ==========================================================  CMP  ========================================================== */
/* ==========================================================  PWM  ========================================================== */
/* ==========================================================  INT  ========================================================== */
/* ==========================================================  CN  =========================================================== */
/* =================================================  TMRn CN TMODE [0..2]  ================================================== */
typedef enum {
  TMRn_CN_TMODE_oneShot                = 0,     /*!< oneShot : One Shot Mode                                                   */
  TMRn_CN_TMODE_continuous             = 1,     /*!< continuous : Continuous Mode                                              */
  TMRn_CN_TMODE_counter                = 2,     /*!< counter : Counter Mode                                                    */
  TMRn_CN_TMODE_pwm                    = 3,     /*!< pwm : PWM Mode                                                            */
  TMRn_CN_TMODE_capture                = 4,     /*!< capture : Capture Mode                                                    */
  TMRn_CN_TMODE_compare                = 5,     /*!< compare : Compare Mode                                                    */
  TMRn_CN_TMODE_gated                  = 6,     /*!< gated : Gated Mode                                                        */
  TMRn_CN_TMODE_captureCompare         = 7,     /*!< captureCompare : Capture/Compare Mode                                     */
} TMRn_CN_TMODE_Type;

/* ==================================================  TMRn CN PRES [3..5]  ================================================== */
typedef enum {
  TMRn_CN_PRES_div1                    = 0,     /*!< div1 : Divide by 1                                                        */
  TMRn_CN_PRES_div2                    = 1,     /*!< div2 : Divide by 2                                                        */
  TMRn_CN_PRES_div4                    = 2,     /*!< div4 : Divide by 4                                                        */
  TMRn_CN_PRES_div8                    = 3,     /*!< div8 : Divide by 8                                                        */
  TMRn_CN_PRES_div16                   = 4,     /*!< div16 : Divide by 16                                                      */
  TMRn_CN_PRES_div32                   = 5,     /*!< div32 : Divide by 32                                                      */
  TMRn_CN_PRES_div64                   = 6,     /*!< div64 : Divide by 64                                                      */
  TMRn_CN_PRES_div128                  = 7,     /*!< div128 : Divide by 128                                                    */
  TMRn_CN_PRES_div256				   = 8,     /*!< div256 : Divide by 256                                                    */
  TMRn_CN_PRES_div512 				   = 9,     /*!< div512 : Divide by 512                                                    */
  TMRn_CN_PRES_div1024 				   = 10,    /*!< div1024 : Divide by 1024                                                  */
  TMRn_CN_PRES_div2048 				   = 11,    /*!< div2048 : Divide by 2048                                                  */
  TMRn_CN_PRES_div4096 				   = 12,    /*!< div4096 : Divide by 4096                                                  */
} TMRn_CN_PRES_Type;

/* ==================================================  TMRn CN TPOL [6..6]  ================================================== */
typedef enum {
  TMRn_CN_TPOL_activeHi                = 0,     /*!< activeHi : Active High                                                    */
  TMRn_CN_TPOL_activeLo                = 1,     /*!< activeLo : Active Low                                                     */
} TMRn_CN_TPOL_Type;

/* ==================================================  TMRn CN TEN [7..7]  =================================================== */
typedef enum {
  TMRn_CN_TEN_disable                  = 0,     /*!< disable : Disable                                                         */
  TMRn_CN_TEN_enable                   = 1,     /*!< enable : Enable                                                           */
} TMRn_CN_TEN_Type;

/* =================================================  TMRn CN PRES3 [8..8]  ================================================== */
typedef enum {
  TMRn_CN_PRES3_div1                   = 0,     /*!< div1 : Divide by 1                                                        */
  TMRn_CN_PRES3_div256                 = 1,     /*!< div256 : Divide by 256                                                    */
} TMRn_CN_PRES3_Type;

/* ================================================  TMRn CN PWMSYNC [9..9]  ================================================= */
typedef enum {
  TMRn_CN_PWMSYNC_disable              = 0,     /*!< disable : Disable                                                         */
  TMRn_CN_PWMSYNC_enable               = 1,     /*!< enable : Enable                                                           */
} TMRn_CN_PWMSYNC_Type;

/* ===============================================  TMRn CN NOLHPOL [10..10]  ================================================ */
typedef enum {
  TMRn_CN_NOLHPOL_disable              = 0,     /*!< disable : Disable                                                         */
  TMRn_CN_NOLHPOL_enable               = 1,     /*!< enable : Enable                                                           */
} TMRn_CN_NOLHPOL_Type;

/* ===============================================  TMRn CN NOLLPOL [11..11]  ================================================ */
typedef enum {
  TMRn_CN_NOLLPOL_disable              = 0,     /*!< disable : Disable                                                         */
  TMRn_CN_NOLLPOL_enable               = 1,     /*!< enable : Enable                                                           */
} TMRn_CN_NOLLPOL_Type;

/* ========================================================  NOLCMP  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           TRNG                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CN  =========================================================== */
/* =================================================  TRNG CN RNG_IE [2..2]  ================================================= */
typedef enum {
  TRNG_CN_RNG_IE_disable               = 0,     /*!< disable : Disable                                                         */
  TRNG_CN_RNG_IE_enable                = 1,     /*!< enable : Enable                                                           */
} TRNG_CN_RNG_IE_Type;

/* ================================================  TRNG CN RNG_ISC [3..3]  ================================================= */
typedef enum {
  TRNG_CN_RNG_ISC_clear                = 1,     /*!< clear : Clear the Status bit                                              */
} TRNG_CN_RNG_ISC_Type;

/* ================================================  TRNG CN RNG_I4S [4..4]  ================================================= */
typedef enum {
  TRNG_CN_RNG_I4S_busy                 = 0,     /*!< busy : Result not ready                                                   */
  TRNG_CN_RNG_I4S_ready                = 1,     /*!< ready : Operation complete and result ready                               */
} TRNG_CN_RNG_I4S_Type;

/* =================================================  TRNG CN RNG_IS [5..5]  ================================================= */
typedef enum {
  TRNG_CN_RNG_IS_busy                  = 0,     /*!< busy : Result not ready                                                   */
  TRNG_CN_RNG_IS_ready                 = 1,     /*!< ready : Operation complete and result ready                               */
} TRNG_CN_RNG_IS_Type;

/* =================================================  TRNG CN AESKG [6..6]  ================================================== */
typedef enum {
  TRNG_CN_AESKG_complete               = 0,     /*!< complete : No operation/complete                                          */
  TRNG_CN_AESKG_start                  = 1,     /*!< start : Start operation                                                   */
} TRNG_CN_AESKG_Type;

/* =========================================================  DATA  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           UARTn                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
/* ================================================  UARTn CTRL RXTHD [0..3]  ================================================ */
typedef enum {
  UARTn_CTRL_RXTHD_bytes1              = 1,     /*!< bytes1 : Interrupt will be triggered when the number of bytes
                                                      in the RX FIFO reaches 1 byte or higher.                                 */
  UARTn_CTRL_RXTHD_bytes2              = 2,     /*!< bytes2 : Interrupt will be triggered when the number of bytes
                                                      in the RX FIFO reaches 2 bytes or higher.                                */
  UARTn_CTRL_RXTHD_bytes3              = 3,     /*!< bytes3 : Interrupt will be triggered when the number of bytes
                                                      in the RX FIFO reaches 3 bytes or higher.                                */
  UARTn_CTRL_RXTHD_bytes4              = 4,     /*!< bytes4 : Interrupt will be triggered when the number of bytes
                                                      in the RX FIFO reaches 4 bytes or higher.                                */
  UARTn_CTRL_RXTHD_bytes5              = 5,     /*!< bytes5 : Interrupt will be triggered when the number of bytes
                                                      in the RX FIFO reaches 5 bytes or higher.                                */
  UARTn_CTRL_RXTHD_bytes6              = 6,     /*!< bytes6 : Interrupt will be triggered when the number of bytes
                                                      in the RX FIFO reaches 6 bytes or higher.                                */
  UARTn_CTRL_RXTHD_bytes7              = 7,     /*!< bytes7 : Interrupt will be triggered when the number of bytes
                                                      in the RX FIFO reaches 7 bytes or higher.                                */
  UARTn_CTRL_RXTHD_bytes8              = 8,     /*!< bytes8 : Interrupt will be triggered when the number of bytes
                                                      in the RX FIFO reaches 8 bytes or higher.                                */
} UARTn_CTRL_RXTHD_Type;

/* ================================================  UARTn CTRL PAREN [4..4]  ================================================ */
typedef enum {
  UARTn_CTRL_PAREN_disable             = 0,     /*!< disable : Disable                                                         */
  UARTn_CTRL_PAREN_enable              = 1,     /*!< enable : Enable                                                           */
} UARTn_CTRL_PAREN_Type;

/* ================================================  UARTn CTRL PAREO [5..5]  ================================================ */
typedef enum {
  UARTn_CTRL_PAREO_even                = 0,     /*!< even : Even                                                               */
  UARTn_CTRL_PAREO_odd                 = 1,     /*!< odd : Odd                                                                 */
} UARTn_CTRL_PAREO_Type;

/* ================================================  UARTn CTRL PARMD [6..6]  ================================================ */
typedef enum {
  UARTn_CTRL_PARMD_count1s             = 0,     /*!< count1s : Parity calculation is based on number of 1s in frame.           */
  UARTn_CTRL_PARMD_count0s             = 1,     /*!< count0s : Parity calculation is based on number of 0s in frame.           */
} UARTn_CTRL_PARMD_Type;

/* ===============================================  UARTn CTRL TXFLUSH [8..8]  =============================================== */
typedef enum {
  UARTn_CTRL_TXFLUSH_complete          = 0,     /*!< complete : No operation/complete                                          */
  UARTn_CTRL_TXFLUSH_start             = 1,     /*!< start : Start operation                                                   */
} UARTn_CTRL_TXFLUSH_Type;

/* ===============================================  UARTn CTRL RXFLUSH [9..9]  =============================================== */
typedef enum {
  UARTn_CTRL_RXFLUSH_complete          = 0,     /*!< complete : No operation/complete                                          */
  UARTn_CTRL_RXFLUSH_start             = 1,     /*!< start : Start operation                                                   */
} UARTn_CTRL_RXFLUSH_Type;

/* ===============================================  UARTn CTRL SIZE [10..11]  ================================================ */
typedef enum {
  UARTn_CTRL_SIZE_bits5                = 0,     /*!< bits5 : 5 bits                                                            */
  UARTn_CTRL_SIZE_bits6                = 1,     /*!< bits6 : 6 bits                                                            */
  UARTn_CTRL_SIZE_bits7                = 2,     /*!< bits7 : 7 bits                                                            */
  UARTn_CTRL_SIZE_bits8                = 3,     /*!< bits8 : 8 bits                                                            */
} UARTn_CTRL_SIZE_Type;

/* ===============================================  UARTn CTRL STOP [12..12]  ================================================ */
typedef enum {
  UARTn_CTRL_STOP_stop1                = 0,     /*!< stop1 : 1 stop bit                                                        */
  UARTn_CTRL_STOP_stop15               = 1,     /*!< stop15 : 1.5 stop bits (for 5 bit mode) or 2 stop bits (for
                                                      6/7/8 bit mode)                                                          */
} UARTn_CTRL_STOP_Type;

/* ==============================================  UARTn CTRL RTSCTSF [13..13]  ============================================== */
typedef enum {
  UARTn_CTRL_RTSCTSF_disable           = 0,     /*!< disable : Disable                                                         */
  UARTn_CTRL_RTSCTSF_enable            = 1,     /*!< enable : Enable                                                           */
} UARTn_CTRL_RTSCTSF_Type;

/* =========================================================  STAT  ========================================================== */
/* ===============================================  UARTn STAT TXBUSY [0..0]  ================================================ */
typedef enum {
  UARTn_STAT_TXBUSY_idle               = 0,     /*!< idle : Idle                                                               */
  UARTn_STAT_TXBUSY_busy               = 1,     /*!< busy : Busy                                                               */
} UARTn_STAT_TXBUSY_Type;

/* ===============================================  UARTn STAT RXBUSY [1..1]  ================================================ */
typedef enum {
  UARTn_STAT_RXBUSY_idle               = 0,     /*!< idle : Idle                                                               */
  UARTn_STAT_RXBUSY_busy               = 1,     /*!< busy : Busy                                                               */
} UARTn_STAT_RXBUSY_Type;

/* ===============================================  UARTn STAT RXEMPTY [4..4]  =============================================== */
typedef enum {
  UARTn_STAT_RXEMPTY_notEmpty          = 0,     /*!< notEmpty : Not Empty                                                      */
  UARTn_STAT_RXEMPTY_empty             = 1,     /*!< empty : Empty                                                             */
} UARTn_STAT_RXEMPTY_Type;

/* ===============================================  UARTn STAT RXFULL [5..5]  ================================================ */
typedef enum {
  UARTn_STAT_RXFULL_notFull            = 0,     /*!< notFull : Not Full                                                        */
  UARTn_STAT_RXFULL_full               = 1,     /*!< full : Full                                                               */
} UARTn_STAT_RXFULL_Type;

/* ===============================================  UARTn STAT TXEMPTY [6..6]  =============================================== */
typedef enum {
  UARTn_STAT_TXEMPTY_notEmpty          = 0,     /*!< notEmpty : Not Empty                                                      */
  UARTn_STAT_TXEMPTY_empty             = 1,     /*!< empty : Empty                                                             */
} UARTn_STAT_TXEMPTY_Type;

/* ===============================================  UARTn STAT TXFULL [7..7]  ================================================ */
typedef enum {
  UARTn_STAT_TXFULL_notFull            = 0,     /*!< notFull : Not Full                                                        */
  UARTn_STAT_TXFULL_full               = 1,     /*!< full : Full                                                               */
} UARTn_STAT_TXFULL_Type;

/* ========================================================  INT_EN  ========================================================= */
/* ==============================================  UARTn INT_EN FRAMIE [0..0]  =============================================== */
typedef enum {
  UARTn_INT_EN_FRAMIE_disable          = 0,     /*!< disable : Disable                                                         */
  UARTn_INT_EN_FRAMIE_enable           = 1,     /*!< enable : Enable                                                           */
} UARTn_INT_EN_FRAMIE_Type;

/* =============================================  UARTn INT_EN PARITYIE [1..1]  ============================================== */
typedef enum {
  UARTn_INT_EN_PARITYIE_disable        = 0,     /*!< disable : Disable                                                         */
  UARTn_INT_EN_PARITYIE_enable         = 1,     /*!< enable : Enable                                                           */
} UARTn_INT_EN_PARITYIE_Type;

/* =============================================  UARTn INT_EN SIGNALIE [2..2]  ============================================== */
typedef enum {
  UARTn_INT_EN_SIGNALIE_disable        = 0,     /*!< disable : Disable                                                         */
  UARTn_INT_EN_SIGNALIE_enable         = 1,     /*!< enable : Enable                                                           */
} UARTn_INT_EN_SIGNALIE_Type;

/* ==============================================  UARTn INT_EN OVERIE [3..3]  =============================================== */
typedef enum {
  UARTn_INT_EN_OVERIE_disable          = 0,     /*!< disable : Disable                                                         */
  UARTn_INT_EN_OVERIE_enable           = 1,     /*!< enable : Enable                                                           */
} UARTn_INT_EN_OVERIE_Type;

/* ==============================================  UARTn INT_EN FFRXIE [4..4]  =============================================== */
typedef enum {
  UARTn_INT_EN_FFRXIE_disable          = 0,     /*!< disable : Disable                                                         */
  UARTn_INT_EN_FFRXIE_enable           = 1,     /*!< enable : Enable                                                           */
} UARTn_INT_EN_FFRXIE_Type;

/* ==============================================  UARTn INT_EN FFTXOIE [5..5]  ============================================== */
typedef enum {
  UARTn_INT_EN_FFTXOIE_disable         = 0,     /*!< disable : Disable                                                         */
  UARTn_INT_EN_FFTXOIE_enable          = 1,     /*!< enable : Enable                                                           */
} UARTn_INT_EN_FFTXOIE_Type;

/* ==============================================  UARTn INT_EN FFTXHIE [6..6]  ============================================== */
typedef enum {
  UARTn_INT_EN_FFTXHIE_disable         = 0,     /*!< disable : Disable                                                         */
  UARTn_INT_EN_FFTXHIE_enable          = 1,     /*!< enable : Enable                                                           */
} UARTn_INT_EN_FFTXHIE_Type;

/* =======================================================  INT_STAT  ======================================================== */
/* =========================================================  BAUD0  ========================================================= */
/* =========================================================  BAUD1  ========================================================= */
/* ==========================================================  PIN  ========================================================== */
/* =================================================  UARTn PIN CTS [0..0]  ================================================== */
typedef enum {
  UARTn_PIN_CTS_lo                     = 0,     /*!< lo : Logic 0 (low)                                                        */
  UARTn_PIN_CTS_hi                     = 1,     /*!< hi : Logic 1 (high)                                                       */
} UARTn_PIN_CTS_Type;

/* =================================================  UARTn PIN RTS [1..1]  ================================================== */
typedef enum {
  UARTn_PIN_RTS_lo                     = 0,     /*!< lo : Logic 0 (low)                                                        */
  UARTn_PIN_RTS_hi                     = 1,     /*!< hi : Logic 1 (high)                                                       */
} UARTn_PIN_RTS_Type;

/* =========================================================  DATA  ========================================================== */
/* ===============================================  UARTn DATA PARITY [8..8]  ================================================ */
typedef enum {
  UARTn_DATA_PARITY_noError            = 0,     /*!< noError : No Error                                                        */
  UARTn_DATA_PARITY_error              = 1,     /*!< error : Error                                                             */
} UARTn_DATA_PARITY_Type;

/* ========================================================  DMA_REG  ======================================================== */
/* ===============================================  UARTn DMA_REG TXEN [4..4]  =============================================== */
typedef enum {
  UARTn_DMA_REG_TXEN_disable           = 0,     /*!< disable : Disable                                                         */
  UARTn_DMA_REG_TXEN_enable            = 1,     /*!< enable : Enable                                                           */
} UARTn_DMA_REG_TXEN_Type;

/* ===============================================  UARTn DMA_REG RXEN [9..9]  =============================================== */
typedef enum {
  UARTn_DMA_REG_RXEN_disable           = 0,     /*!< disable : Disable                                                         */
  UARTn_DMA_REG_RXEN_enable            = 1,     /*!< enable : Enable                                                           */
} UARTn_DMA_REG_RXEN_Type;



/* =========================================================================================================================== */
/* ================                                            USB                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CN  =========================================================== */
/* =================================================  USB CN USB_EN [0..0]  ================================================== */
typedef enum {
  USB_CN_USB_EN_disable                = 0,     /*!< disable : Disable                                                         */
  USB_CN_USB_EN_enable                 = 1,     /*!< enable : Enable                                                           */
} USB_CN_USB_EN_Type;

/* =======================================================  DEV_ADDR  ======================================================== */
/* ========================================================  DEV_CN  ========================================================= */
/* ===============================================  USB DEV_CN SIGRWU [2..2]  ================================================ */
typedef enum {
  USB_DEV_CN_SIGRWU_disable            = 0,     /*!< disable : Disable                                                         */
  USB_DEV_CN_SIGRWU_enable             = 1,     /*!< enable : Enable                                                           */
} USB_DEV_CN_SIGRWU_Type;

/* ===============================================  USB DEV_CN CONNECT [3..3]  =============================================== */
typedef enum {
  USB_DEV_CN_CONNECT_disconnect        = 0,     /*!< disconnect : Disconnect pull up resistor between DPLUS and VBUS.          */
  USB_DEV_CN_CONNECT_connect           = 1,     /*!< connect : Connect pull up resistor between DPLUS and VBUS.                */
} USB_DEV_CN_CONNECT_Type;

/* ================================================  USB DEV_CN ULPM [4..4]  ================================================= */
typedef enum {
  USB_DEV_CN_ULPM_disable              = 0,     /*!< disable : Disable                                                         */
  USB_DEV_CN_ULPM_enable               = 1,     /*!< enable : Enable                                                           */
} USB_DEV_CN_ULPM_Type;

/* ================================================  USB DEV_CN URST [5..5]  ================================================= */
typedef enum {
  USB_DEV_CN_URST_notReset             = 0,     /*!< notReset : Not Reset                                                      */
  USB_DEV_CN_URST_reset                = 1,     /*!< reset : Reset                                                             */
} USB_DEV_CN_URST_Type;

/* ===============================================  USB DEV_CN VBGATE [6..6]  ================================================ */
typedef enum {
  USB_DEV_CN_VBGATE_alwaysConnect      = 0,     /*!< alwaysConnect : CONNECT operation independent of VBUS status              */
  USB_DEV_CN_VBGATE_connectOnVBUS      = 1,     /*!< connectOnVBUS : CONNECT operation conditional on VBUS present             */
} USB_DEV_CN_VBGATE_Type;

/* ================================================  USB DEV_CN OSCEN [7..7]  ================================================ */
typedef enum {
  USB_DEV_CN_OSCEN_disable             = 0,     /*!< disable : Disable                                                         */
  USB_DEV_CN_OSCEN_enable              = 1,     /*!< enable : Enable                                                           */
} USB_DEV_CN_OSCEN_Type;

/* ===============================================  USB DEV_CN BACT_OE [8..8]  =============================================== */
typedef enum {
  USB_DEV_CN_BACT_OE_disable           = 0,     /*!< disable : Disable                                                         */
  USB_DEV_CN_BACT_OE_enable            = 1,     /*!< enable : Enable                                                           */
} USB_DEV_CN_BACT_OE_Type;

/* ==============================================  USB DEV_CN FIFO_MODE [9..9]  ============================================== */
typedef enum {
  USB_DEV_CN_FIFO_MODE_nakUntilComplete = 0,    /*!< nakUntilComplete : The device controller will return NAK to
                                                      an IN request until the entire packet has been read from
                                                      system memory into its internal FIFO.                                    */
  USB_DEV_CN_FIFO_MODE_responOnDataAvail = 1,   /*!< responOnDataAvail : The device controller will respond to an
                                                      IN request as soon as data becomes available in the FIFO.                */
} USB_DEV_CN_FIFO_MODE_Type;

/* ========================================================  DEV_INT  ======================================================== */
/* ===============================================  USB DEV_INT DPACT [0..0]  ================================================ */
typedef enum {
  USB_DEV_INT_DPACT_inactive           = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DEV_INT_DPACT_pending            = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DEV_INT_DPACT_Type;

/* ===============================================  USB DEV_INT RWU_DN [1..1]  =============================================== */
typedef enum {
  USB_DEV_INT_RWU_DN_inactive          = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DEV_INT_RWU_DN_pending           = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DEV_INT_RWU_DN_Type;

/* ================================================  USB DEV_INT BACT [2..2]  ================================================ */
typedef enum {
  USB_DEV_INT_BACT_inactive            = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DEV_INT_BACT_pending             = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DEV_INT_BACT_Type;

/* ================================================  USB DEV_INT BRST [3..3]  ================================================ */
typedef enum {
  USB_DEV_INT_BRST_inactive            = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DEV_INT_BRST_pending             = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DEV_INT_BRST_Type;

/* ================================================  USB DEV_INT SUSP [4..4]  ================================================ */
typedef enum {
  USB_DEV_INT_SUSP_inactive            = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DEV_INT_SUSP_pending             = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DEV_INT_SUSP_Type;

/* ==============================================  USB DEV_INT NO_VBUS [5..5]  =============================================== */
typedef enum {
  USB_DEV_INT_NO_VBUS_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DEV_INT_NO_VBUS_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DEV_INT_NO_VBUS_Type;

/* ================================================  USB DEV_INT VBUS [6..6]  ================================================ */
typedef enum {
  USB_DEV_INT_VBUS_inactive            = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DEV_INT_VBUS_pending             = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DEV_INT_VBUS_Type;

/* ==============================================  USB DEV_INT BRST_DN [7..7]  =============================================== */
typedef enum {
  USB_DEV_INT_BRST_DN_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DEV_INT_BRST_DN_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DEV_INT_BRST_DN_Type;

/* ===============================================  USB DEV_INT SETUP [8..8]  ================================================ */
typedef enum {
  USB_DEV_INT_SETUP_inactive           = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DEV_INT_SETUP_pending            = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DEV_INT_SETUP_Type;

/* ===============================================  USB DEV_INT EP_IN [9..9]  ================================================ */
typedef enum {
  USB_DEV_INT_EP_IN_inactive           = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DEV_INT_EP_IN_pending            = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DEV_INT_EP_IN_Type;

/* ==============================================  USB DEV_INT EP_OUT [10..10]  ============================================== */
typedef enum {
  USB_DEV_INT_EP_OUT_inactive          = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DEV_INT_EP_OUT_pending           = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DEV_INT_EP_OUT_Type;

/* ==============================================  USB DEV_INT EP_NAK [11..11]  ============================================== */
typedef enum {
  USB_DEV_INT_EP_NAK_inactive          = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DEV_INT_EP_NAK_pending           = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DEV_INT_EP_NAK_Type;

/* =============================================  USB DEV_INT DMA_ERR [12..12]  ============================================== */
typedef enum {
  USB_DEV_INT_DMA_ERR_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DEV_INT_DMA_ERR_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DEV_INT_DMA_ERR_Type;

/* =============================================  USB DEV_INT BUF_OVR [13..13]  ============================================== */
typedef enum {
  USB_DEV_INT_BUF_OVR_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DEV_INT_BUF_OVR_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DEV_INT_BUF_OVR_Type;

/* =============================================  USB DEV_INT VBUS_ST [16..16]  ============================================== */
typedef enum {
  USB_DEV_INT_VBUS_ST_lo               = 0,     /*!< lo : Logic 0 (low)                                                        */
  USB_DEV_INT_VBUS_ST_hi               = 1,     /*!< hi : Logic 1 (high)                                                       */
} USB_DEV_INT_VBUS_ST_Type;

/* ======================================================  DEV_INT_EN  ======================================================= */
/* ==============================================  USB DEV_INT_EN DPACT [0..0]  ============================================== */
typedef enum {
  USB_DEV_INT_EN_DPACT_disable         = 0,     /*!< disable : Disable                                                         */
  USB_DEV_INT_EN_DPACT_enable          = 1,     /*!< enable : Enable                                                           */
} USB_DEV_INT_EN_DPACT_Type;

/* =============================================  USB DEV_INT_EN RWU_DN [1..1]  ============================================== */
typedef enum {
  USB_DEV_INT_EN_RWU_DN_disable        = 0,     /*!< disable : Disable                                                         */
  USB_DEV_INT_EN_RWU_DN_enable         = 1,     /*!< enable : Enable                                                           */
} USB_DEV_INT_EN_RWU_DN_Type;

/* ==============================================  USB DEV_INT_EN BACT [2..2]  =============================================== */
typedef enum {
  USB_DEV_INT_EN_BACT_disable          = 0,     /*!< disable : Disable                                                         */
  USB_DEV_INT_EN_BACT_enable           = 1,     /*!< enable : Enable                                                           */
} USB_DEV_INT_EN_BACT_Type;

/* ==============================================  USB DEV_INT_EN BRST [3..3]  =============================================== */
typedef enum {
  USB_DEV_INT_EN_BRST_disable          = 0,     /*!< disable : Disable                                                         */
  USB_DEV_INT_EN_BRST_enable           = 1,     /*!< enable : Enable                                                           */
} USB_DEV_INT_EN_BRST_Type;

/* ==============================================  USB DEV_INT_EN SUSP [4..4]  =============================================== */
typedef enum {
  USB_DEV_INT_EN_SUSP_disable          = 0,     /*!< disable : Disable                                                         */
  USB_DEV_INT_EN_SUSP_enable           = 1,     /*!< enable : Enable                                                           */
} USB_DEV_INT_EN_SUSP_Type;

/* =============================================  USB DEV_INT_EN NO_VBUS [5..5]  ============================================= */
typedef enum {
  USB_DEV_INT_EN_NO_VBUS_disable       = 0,     /*!< disable : Disable                                                         */
  USB_DEV_INT_EN_NO_VBUS_enable        = 1,     /*!< enable : Enable                                                           */
} USB_DEV_INT_EN_NO_VBUS_Type;

/* ==============================================  USB DEV_INT_EN VBUS [6..6]  =============================================== */
typedef enum {
  USB_DEV_INT_EN_VBUS_disable          = 0,     /*!< disable : Disable                                                         */
  USB_DEV_INT_EN_VBUS_enable           = 1,     /*!< enable : Enable                                                           */
} USB_DEV_INT_EN_VBUS_Type;

/* =============================================  USB DEV_INT_EN BRST_DN [7..7]  ============================================= */
typedef enum {
  USB_DEV_INT_EN_BRST_DN_disable       = 0,     /*!< disable : Disable                                                         */
  USB_DEV_INT_EN_BRST_DN_enable        = 1,     /*!< enable : Enable                                                           */
} USB_DEV_INT_EN_BRST_DN_Type;

/* ==============================================  USB DEV_INT_EN SETUP [8..8]  ============================================== */
typedef enum {
  USB_DEV_INT_EN_SETUP_disable         = 0,     /*!< disable : Disable                                                         */
  USB_DEV_INT_EN_SETUP_enable          = 1,     /*!< enable : Enable                                                           */
} USB_DEV_INT_EN_SETUP_Type;

/* ==============================================  USB DEV_INT_EN EP_IN [9..9]  ============================================== */
typedef enum {
  USB_DEV_INT_EN_EP_IN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_DEV_INT_EN_EP_IN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_DEV_INT_EN_EP_IN_Type;

/* ============================================  USB DEV_INT_EN EP_OUT [10..10]  ============================================= */
typedef enum {
  USB_DEV_INT_EN_EP_OUT_disable        = 0,     /*!< disable : Disable                                                         */
  USB_DEV_INT_EN_EP_OUT_enable         = 1,     /*!< enable : Enable                                                           */
} USB_DEV_INT_EN_EP_OUT_Type;

/* ============================================  USB DEV_INT_EN EP_NAK [11..11]  ============================================= */
typedef enum {
  USB_DEV_INT_EN_EP_NAK_disable        = 0,     /*!< disable : Disable                                                         */
  USB_DEV_INT_EN_EP_NAK_enable         = 1,     /*!< enable : Enable                                                           */
} USB_DEV_INT_EN_EP_NAK_Type;

/* ============================================  USB DEV_INT_EN DMA_ERR [12..12]  ============================================ */
typedef enum {
  USB_DEV_INT_EN_DMA_ERR_disable       = 0,     /*!< disable : Disable                                                         */
  USB_DEV_INT_EN_DMA_ERR_enable        = 1,     /*!< enable : Enable                                                           */
} USB_DEV_INT_EN_DMA_ERR_Type;

/* ============================================  USB DEV_INT_EN BUF_OVR [13..13]  ============================================ */
typedef enum {
  USB_DEV_INT_EN_BUF_OVR_disable       = 0,     /*!< disable : Disable                                                         */
  USB_DEV_INT_EN_BUF_OVR_enable        = 1,     /*!< enable : Enable                                                           */
} USB_DEV_INT_EN_BUF_OVR_Type;

/* ========================================================  EP_BASE  ======================================================== */
/* ========================================================  CUR_BUF  ======================================================== */
/* =======================================================  IN_OWNER  ======================================================== */
/* =============================================  USB IN_OWNER BUF0_EP0 [0..0]  ============================================== */
typedef enum {
  USB_IN_OWNER_BUF0_EP0_software       = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP0_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP0_Type;

/* =============================================  USB IN_OWNER BUF0_EP1 [1..1]  ============================================== */
typedef enum {
  USB_IN_OWNER_BUF0_EP1_software       = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP1_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP1_Type;

/* =============================================  USB IN_OWNER BUF0_EP2 [2..2]  ============================================== */
typedef enum {
  USB_IN_OWNER_BUF0_EP2_software       = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP2_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP2_Type;

/* =============================================  USB IN_OWNER BUF0_EP3 [3..3]  ============================================== */
typedef enum {
  USB_IN_OWNER_BUF0_EP3_software       = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP3_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP3_Type;

/* =============================================  USB IN_OWNER BUF0_EP4 [4..4]  ============================================== */
typedef enum {
  USB_IN_OWNER_BUF0_EP4_software       = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP4_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP4_Type;

/* =============================================  USB IN_OWNER BUF0_EP5 [5..5]  ============================================== */
typedef enum {
  USB_IN_OWNER_BUF0_EP5_software       = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP5_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP5_Type;

/* =============================================  USB IN_OWNER BUF0_EP6 [6..6]  ============================================== */
typedef enum {
  USB_IN_OWNER_BUF0_EP6_software       = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP6_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP6_Type;

/* =============================================  USB IN_OWNER BUF0_EP7 [7..7]  ============================================== */
typedef enum {
  USB_IN_OWNER_BUF0_EP7_software       = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP7_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP7_Type;

/* =============================================  USB IN_OWNER BUF0_EP8 [8..8]  ============================================== */
typedef enum {
  USB_IN_OWNER_BUF0_EP8_software       = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP8_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP8_Type;

/* =============================================  USB IN_OWNER BUF0_EP9 [9..9]  ============================================== */
typedef enum {
  USB_IN_OWNER_BUF0_EP9_software       = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP9_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP9_Type;

/* ============================================  USB IN_OWNER BUF0_EP10 [10..10]  ============================================ */
typedef enum {
  USB_IN_OWNER_BUF0_EP10_software      = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP10_usbController = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP10_Type;

/* ============================================  USB IN_OWNER BUF0_EP11 [11..11]  ============================================ */
typedef enum {
  USB_IN_OWNER_BUF0_EP11_software      = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP11_usbController = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP11_Type;

/* ============================================  USB IN_OWNER BUF0_EP12 [12..12]  ============================================ */
typedef enum {
  USB_IN_OWNER_BUF0_EP12_software      = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP12_usbController = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP12_Type;

/* ============================================  USB IN_OWNER BUF0_EP13 [13..13]  ============================================ */
typedef enum {
  USB_IN_OWNER_BUF0_EP13_software      = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP13_usbController = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP13_Type;

/* ============================================  USB IN_OWNER BUF0_EP14 [14..14]  ============================================ */
typedef enum {
  USB_IN_OWNER_BUF0_EP14_software      = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP14_usbController = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP14_Type;

/* ============================================  USB IN_OWNER BUF0_EP15 [15..15]  ============================================ */
typedef enum {
  USB_IN_OWNER_BUF0_EP15_software      = 0,     /*!< software : This endpoint's IN buffer 0 is owned by the software.          */
  USB_IN_OWNER_BUF0_EP15_usbController = 1,     /*!< usbController : This endpoint's IN buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF0_EP15_Type;

/* ============================================  USB IN_OWNER BUF1_EP0 [16..16]  ============================================= */
typedef enum {
  USB_IN_OWNER_BUF1_EP0_software       = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP0_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP0_Type;

/* ============================================  USB IN_OWNER BUF1_EP1 [17..17]  ============================================= */
typedef enum {
  USB_IN_OWNER_BUF1_EP1_software       = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP1_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP1_Type;

/* ============================================  USB IN_OWNER BUF1_EP2 [18..18]  ============================================= */
typedef enum {
  USB_IN_OWNER_BUF1_EP2_software       = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP2_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP2_Type;

/* ============================================  USB IN_OWNER BUF1_EP3 [19..19]  ============================================= */
typedef enum {
  USB_IN_OWNER_BUF1_EP3_software       = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP3_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP3_Type;

/* ============================================  USB IN_OWNER BUF1_EP4 [20..20]  ============================================= */
typedef enum {
  USB_IN_OWNER_BUF1_EP4_software       = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP4_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP4_Type;

/* ============================================  USB IN_OWNER BUF1_EP5 [21..21]  ============================================= */
typedef enum {
  USB_IN_OWNER_BUF1_EP5_software       = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP5_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP5_Type;

/* ============================================  USB IN_OWNER BUF1_EP6 [22..22]  ============================================= */
typedef enum {
  USB_IN_OWNER_BUF1_EP6_software       = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP6_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP6_Type;

/* ============================================  USB IN_OWNER BUF1_EP7 [23..23]  ============================================= */
typedef enum {
  USB_IN_OWNER_BUF1_EP7_software       = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP7_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP7_Type;

/* ============================================  USB IN_OWNER BUF1_EP8 [24..24]  ============================================= */
typedef enum {
  USB_IN_OWNER_BUF1_EP8_software       = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP8_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP8_Type;

/* ============================================  USB IN_OWNER BUF1_EP9 [25..25]  ============================================= */
typedef enum {
  USB_IN_OWNER_BUF1_EP9_software       = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP9_usbController  = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP9_Type;

/* ============================================  USB IN_OWNER BUF1_EP10 [26..26]  ============================================ */
typedef enum {
  USB_IN_OWNER_BUF1_EP10_software      = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP10_usbController = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP10_Type;

/* ============================================  USB IN_OWNER BUF1_EP11 [27..27]  ============================================ */
typedef enum {
  USB_IN_OWNER_BUF1_EP11_software      = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP11_usbController = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP11_Type;

/* ============================================  USB IN_OWNER BUF1_EP12 [28..28]  ============================================ */
typedef enum {
  USB_IN_OWNER_BUF1_EP12_software      = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP12_usbController = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP12_Type;

/* ============================================  USB IN_OWNER BUF1_EP13 [29..29]  ============================================ */
typedef enum {
  USB_IN_OWNER_BUF1_EP13_software      = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP13_usbController = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP13_Type;

/* ============================================  USB IN_OWNER BUF1_EP14 [30..30]  ============================================ */
typedef enum {
  USB_IN_OWNER_BUF1_EP14_software      = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP14_usbController = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP14_Type;

/* ============================================  USB IN_OWNER BUF1_EP15 [31..31]  ============================================ */
typedef enum {
  USB_IN_OWNER_BUF1_EP15_software      = 0,     /*!< software : This endpoint's IN buffer 1 is owned by the software.          */
  USB_IN_OWNER_BUF1_EP15_usbController = 1,     /*!< usbController : This endpoint's IN buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_IN_OWNER_BUF1_EP15_Type;

/* =======================================================  OUT_OWNER  ======================================================= */
/* =============================================  USB OUT_OWNER BUF0_EP0 [0..0]  ============================================= */
typedef enum {
  USB_OUT_OWNER_BUF0_EP0_software      = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP0_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP0_Type;

/* =============================================  USB OUT_OWNER BUF0_EP1 [1..1]  ============================================= */
typedef enum {
  USB_OUT_OWNER_BUF0_EP1_software      = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP1_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP1_Type;

/* =============================================  USB OUT_OWNER BUF0_EP2 [2..2]  ============================================= */
typedef enum {
  USB_OUT_OWNER_BUF0_EP2_software      = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP2_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP2_Type;

/* =============================================  USB OUT_OWNER BUF0_EP3 [3..3]  ============================================= */
typedef enum {
  USB_OUT_OWNER_BUF0_EP3_software      = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP3_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP3_Type;

/* =============================================  USB OUT_OWNER BUF0_EP4 [4..4]  ============================================= */
typedef enum {
  USB_OUT_OWNER_BUF0_EP4_software      = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP4_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP4_Type;

/* =============================================  USB OUT_OWNER BUF0_EP5 [5..5]  ============================================= */
typedef enum {
  USB_OUT_OWNER_BUF0_EP5_software      = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP5_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP5_Type;

/* =============================================  USB OUT_OWNER BUF0_EP6 [6..6]  ============================================= */
typedef enum {
  USB_OUT_OWNER_BUF0_EP6_software      = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP6_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP6_Type;

/* =============================================  USB OUT_OWNER BUF0_EP7 [7..7]  ============================================= */
typedef enum {
  USB_OUT_OWNER_BUF0_EP7_software      = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP7_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP7_Type;

/* =============================================  USB OUT_OWNER BUF0_EP8 [8..8]  ============================================= */
typedef enum {
  USB_OUT_OWNER_BUF0_EP8_software      = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP8_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP8_Type;

/* =============================================  USB OUT_OWNER BUF0_EP9 [9..9]  ============================================= */
typedef enum {
  USB_OUT_OWNER_BUF0_EP9_software      = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP9_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP9_Type;

/* ===========================================  USB OUT_OWNER BUF0_EP10 [10..10]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF0_EP10_software     = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP10_usbController = 1,    /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP10_Type;

/* ===========================================  USB OUT_OWNER BUF0_EP11 [11..11]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF0_EP11_software     = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP11_usbController = 1,    /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP11_Type;

/* ===========================================  USB OUT_OWNER BUF0_EP12 [12..12]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF0_EP12_software     = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP12_usbController = 1,    /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP12_Type;

/* ===========================================  USB OUT_OWNER BUF0_EP13 [13..13]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF0_EP13_software     = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP13_usbController = 1,    /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP13_Type;

/* ===========================================  USB OUT_OWNER BUF0_EP14 [14..14]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF0_EP14_software     = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP14_usbController = 1,    /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP14_Type;

/* ===========================================  USB OUT_OWNER BUF0_EP15 [15..15]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF0_EP15_software     = 0,     /*!< software : This endpoint's OUT buffer 0 is owned by the software.         */
  USB_OUT_OWNER_BUF0_EP15_usbController = 1,    /*!< usbController : This endpoint's OUT buffer 0 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF0_EP15_Type;

/* ============================================  USB OUT_OWNER BUF1_EP0 [16..16]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP0_software      = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP0_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP0_Type;

/* ============================================  USB OUT_OWNER BUF1_EP1 [17..17]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP1_software      = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP1_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP1_Type;

/* ============================================  USB OUT_OWNER BUF1_EP2 [18..18]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP2_software      = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP2_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP2_Type;

/* ============================================  USB OUT_OWNER BUF1_EP3 [19..19]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP3_software      = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP3_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP3_Type;

/* ============================================  USB OUT_OWNER BUF1_EP4 [20..20]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP4_software      = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP4_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP4_Type;

/* ============================================  USB OUT_OWNER BUF1_EP5 [21..21]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP5_software      = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP5_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP5_Type;

/* ============================================  USB OUT_OWNER BUF1_EP6 [22..22]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP6_software      = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP6_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP6_Type;

/* ============================================  USB OUT_OWNER BUF1_EP7 [23..23]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP7_software      = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP7_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP7_Type;

/* ============================================  USB OUT_OWNER BUF1_EP8 [24..24]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP8_software      = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP8_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP8_Type;

/* ============================================  USB OUT_OWNER BUF1_EP9 [25..25]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP9_software      = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP9_usbController = 1,     /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP9_Type;

/* ===========================================  USB OUT_OWNER BUF1_EP10 [26..26]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP10_software     = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP10_usbController = 1,    /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP10_Type;

/* ===========================================  USB OUT_OWNER BUF1_EP11 [27..27]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP11_software     = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP11_usbController = 1,    /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP11_Type;

/* ===========================================  USB OUT_OWNER BUF1_EP12 [28..28]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP12_software     = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP12_usbController = 1,    /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP12_Type;

/* ===========================================  USB OUT_OWNER BUF1_EP13 [29..29]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP13_software     = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP13_usbController = 1,    /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP13_Type;

/* ===========================================  USB OUT_OWNER BUF1_EP14 [30..30]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP14_software     = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP14_usbController = 1,    /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP14_Type;

/* ===========================================  USB OUT_OWNER BUF1_EP15 [31..31]  ============================================ */
typedef enum {
  USB_OUT_OWNER_BUF1_EP15_software     = 0,     /*!< software : This endpoint's OUT buffer 1 is owned by the software.         */
  USB_OUT_OWNER_BUF1_EP15_usbController = 1,    /*!< usbController : This endpoint's OUT buffer 1 is owned by the
                                                      USB controller.                                                          */
} USB_OUT_OWNER_BUF1_EP15_Type;

/* ========================================================  IN_INT  ========================================================= */
/* ==============================================  USB IN_INT INBAV_EP0 [0..0]  ============================================== */
typedef enum {
  USB_IN_INT_INBAV_EP0_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP0_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP0_Type;

/* ==============================================  USB IN_INT INBAV_EP1 [1..1]  ============================================== */
typedef enum {
  USB_IN_INT_INBAV_EP1_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP1_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP1_Type;

/* ==============================================  USB IN_INT INBAV_EP2 [2..2]  ============================================== */
typedef enum {
  USB_IN_INT_INBAV_EP2_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP2_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP2_Type;

/* ==============================================  USB IN_INT INBAV_EP3 [3..3]  ============================================== */
typedef enum {
  USB_IN_INT_INBAV_EP3_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP3_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP3_Type;

/* ==============================================  USB IN_INT INBAV_EP4 [4..4]  ============================================== */
typedef enum {
  USB_IN_INT_INBAV_EP4_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP4_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP4_Type;

/* ==============================================  USB IN_INT INBAV_EP5 [5..5]  ============================================== */
typedef enum {
  USB_IN_INT_INBAV_EP5_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP5_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP5_Type;

/* ==============================================  USB IN_INT INBAV_EP6 [6..6]  ============================================== */
typedef enum {
  USB_IN_INT_INBAV_EP6_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP6_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP6_Type;

/* ==============================================  USB IN_INT INBAV_EP7 [7..7]  ============================================== */
typedef enum {
  USB_IN_INT_INBAV_EP7_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP7_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP7_Type;

/* ==============================================  USB IN_INT INBAV_EP8 [8..8]  ============================================== */
typedef enum {
  USB_IN_INT_INBAV_EP8_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP8_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP8_Type;

/* ==============================================  USB IN_INT INBAV_EP9 [9..9]  ============================================== */
typedef enum {
  USB_IN_INT_INBAV_EP9_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP9_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP9_Type;

/* ============================================  USB IN_INT INBAV_EP10 [10..10]  ============================================= */
typedef enum {
  USB_IN_INT_INBAV_EP10_inactive       = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP10_pending        = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP10_Type;

/* ============================================  USB IN_INT INBAV_EP11 [11..11]  ============================================= */
typedef enum {
  USB_IN_INT_INBAV_EP11_inactive       = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP11_pending        = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP11_Type;

/* ============================================  USB IN_INT INBAV_EP12 [12..12]  ============================================= */
typedef enum {
  USB_IN_INT_INBAV_EP12_inactive       = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP12_pending        = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP12_Type;

/* ============================================  USB IN_INT INBAV_EP13 [13..13]  ============================================= */
typedef enum {
  USB_IN_INT_INBAV_EP13_inactive       = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP13_pending        = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP13_Type;

/* ============================================  USB IN_INT INBAV_EP14 [14..14]  ============================================= */
typedef enum {
  USB_IN_INT_INBAV_EP14_inactive       = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP14_pending        = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP14_Type;

/* ============================================  USB IN_INT INBAV_EP15 [15..15]  ============================================= */
typedef enum {
  USB_IN_INT_INBAV_EP15_inactive       = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_IN_INT_INBAV_EP15_pending        = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_IN_INT_INBAV_EP15_Type;

/* ========================================================  OUT_INT  ======================================================== */
/* =============================================  USB OUT_INT OUTDAV_EP0 [0..0]  ============================================= */
typedef enum {
  USB_OUT_INT_OUTDAV_EP0_inactive      = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP0_pending       = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP0_Type;

/* =============================================  USB OUT_INT OUTDAV_EP1 [1..1]  ============================================= */
typedef enum {
  USB_OUT_INT_OUTDAV_EP1_inactive      = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP1_pending       = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP1_Type;

/* =============================================  USB OUT_INT OUTDAV_EP2 [2..2]  ============================================= */
typedef enum {
  USB_OUT_INT_OUTDAV_EP2_inactive      = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP2_pending       = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP2_Type;

/* =============================================  USB OUT_INT OUTDAV_EP3 [3..3]  ============================================= */
typedef enum {
  USB_OUT_INT_OUTDAV_EP3_inactive      = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP3_pending       = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP3_Type;

/* =============================================  USB OUT_INT OUTDAV_EP4 [4..4]  ============================================= */
typedef enum {
  USB_OUT_INT_OUTDAV_EP4_inactive      = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP4_pending       = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP4_Type;

/* =============================================  USB OUT_INT OUTDAV_EP5 [5..5]  ============================================= */
typedef enum {
  USB_OUT_INT_OUTDAV_EP5_inactive      = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP5_pending       = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP5_Type;

/* =============================================  USB OUT_INT OUTDAV_EP6 [6..6]  ============================================= */
typedef enum {
  USB_OUT_INT_OUTDAV_EP6_inactive      = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP6_pending       = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP6_Type;

/* =============================================  USB OUT_INT OUTDAV_EP7 [7..7]  ============================================= */
typedef enum {
  USB_OUT_INT_OUTDAV_EP7_inactive      = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP7_pending       = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP7_Type;

/* =============================================  USB OUT_INT OUTDAV_EP8 [8..8]  ============================================= */
typedef enum {
  USB_OUT_INT_OUTDAV_EP8_inactive      = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP8_pending       = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP8_Type;

/* =============================================  USB OUT_INT OUTDAV_EP9 [9..9]  ============================================= */
typedef enum {
  USB_OUT_INT_OUTDAV_EP9_inactive      = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP9_pending       = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP9_Type;

/* ===========================================  USB OUT_INT OUTDAV_EP10 [10..10]  ============================================ */
typedef enum {
  USB_OUT_INT_OUTDAV_EP10_inactive     = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP10_pending      = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP10_Type;

/* ===========================================  USB OUT_INT OUTDAV_EP11 [11..11]  ============================================ */
typedef enum {
  USB_OUT_INT_OUTDAV_EP11_inactive     = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP11_pending      = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP11_Type;

/* ===========================================  USB OUT_INT OUTDAV_EP12 [12..12]  ============================================ */
typedef enum {
  USB_OUT_INT_OUTDAV_EP12_inactive     = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP12_pending      = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP12_Type;

/* ===========================================  USB OUT_INT OUTDAV_EP13 [13..13]  ============================================ */
typedef enum {
  USB_OUT_INT_OUTDAV_EP13_inactive     = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP13_pending      = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP13_Type;

/* ===========================================  USB OUT_INT OUTDAV_EP14 [14..14]  ============================================ */
typedef enum {
  USB_OUT_INT_OUTDAV_EP14_inactive     = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP14_pending      = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP14_Type;

/* ===========================================  USB OUT_INT OUTDAV_EP15 [15..15]  ============================================ */
typedef enum {
  USB_OUT_INT_OUTDAV_EP15_inactive     = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_OUT_INT_OUTDAV_EP15_pending      = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_OUT_INT_OUTDAV_EP15_Type;

/* ========================================================  NAK_INT  ======================================================== */
/* ==============================================  USB NAK_INT NAK_EP0 [0..0]  =============================================== */
typedef enum {
  USB_NAK_INT_NAK_EP0_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP0_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP0_Type;

/* ==============================================  USB NAK_INT NAK_EP1 [1..1]  =============================================== */
typedef enum {
  USB_NAK_INT_NAK_EP1_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP1_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP1_Type;

/* ==============================================  USB NAK_INT NAK_EP2 [2..2]  =============================================== */
typedef enum {
  USB_NAK_INT_NAK_EP2_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP2_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP2_Type;

/* ==============================================  USB NAK_INT NAK_EP3 [3..3]  =============================================== */
typedef enum {
  USB_NAK_INT_NAK_EP3_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP3_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP3_Type;

/* ==============================================  USB NAK_INT NAK_EP4 [4..4]  =============================================== */
typedef enum {
  USB_NAK_INT_NAK_EP4_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP4_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP4_Type;

/* ==============================================  USB NAK_INT NAK_EP5 [5..5]  =============================================== */
typedef enum {
  USB_NAK_INT_NAK_EP5_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP5_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP5_Type;

/* ==============================================  USB NAK_INT NAK_EP6 [6..6]  =============================================== */
typedef enum {
  USB_NAK_INT_NAK_EP6_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP6_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP6_Type;

/* ==============================================  USB NAK_INT NAK_EP7 [7..7]  =============================================== */
typedef enum {
  USB_NAK_INT_NAK_EP7_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP7_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP7_Type;

/* ==============================================  USB NAK_INT NAK_EP8 [8..8]  =============================================== */
typedef enum {
  USB_NAK_INT_NAK_EP8_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP8_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP8_Type;

/* ==============================================  USB NAK_INT NAK_EP9 [9..9]  =============================================== */
typedef enum {
  USB_NAK_INT_NAK_EP9_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP9_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP9_Type;

/* =============================================  USB NAK_INT NAK_EP10 [10..10]  ============================================= */
typedef enum {
  USB_NAK_INT_NAK_EP10_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP10_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP10_Type;

/* =============================================  USB NAK_INT NAK_EP11 [11..11]  ============================================= */
typedef enum {
  USB_NAK_INT_NAK_EP11_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP11_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP11_Type;

/* =============================================  USB NAK_INT NAK_EP12 [12..12]  ============================================= */
typedef enum {
  USB_NAK_INT_NAK_EP12_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP12_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP12_Type;

/* =============================================  USB NAK_INT NAK_EP13 [13..13]  ============================================= */
typedef enum {
  USB_NAK_INT_NAK_EP13_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP13_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP13_Type;

/* =============================================  USB NAK_INT NAK_EP14 [14..14]  ============================================= */
typedef enum {
  USB_NAK_INT_NAK_EP14_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP14_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP14_Type;

/* =============================================  USB NAK_INT NAK_EP15 [15..15]  ============================================= */
typedef enum {
  USB_NAK_INT_NAK_EP15_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_NAK_INT_NAK_EP15_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_NAK_INT_NAK_EP15_Type;

/* ======================================================  DMA_ERR_INT  ====================================================== */
/* ==============================================  USB DMA_ERR_INT EP0 [0..0]  =============================================== */
typedef enum {
  USB_DMA_ERR_INT_EP0_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP0_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP0_Type;

/* ==============================================  USB DMA_ERR_INT EP1 [1..1]  =============================================== */
typedef enum {
  USB_DMA_ERR_INT_EP1_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP1_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP1_Type;

/* ==============================================  USB DMA_ERR_INT EP2 [2..2]  =============================================== */
typedef enum {
  USB_DMA_ERR_INT_EP2_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP2_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP2_Type;

/* ==============================================  USB DMA_ERR_INT EP3 [3..3]  =============================================== */
typedef enum {
  USB_DMA_ERR_INT_EP3_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP3_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP3_Type;

/* ==============================================  USB DMA_ERR_INT EP4 [4..4]  =============================================== */
typedef enum {
  USB_DMA_ERR_INT_EP4_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP4_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP4_Type;

/* ==============================================  USB DMA_ERR_INT EP5 [5..5]  =============================================== */
typedef enum {
  USB_DMA_ERR_INT_EP5_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP5_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP5_Type;

/* ==============================================  USB DMA_ERR_INT EP6 [6..6]  =============================================== */
typedef enum {
  USB_DMA_ERR_INT_EP6_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP6_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP6_Type;

/* ==============================================  USB DMA_ERR_INT EP7 [7..7]  =============================================== */
typedef enum {
  USB_DMA_ERR_INT_EP7_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP7_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP7_Type;

/* ==============================================  USB DMA_ERR_INT EP8 [8..8]  =============================================== */
typedef enum {
  USB_DMA_ERR_INT_EP8_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP8_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP8_Type;

/* ==============================================  USB DMA_ERR_INT EP9 [9..9]  =============================================== */
typedef enum {
  USB_DMA_ERR_INT_EP9_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP9_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP9_Type;

/* =============================================  USB DMA_ERR_INT EP10 [10..10]  ============================================= */
typedef enum {
  USB_DMA_ERR_INT_EP10_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP10_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP10_Type;

/* =============================================  USB DMA_ERR_INT EP11 [11..11]  ============================================= */
typedef enum {
  USB_DMA_ERR_INT_EP11_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP11_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP11_Type;

/* =============================================  USB DMA_ERR_INT EP12 [12..12]  ============================================= */
typedef enum {
  USB_DMA_ERR_INT_EP12_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP12_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP12_Type;

/* =============================================  USB DMA_ERR_INT EP13 [13..13]  ============================================= */
typedef enum {
  USB_DMA_ERR_INT_EP13_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP13_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP13_Type;

/* =============================================  USB DMA_ERR_INT EP14 [14..14]  ============================================= */
typedef enum {
  USB_DMA_ERR_INT_EP14_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP14_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP14_Type;

/* =============================================  USB DMA_ERR_INT EP15 [15..15]  ============================================= */
typedef enum {
  USB_DMA_ERR_INT_EP15_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_DMA_ERR_INT_EP15_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_DMA_ERR_INT_EP15_Type;

/* ======================================================  BUF_OVR_INT  ====================================================== */
/* ==============================================  USB BUF_OVR_INT EP0 [0..0]  =============================================== */
typedef enum {
  USB_BUF_OVR_INT_EP0_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP0_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP0_Type;

/* ==============================================  USB BUF_OVR_INT EP1 [1..1]  =============================================== */
typedef enum {
  USB_BUF_OVR_INT_EP1_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP1_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP1_Type;

/* ==============================================  USB BUF_OVR_INT EP2 [2..2]  =============================================== */
typedef enum {
  USB_BUF_OVR_INT_EP2_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP2_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP2_Type;

/* ==============================================  USB BUF_OVR_INT EP3 [3..3]  =============================================== */
typedef enum {
  USB_BUF_OVR_INT_EP3_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP3_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP3_Type;

/* ==============================================  USB BUF_OVR_INT EP4 [4..4]  =============================================== */
typedef enum {
  USB_BUF_OVR_INT_EP4_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP4_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP4_Type;

/* ==============================================  USB BUF_OVR_INT EP5 [5..5]  =============================================== */
typedef enum {
  USB_BUF_OVR_INT_EP5_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP5_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP5_Type;

/* ==============================================  USB BUF_OVR_INT EP6 [6..6]  =============================================== */
typedef enum {
  USB_BUF_OVR_INT_EP6_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP6_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP6_Type;

/* ==============================================  USB BUF_OVR_INT EP7 [7..7]  =============================================== */
typedef enum {
  USB_BUF_OVR_INT_EP7_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP7_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP7_Type;

/* ==============================================  USB BUF_OVR_INT EP8 [8..8]  =============================================== */
typedef enum {
  USB_BUF_OVR_INT_EP8_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP8_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP8_Type;

/* ==============================================  USB BUF_OVR_INT EP9 [9..9]  =============================================== */
typedef enum {
  USB_BUF_OVR_INT_EP9_inactive         = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP9_pending          = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP9_Type;

/* =============================================  USB BUF_OVR_INT EP10 [10..10]  ============================================= */
typedef enum {
  USB_BUF_OVR_INT_EP10_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP10_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP10_Type;

/* =============================================  USB BUF_OVR_INT EP11 [11..11]  ============================================= */
typedef enum {
  USB_BUF_OVR_INT_EP11_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP11_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP11_Type;

/* =============================================  USB BUF_OVR_INT EP12 [12..12]  ============================================= */
typedef enum {
  USB_BUF_OVR_INT_EP12_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP12_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP12_Type;

/* =============================================  USB BUF_OVR_INT EP13 [13..13]  ============================================= */
typedef enum {
  USB_BUF_OVR_INT_EP13_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP13_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP13_Type;

/* =============================================  USB BUF_OVR_INT EP14 [14..14]  ============================================= */
typedef enum {
  USB_BUF_OVR_INT_EP14_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP14_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP14_Type;

/* =============================================  USB BUF_OVR_INT EP15 [15..15]  ============================================= */
typedef enum {
  USB_BUF_OVR_INT_EP15_inactive        = 0,     /*!< inactive : No interrupt is pending.                                       */
  USB_BUF_OVR_INT_EP15_pending         = 1,     /*!< pending : An interrupt is pending.                                        */
} USB_BUF_OVR_INT_EP15_Type;

/* ========================================================  SETUP0  ========================================================= */
/* ========================================================  SETUP1  ========================================================= */
/* ==========================================================  EP0  ========================================================== */
/* =================================================  USB EP0 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP0_EP_DIR_disable            = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP0_EP_DIR_out                = 1,     /*!< out : Out                                                                 */
  USB_EP_EP0_EP_DIR_in                 = 2,     /*!< in : In                                                                   */
  USB_EP_EP0_EP_DIR_control            = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP0_EP_DIR_Type;

/* ================================================  USB EP0 EP_BUF2 [3..3]  ================================================= */
typedef enum {
  USB_EP_EP0_EP_BUF2_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP0_EP_BUF2_enable            = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP0_EP_BUF2_Type;

/* ===============================================  USB EP0 EP_INT_EN [4..4]  ================================================ */
typedef enum {
  USB_EP_EP0_EP_INT_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP0_EP_INT_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP0_EP_INT_EN_Type;

/* ===============================================  USB EP0 EP_NAK_EN [5..5]  ================================================ */
typedef enum {
  USB_EP_EP0_EP_NAK_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP0_EP_NAK_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP0_EP_NAK_EN_Type;

/* =================================================  USB EP0 EP_DT [6..6]  ================================================== */
typedef enum {
  USB_EP_EP0_EP_DT_complete            = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP0_EP_DT_start               = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP0_EP_DT_Type;

/* ================================================  USB EP0 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP0_EP_STALL_notStalled       = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP0_EP_STALL_stalled          = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP0_EP_STALL_Type;

/* ==============================================  USB EP0 EP_ST_STALL [9..9]  =============================================== */
typedef enum {
  USB_EP_EP0_EP_ST_STALL_disable       = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP0_EP_ST_STALL_enable        = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP0_EP_ST_STALL_Type;

/* ==============================================  USB EP0 EP_ST_ACK [10..10]  =============================================== */
typedef enum {
  USB_EP_EP0_EP_ST_ACK_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP0_EP_ST_ACK_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP0_EP_ST_ACK_Type;

/* ==========================================================  EP1  ========================================================== */
/* =================================================  USB EP1 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP1_EP_DIR_disable            = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP1_EP_DIR_out                = 1,     /*!< out : Out                                                                 */
  USB_EP_EP1_EP_DIR_in                 = 2,     /*!< in : In                                                                   */
  USB_EP_EP1_EP_DIR_control            = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP1_EP_DIR_Type;

/* ================================================  USB EP1 EP_BUF2 [3..3]  ================================================= */
typedef enum {
  USB_EP_EP1_EP_BUF2_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP1_EP_BUF2_enable            = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP1_EP_BUF2_Type;

/* ===============================================  USB EP1 EP_INT_EN [4..4]  ================================================ */
typedef enum {
  USB_EP_EP1_EP_INT_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP1_EP_INT_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP1_EP_INT_EN_Type;

/* ===============================================  USB EP1 EP_NAK_EN [5..5]  ================================================ */
typedef enum {
  USB_EP_EP1_EP_NAK_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP1_EP_NAK_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP1_EP_NAK_EN_Type;

/* =================================================  USB EP1 EP_DT [6..6]  ================================================== */
typedef enum {
  USB_EP_EP1_EP_DT_complete            = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP1_EP_DT_start               = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP1_EP_DT_Type;

/* ================================================  USB EP1 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP1_EP_STALL_notStalled       = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP1_EP_STALL_stalled          = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP1_EP_STALL_Type;

/* ==============================================  USB EP1 EP_ST_STALL [9..9]  =============================================== */
typedef enum {
  USB_EP_EP1_EP_ST_STALL_disable       = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP1_EP_ST_STALL_enable        = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP1_EP_ST_STALL_Type;

/* ==============================================  USB EP1 EP_ST_ACK [10..10]  =============================================== */
typedef enum {
  USB_EP_EP1_EP_ST_ACK_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP1_EP_ST_ACK_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP1_EP_ST_ACK_Type;

/* ==========================================================  EP2  ========================================================== */
/* =================================================  USB EP2 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP2_EP_DIR_disable            = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP2_EP_DIR_out                = 1,     /*!< out : Out                                                                 */
  USB_EP_EP2_EP_DIR_in                 = 2,     /*!< in : In                                                                   */
  USB_EP_EP2_EP_DIR_control            = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP2_EP_DIR_Type;

/* ================================================  USB EP2 EP_BUF2 [3..3]  ================================================= */
typedef enum {
  USB_EP_EP2_EP_BUF2_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP2_EP_BUF2_enable            = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP2_EP_BUF2_Type;

/* ===============================================  USB EP2 EP_INT_EN [4..4]  ================================================ */
typedef enum {
  USB_EP_EP2_EP_INT_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP2_EP_INT_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP2_EP_INT_EN_Type;

/* ===============================================  USB EP2 EP_NAK_EN [5..5]  ================================================ */
typedef enum {
  USB_EP_EP2_EP_NAK_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP2_EP_NAK_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP2_EP_NAK_EN_Type;

/* =================================================  USB EP2 EP_DT [6..6]  ================================================== */
typedef enum {
  USB_EP_EP2_EP_DT_complete            = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP2_EP_DT_start               = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP2_EP_DT_Type;

/* ================================================  USB EP2 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP2_EP_STALL_notStalled       = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP2_EP_STALL_stalled          = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP2_EP_STALL_Type;

/* ==============================================  USB EP2 EP_ST_STALL [9..9]  =============================================== */
typedef enum {
  USB_EP_EP2_EP_ST_STALL_disable       = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP2_EP_ST_STALL_enable        = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP2_EP_ST_STALL_Type;

/* ==============================================  USB EP2 EP_ST_ACK [10..10]  =============================================== */
typedef enum {
  USB_EP_EP2_EP_ST_ACK_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP2_EP_ST_ACK_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP2_EP_ST_ACK_Type;

/* ==========================================================  EP3  ========================================================== */
/* =================================================  USB EP3 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP3_EP_DIR_disable            = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP3_EP_DIR_out                = 1,     /*!< out : Out                                                                 */
  USB_EP_EP3_EP_DIR_in                 = 2,     /*!< in : In                                                                   */
  USB_EP_EP3_EP_DIR_control            = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP3_EP_DIR_Type;

/* ================================================  USB EP3 EP_BUF2 [3..3]  ================================================= */
typedef enum {
  USB_EP_EP3_EP_BUF2_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP3_EP_BUF2_enable            = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP3_EP_BUF2_Type;

/* ===============================================  USB EP3 EP_INT_EN [4..4]  ================================================ */
typedef enum {
  USB_EP_EP3_EP_INT_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP3_EP_INT_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP3_EP_INT_EN_Type;

/* ===============================================  USB EP3 EP_NAK_EN [5..5]  ================================================ */
typedef enum {
  USB_EP_EP3_EP_NAK_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP3_EP_NAK_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP3_EP_NAK_EN_Type;

/* =================================================  USB EP3 EP_DT [6..6]  ================================================== */
typedef enum {
  USB_EP_EP3_EP_DT_complete            = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP3_EP_DT_start               = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP3_EP_DT_Type;

/* ================================================  USB EP3 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP3_EP_STALL_notStalled       = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP3_EP_STALL_stalled          = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP3_EP_STALL_Type;

/* ==============================================  USB EP3 EP_ST_STALL [9..9]  =============================================== */
typedef enum {
  USB_EP_EP3_EP_ST_STALL_disable       = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP3_EP_ST_STALL_enable        = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP3_EP_ST_STALL_Type;

/* ==============================================  USB EP3 EP_ST_ACK [10..10]  =============================================== */
typedef enum {
  USB_EP_EP3_EP_ST_ACK_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP3_EP_ST_ACK_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP3_EP_ST_ACK_Type;

/* ==========================================================  EP4  ========================================================== */
/* =================================================  USB EP4 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP4_EP_DIR_disable            = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP4_EP_DIR_out                = 1,     /*!< out : Out                                                                 */
  USB_EP_EP4_EP_DIR_in                 = 2,     /*!< in : In                                                                   */
  USB_EP_EP4_EP_DIR_control            = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP4_EP_DIR_Type;

/* ================================================  USB EP4 EP_BUF2 [3..3]  ================================================= */
typedef enum {
  USB_EP_EP4_EP_BUF2_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP4_EP_BUF2_enable            = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP4_EP_BUF2_Type;

/* ===============================================  USB EP4 EP_INT_EN [4..4]  ================================================ */
typedef enum {
  USB_EP_EP4_EP_INT_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP4_EP_INT_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP4_EP_INT_EN_Type;

/* ===============================================  USB EP4 EP_NAK_EN [5..5]  ================================================ */
typedef enum {
  USB_EP_EP4_EP_NAK_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP4_EP_NAK_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP4_EP_NAK_EN_Type;

/* =================================================  USB EP4 EP_DT [6..6]  ================================================== */
typedef enum {
  USB_EP_EP4_EP_DT_complete            = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP4_EP_DT_start               = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP4_EP_DT_Type;

/* ================================================  USB EP4 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP4_EP_STALL_notStalled       = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP4_EP_STALL_stalled          = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP4_EP_STALL_Type;

/* ==============================================  USB EP4 EP_ST_STALL [9..9]  =============================================== */
typedef enum {
  USB_EP_EP4_EP_ST_STALL_disable       = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP4_EP_ST_STALL_enable        = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP4_EP_ST_STALL_Type;

/* ==============================================  USB EP4 EP_ST_ACK [10..10]  =============================================== */
typedef enum {
  USB_EP_EP4_EP_ST_ACK_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP4_EP_ST_ACK_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP4_EP_ST_ACK_Type;

/* ==========================================================  EP5  ========================================================== */
/* =================================================  USB EP5 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP5_EP_DIR_disable            = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP5_EP_DIR_out                = 1,     /*!< out : Out                                                                 */
  USB_EP_EP5_EP_DIR_in                 = 2,     /*!< in : In                                                                   */
  USB_EP_EP5_EP_DIR_control            = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP5_EP_DIR_Type;

/* ================================================  USB EP5 EP_BUF2 [3..3]  ================================================= */
typedef enum {
  USB_EP_EP5_EP_BUF2_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP5_EP_BUF2_enable            = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP5_EP_BUF2_Type;

/* ===============================================  USB EP5 EP_INT_EN [4..4]  ================================================ */
typedef enum {
  USB_EP_EP5_EP_INT_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP5_EP_INT_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP5_EP_INT_EN_Type;

/* ===============================================  USB EP5 EP_NAK_EN [5..5]  ================================================ */
typedef enum {
  USB_EP_EP5_EP_NAK_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP5_EP_NAK_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP5_EP_NAK_EN_Type;

/* =================================================  USB EP5 EP_DT [6..6]  ================================================== */
typedef enum {
  USB_EP_EP5_EP_DT_complete            = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP5_EP_DT_start               = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP5_EP_DT_Type;

/* ================================================  USB EP5 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP5_EP_STALL_notStalled       = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP5_EP_STALL_stalled          = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP5_EP_STALL_Type;

/* ==============================================  USB EP5 EP_ST_STALL [9..9]  =============================================== */
typedef enum {
  USB_EP_EP5_EP_ST_STALL_disable       = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP5_EP_ST_STALL_enable        = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP5_EP_ST_STALL_Type;

/* ==============================================  USB EP5 EP_ST_ACK [10..10]  =============================================== */
typedef enum {
  USB_EP_EP5_EP_ST_ACK_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP5_EP_ST_ACK_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP5_EP_ST_ACK_Type;

/* ==========================================================  EP6  ========================================================== */
/* =================================================  USB EP6 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP6_EP_DIR_disable            = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP6_EP_DIR_out                = 1,     /*!< out : Out                                                                 */
  USB_EP_EP6_EP_DIR_in                 = 2,     /*!< in : In                                                                   */
  USB_EP_EP6_EP_DIR_control            = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP6_EP_DIR_Type;

/* ================================================  USB EP6 EP_BUF2 [3..3]  ================================================= */
typedef enum {
  USB_EP_EP6_EP_BUF2_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP6_EP_BUF2_enable            = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP6_EP_BUF2_Type;

/* ===============================================  USB EP6 EP_INT_EN [4..4]  ================================================ */
typedef enum {
  USB_EP_EP6_EP_INT_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP6_EP_INT_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP6_EP_INT_EN_Type;

/* ===============================================  USB EP6 EP_NAK_EN [5..5]  ================================================ */
typedef enum {
  USB_EP_EP6_EP_NAK_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP6_EP_NAK_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP6_EP_NAK_EN_Type;

/* =================================================  USB EP6 EP_DT [6..6]  ================================================== */
typedef enum {
  USB_EP_EP6_EP_DT_complete            = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP6_EP_DT_start               = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP6_EP_DT_Type;

/* ================================================  USB EP6 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP6_EP_STALL_notStalled       = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP6_EP_STALL_stalled          = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP6_EP_STALL_Type;

/* ==============================================  USB EP6 EP_ST_STALL [9..9]  =============================================== */
typedef enum {
  USB_EP_EP6_EP_ST_STALL_disable       = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP6_EP_ST_STALL_enable        = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP6_EP_ST_STALL_Type;

/* ==============================================  USB EP6 EP_ST_ACK [10..10]  =============================================== */
typedef enum {
  USB_EP_EP6_EP_ST_ACK_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP6_EP_ST_ACK_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP6_EP_ST_ACK_Type;

/* ==========================================================  EP7  ========================================================== */
/* =================================================  USB EP7 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP7_EP_DIR_disable            = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP7_EP_DIR_out                = 1,     /*!< out : Out                                                                 */
  USB_EP_EP7_EP_DIR_in                 = 2,     /*!< in : In                                                                   */
  USB_EP_EP7_EP_DIR_control            = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP7_EP_DIR_Type;

/* ================================================  USB EP7 EP_BUF2 [3..3]  ================================================= */
typedef enum {
  USB_EP_EP7_EP_BUF2_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP7_EP_BUF2_enable            = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP7_EP_BUF2_Type;

/* ===============================================  USB EP7 EP_INT_EN [4..4]  ================================================ */
typedef enum {
  USB_EP_EP7_EP_INT_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP7_EP_INT_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP7_EP_INT_EN_Type;

/* ===============================================  USB EP7 EP_NAK_EN [5..5]  ================================================ */
typedef enum {
  USB_EP_EP7_EP_NAK_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP7_EP_NAK_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP7_EP_NAK_EN_Type;

/* =================================================  USB EP7 EP_DT [6..6]  ================================================== */
typedef enum {
  USB_EP_EP7_EP_DT_complete            = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP7_EP_DT_start               = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP7_EP_DT_Type;

/* ================================================  USB EP7 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP7_EP_STALL_notStalled       = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP7_EP_STALL_stalled          = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP7_EP_STALL_Type;

/* ==============================================  USB EP7 EP_ST_STALL [9..9]  =============================================== */
typedef enum {
  USB_EP_EP7_EP_ST_STALL_disable       = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP7_EP_ST_STALL_enable        = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP7_EP_ST_STALL_Type;

/* ==============================================  USB EP7 EP_ST_ACK [10..10]  =============================================== */
typedef enum {
  USB_EP_EP7_EP_ST_ACK_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP7_EP_ST_ACK_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP7_EP_ST_ACK_Type;

/* ==========================================================  EP8  ========================================================== */
/* =================================================  USB EP8 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP8_EP_DIR_disable            = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP8_EP_DIR_out                = 1,     /*!< out : Out                                                                 */
  USB_EP_EP8_EP_DIR_in                 = 2,     /*!< in : In                                                                   */
  USB_EP_EP8_EP_DIR_control            = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP8_EP_DIR_Type;

/* ================================================  USB EP8 EP_BUF2 [3..3]  ================================================= */
typedef enum {
  USB_EP_EP8_EP_BUF2_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP8_EP_BUF2_enable            = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP8_EP_BUF2_Type;

/* ===============================================  USB EP8 EP_INT_EN [4..4]  ================================================ */
typedef enum {
  USB_EP_EP8_EP_INT_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP8_EP_INT_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP8_EP_INT_EN_Type;

/* ===============================================  USB EP8 EP_NAK_EN [5..5]  ================================================ */
typedef enum {
  USB_EP_EP8_EP_NAK_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP8_EP_NAK_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP8_EP_NAK_EN_Type;

/* =================================================  USB EP8 EP_DT [6..6]  ================================================== */
typedef enum {
  USB_EP_EP8_EP_DT_complete            = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP8_EP_DT_start               = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP8_EP_DT_Type;

/* ================================================  USB EP8 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP8_EP_STALL_notStalled       = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP8_EP_STALL_stalled          = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP8_EP_STALL_Type;

/* ==============================================  USB EP8 EP_ST_STALL [9..9]  =============================================== */
typedef enum {
  USB_EP_EP8_EP_ST_STALL_disable       = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP8_EP_ST_STALL_enable        = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP8_EP_ST_STALL_Type;

/* ==============================================  USB EP8 EP_ST_ACK [10..10]  =============================================== */
typedef enum {
  USB_EP_EP8_EP_ST_ACK_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP8_EP_ST_ACK_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP8_EP_ST_ACK_Type;

/* ==========================================================  EP9  ========================================================== */
/* =================================================  USB EP9 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP9_EP_DIR_disable            = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP9_EP_DIR_out                = 1,     /*!< out : Out                                                                 */
  USB_EP_EP9_EP_DIR_in                 = 2,     /*!< in : In                                                                   */
  USB_EP_EP9_EP_DIR_control            = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP9_EP_DIR_Type;

/* ================================================  USB EP9 EP_BUF2 [3..3]  ================================================= */
typedef enum {
  USB_EP_EP9_EP_BUF2_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP9_EP_BUF2_enable            = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP9_EP_BUF2_Type;

/* ===============================================  USB EP9 EP_INT_EN [4..4]  ================================================ */
typedef enum {
  USB_EP_EP9_EP_INT_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP9_EP_INT_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP9_EP_INT_EN_Type;

/* ===============================================  USB EP9 EP_NAK_EN [5..5]  ================================================ */
typedef enum {
  USB_EP_EP9_EP_NAK_EN_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP9_EP_NAK_EN_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP9_EP_NAK_EN_Type;

/* =================================================  USB EP9 EP_DT [6..6]  ================================================== */
typedef enum {
  USB_EP_EP9_EP_DT_complete            = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP9_EP_DT_start               = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP9_EP_DT_Type;

/* ================================================  USB EP9 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP9_EP_STALL_notStalled       = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP9_EP_STALL_stalled          = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP9_EP_STALL_Type;

/* ==============================================  USB EP9 EP_ST_STALL [9..9]  =============================================== */
typedef enum {
  USB_EP_EP9_EP_ST_STALL_disable       = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP9_EP_ST_STALL_enable        = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP9_EP_ST_STALL_Type;

/* ==============================================  USB EP9 EP_ST_ACK [10..10]  =============================================== */
typedef enum {
  USB_EP_EP9_EP_ST_ACK_disable         = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP9_EP_ST_ACK_enable          = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP9_EP_ST_ACK_Type;

/* =========================================================  EP10  ========================================================== */
/* ================================================  USB EP10 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP10_EP_DIR_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP10_EP_DIR_out               = 1,     /*!< out : Out                                                                 */
  USB_EP_EP10_EP_DIR_in                = 2,     /*!< in : In                                                                   */
  USB_EP_EP10_EP_DIR_control           = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP10_EP_DIR_Type;

/* ================================================  USB EP10 EP_BUF2 [3..3]  ================================================ */
typedef enum {
  USB_EP_EP10_EP_BUF2_disable          = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP10_EP_BUF2_enable           = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP10_EP_BUF2_Type;

/* ===============================================  USB EP10 EP_INT_EN [4..4]  =============================================== */
typedef enum {
  USB_EP_EP10_EP_INT_EN_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP10_EP_INT_EN_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP10_EP_INT_EN_Type;

/* ===============================================  USB EP10 EP_NAK_EN [5..5]  =============================================== */
typedef enum {
  USB_EP_EP10_EP_NAK_EN_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP10_EP_NAK_EN_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP10_EP_NAK_EN_Type;

/* =================================================  USB EP10 EP_DT [6..6]  ================================================= */
typedef enum {
  USB_EP_EP10_EP_DT_complete           = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP10_EP_DT_start              = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP10_EP_DT_Type;

/* ===============================================  USB EP10 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP10_EP_STALL_notStalled      = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP10_EP_STALL_stalled         = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP10_EP_STALL_Type;

/* ==============================================  USB EP10 EP_ST_STALL [9..9]  ============================================== */
typedef enum {
  USB_EP_EP10_EP_ST_STALL_disable      = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP10_EP_ST_STALL_enable       = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP10_EP_ST_STALL_Type;

/* ==============================================  USB EP10 EP_ST_ACK [10..10]  ============================================== */
typedef enum {
  USB_EP_EP10_EP_ST_ACK_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP10_EP_ST_ACK_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP10_EP_ST_ACK_Type;

/* =========================================================  EP11  ========================================================== */
/* ================================================  USB EP11 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP11_EP_DIR_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP11_EP_DIR_out               = 1,     /*!< out : Out                                                                 */
  USB_EP_EP11_EP_DIR_in                = 2,     /*!< in : In                                                                   */
  USB_EP_EP11_EP_DIR_control           = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP11_EP_DIR_Type;

/* ================================================  USB EP11 EP_BUF2 [3..3]  ================================================ */
typedef enum {
  USB_EP_EP11_EP_BUF2_disable          = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP11_EP_BUF2_enable           = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP11_EP_BUF2_Type;

/* ===============================================  USB EP11 EP_INT_EN [4..4]  =============================================== */
typedef enum {
  USB_EP_EP11_EP_INT_EN_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP11_EP_INT_EN_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP11_EP_INT_EN_Type;

/* ===============================================  USB EP11 EP_NAK_EN [5..5]  =============================================== */
typedef enum {
  USB_EP_EP11_EP_NAK_EN_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP11_EP_NAK_EN_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP11_EP_NAK_EN_Type;

/* =================================================  USB EP11 EP_DT [6..6]  ================================================= */
typedef enum {
  USB_EP_EP11_EP_DT_complete           = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP11_EP_DT_start              = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP11_EP_DT_Type;

/* ===============================================  USB EP11 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP11_EP_STALL_notStalled      = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP11_EP_STALL_stalled         = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP11_EP_STALL_Type;

/* ==============================================  USB EP11 EP_ST_STALL [9..9]  ============================================== */
typedef enum {
  USB_EP_EP11_EP_ST_STALL_disable      = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP11_EP_ST_STALL_enable       = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP11_EP_ST_STALL_Type;

/* ==============================================  USB EP11 EP_ST_ACK [10..10]  ============================================== */
typedef enum {
  USB_EP_EP11_EP_ST_ACK_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP11_EP_ST_ACK_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP11_EP_ST_ACK_Type;

/* =========================================================  EP12  ========================================================== */
/* ================================================  USB EP12 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP12_EP_DIR_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP12_EP_DIR_out               = 1,     /*!< out : Out                                                                 */
  USB_EP_EP12_EP_DIR_in                = 2,     /*!< in : In                                                                   */
  USB_EP_EP12_EP_DIR_control           = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP12_EP_DIR_Type;

/* ================================================  USB EP12 EP_BUF2 [3..3]  ================================================ */
typedef enum {
  USB_EP_EP12_EP_BUF2_disable          = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP12_EP_BUF2_enable           = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP12_EP_BUF2_Type;

/* ===============================================  USB EP12 EP_INT_EN [4..4]  =============================================== */
typedef enum {
  USB_EP_EP12_EP_INT_EN_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP12_EP_INT_EN_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP12_EP_INT_EN_Type;

/* ===============================================  USB EP12 EP_NAK_EN [5..5]  =============================================== */
typedef enum {
  USB_EP_EP12_EP_NAK_EN_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP12_EP_NAK_EN_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP12_EP_NAK_EN_Type;

/* =================================================  USB EP12 EP_DT [6..6]  ================================================= */
typedef enum {
  USB_EP_EP12_EP_DT_complete           = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP12_EP_DT_start              = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP12_EP_DT_Type;

/* ===============================================  USB EP12 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP12_EP_STALL_notStalled      = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP12_EP_STALL_stalled         = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP12_EP_STALL_Type;

/* ==============================================  USB EP12 EP_ST_STALL [9..9]  ============================================== */
typedef enum {
  USB_EP_EP12_EP_ST_STALL_disable      = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP12_EP_ST_STALL_enable       = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP12_EP_ST_STALL_Type;

/* ==============================================  USB EP12 EP_ST_ACK [10..10]  ============================================== */
typedef enum {
  USB_EP_EP12_EP_ST_ACK_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP12_EP_ST_ACK_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP12_EP_ST_ACK_Type;

/* =========================================================  EP13  ========================================================== */
/* ================================================  USB EP13 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP13_EP_DIR_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP13_EP_DIR_out               = 1,     /*!< out : Out                                                                 */
  USB_EP_EP13_EP_DIR_in                = 2,     /*!< in : In                                                                   */
  USB_EP_EP13_EP_DIR_control           = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP13_EP_DIR_Type;

/* ================================================  USB EP13 EP_BUF2 [3..3]  ================================================ */
typedef enum {
  USB_EP_EP13_EP_BUF2_disable          = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP13_EP_BUF2_enable           = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP13_EP_BUF2_Type;

/* ===============================================  USB EP13 EP_INT_EN [4..4]  =============================================== */
typedef enum {
  USB_EP_EP13_EP_INT_EN_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP13_EP_INT_EN_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP13_EP_INT_EN_Type;

/* ===============================================  USB EP13 EP_NAK_EN [5..5]  =============================================== */
typedef enum {
  USB_EP_EP13_EP_NAK_EN_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP13_EP_NAK_EN_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP13_EP_NAK_EN_Type;

/* =================================================  USB EP13 EP_DT [6..6]  ================================================= */
typedef enum {
  USB_EP_EP13_EP_DT_complete           = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP13_EP_DT_start              = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP13_EP_DT_Type;

/* ===============================================  USB EP13 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP13_EP_STALL_notStalled      = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP13_EP_STALL_stalled         = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP13_EP_STALL_Type;

/* ==============================================  USB EP13 EP_ST_STALL [9..9]  ============================================== */
typedef enum {
  USB_EP_EP13_EP_ST_STALL_disable      = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP13_EP_ST_STALL_enable       = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP13_EP_ST_STALL_Type;

/* ==============================================  USB EP13 EP_ST_ACK [10..10]  ============================================== */
typedef enum {
  USB_EP_EP13_EP_ST_ACK_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP13_EP_ST_ACK_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP13_EP_ST_ACK_Type;

/* =========================================================  EP14  ========================================================== */
/* ================================================  USB EP14 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP14_EP_DIR_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP14_EP_DIR_out               = 1,     /*!< out : Out                                                                 */
  USB_EP_EP14_EP_DIR_in                = 2,     /*!< in : In                                                                   */
  USB_EP_EP14_EP_DIR_control           = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP14_EP_DIR_Type;

/* ================================================  USB EP14 EP_BUF2 [3..3]  ================================================ */
typedef enum {
  USB_EP_EP14_EP_BUF2_disable          = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP14_EP_BUF2_enable           = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP14_EP_BUF2_Type;

/* ===============================================  USB EP14 EP_INT_EN [4..4]  =============================================== */
typedef enum {
  USB_EP_EP14_EP_INT_EN_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP14_EP_INT_EN_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP14_EP_INT_EN_Type;

/* ===============================================  USB EP14 EP_NAK_EN [5..5]  =============================================== */
typedef enum {
  USB_EP_EP14_EP_NAK_EN_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP14_EP_NAK_EN_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP14_EP_NAK_EN_Type;

/* =================================================  USB EP14 EP_DT [6..6]  ================================================= */
typedef enum {
  USB_EP_EP14_EP_DT_complete           = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP14_EP_DT_start              = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP14_EP_DT_Type;

/* ===============================================  USB EP14 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP14_EP_STALL_notStalled      = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP14_EP_STALL_stalled         = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP14_EP_STALL_Type;

/* ==============================================  USB EP14 EP_ST_STALL [9..9]  ============================================== */
typedef enum {
  USB_EP_EP14_EP_ST_STALL_disable      = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP14_EP_ST_STALL_enable       = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP14_EP_ST_STALL_Type;

/* ==============================================  USB EP14 EP_ST_ACK [10..10]  ============================================== */
typedef enum {
  USB_EP_EP14_EP_ST_ACK_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP14_EP_ST_ACK_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP14_EP_ST_ACK_Type;

/* =========================================================  EP15  ========================================================== */
/* ================================================  USB EP15 EP_DIR [0..1]  ================================================= */
typedef enum {
  USB_EP_EP15_EP_DIR_disable           = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP15_EP_DIR_out               = 1,     /*!< out : Out                                                                 */
  USB_EP_EP15_EP_DIR_in                = 2,     /*!< in : In                                                                   */
  USB_EP_EP15_EP_DIR_control           = 3,     /*!< control : This configures the endpoint to be a CONTROL pipe
                                                      accepting IN, OUT and SETUP packets.                                     */
} USB_EP_EP15_EP_DIR_Type;

/* ================================================  USB EP15 EP_BUF2 [3..3]  ================================================ */
typedef enum {
  USB_EP_EP15_EP_BUF2_disable          = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP15_EP_BUF2_enable           = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP15_EP_BUF2_Type;

/* ===============================================  USB EP15 EP_INT_EN [4..4]  =============================================== */
typedef enum {
  USB_EP_EP15_EP_INT_EN_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP15_EP_INT_EN_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP15_EP_INT_EN_Type;

/* ===============================================  USB EP15 EP_NAK_EN [5..5]  =============================================== */
typedef enum {
  USB_EP_EP15_EP_NAK_EN_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP15_EP_NAK_EN_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP15_EP_NAK_EN_Type;

/* =================================================  USB EP15 EP_DT [6..6]  ================================================= */
typedef enum {
  USB_EP_EP15_EP_DT_complete           = 0,     /*!< complete : No operation/complete                                          */
  USB_EP_EP15_EP_DT_start              = 1,     /*!< start : Start operation                                                   */
} USB_EP_EP15_EP_DT_Type;

/* ===============================================  USB EP15 EP_STALL [8..8]  ================================================ */
typedef enum {
  USB_EP_EP15_EP_STALL_notStalled      = 0,     /*!< notStalled : Not Stalled                                                  */
  USB_EP_EP15_EP_STALL_stalled         = 1,     /*!< stalled : Stalled                                                         */
} USB_EP_EP15_EP_STALL_Type;

/* ==============================================  USB EP15 EP_ST_STALL [9..9]  ============================================== */
typedef enum {
  USB_EP_EP15_EP_ST_STALL_disable      = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP15_EP_ST_STALL_enable       = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP15_EP_ST_STALL_Type;

/* ==============================================  USB EP15 EP_ST_ACK [10..10]  ============================================== */
typedef enum {
  USB_EP_EP15_EP_ST_ACK_disable        = 0,     /*!< disable : Disable                                                         */
  USB_EP_EP15_EP_ST_ACK_enable         = 1,     /*!< enable : Enable                                                           */
} USB_EP_EP15_EP_ST_ACK_Type;



/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
/* ==============================================  WDT CTRL INT_PERIOD [0..3]  =============================================== */
typedef enum {
  WDT_CTRL_INT_PERIOD_wdt2pow31        = 0,     /*!< wdt2pow31 : 2**31 clock cycles                                            */
  WDT_CTRL_INT_PERIOD_wdt2pow30        = 1,     /*!< wdt2pow30 : 2**30 clock cycles                                            */
  WDT_CTRL_INT_PERIOD_wdt2pow29        = 2,     /*!< wdt2pow29 : 2**29 clock cycles                                            */
  WDT_CTRL_INT_PERIOD_wdt2pow28        = 3,     /*!< wdt2pow28 : 2**28 clock cycles                                            */
  WDT_CTRL_INT_PERIOD_wdt2pow27        = 4,     /*!< wdt2pow27 : 2**27 clock cycles                                            */
  WDT_CTRL_INT_PERIOD_wdt2pow26        = 5,     /*!< wdt2pow26 : 2**26 clock cycles                                            */
  WDT_CTRL_INT_PERIOD_wdt2pow25        = 6,     /*!< wdt2pow25 : 2**25 clock cycles                                            */
  WDT_CTRL_INT_PERIOD_wdt2pow24        = 7,     /*!< wdt2pow24 : 2**24 clock cycles                                            */
  WDT_CTRL_INT_PERIOD_wdt2pow23        = 8,     /*!< wdt2pow23 : 2**23 clock cycles                                            */
  WDT_CTRL_INT_PERIOD_wdt2pow22        = 9,     /*!< wdt2pow22 : 2**22 clock cycles                                            */
  WDT_CTRL_INT_PERIOD_wdt2pow21        = 10,    /*!< wdt2pow21 : 2**21 clock cycles                                            */
  WDT_CTRL_INT_PERIOD_wdt2pow20        = 11,    /*!< wdt2pow20 : 2**20 clock cycles                                            */
  WDT_CTRL_INT_PERIOD_wdt2pow19        = 12,    /*!< wdt2pow19 : 2**19 clock cycles                                            */
  WDT_CTRL_INT_PERIOD_wdt2pow18        = 13,    /*!< wdt2pow18 : 2**18 clock cycles                                            */
  WDT_CTRL_INT_PERIOD_wdt2pow17        = 14,    /*!< wdt2pow17 : 2**17 clock cycles                                            */
  WDT_CTRL_INT_PERIOD_wdt2pow16        = 15,    /*!< wdt2pow16 : 2**16 clock cycles                                            */
} WDT_CTRL_INT_PERIOD_Type;

/* ==============================================  WDT CTRL RST_PERIOD [4..7]  =============================================== */
typedef enum {
  WDT_CTRL_RST_PERIOD_wdt2pow31        = 0,     /*!< wdt2pow31 : 2**31 clock cycles                                            */
  WDT_CTRL_RST_PERIOD_wdt2pow30        = 1,     /*!< wdt2pow30 : 2**30 clock cycles                                            */
  WDT_CTRL_RST_PERIOD_wdt2pow29        = 2,     /*!< wdt2pow29 : 2**29 clock cycles                                            */
  WDT_CTRL_RST_PERIOD_wdt2pow28        = 3,     /*!< wdt2pow28 : 2**28 clock cycles                                            */
  WDT_CTRL_RST_PERIOD_wdt2pow27        = 4,     /*!< wdt2pow27 : 2**27 clock cycles                                            */
  WDT_CTRL_RST_PERIOD_wdt2pow26        = 5,     /*!< wdt2pow26 : 2**26 clock cycles                                            */
  WDT_CTRL_RST_PERIOD_wdt2pow25        = 6,     /*!< wdt2pow25 : 2**25 clock cycles                                            */
  WDT_CTRL_RST_PERIOD_wdt2pow24        = 7,     /*!< wdt2pow24 : 2**24 clock cycles                                            */
  WDT_CTRL_RST_PERIOD_wdt2pow23        = 8,     /*!< wdt2pow23 : 2**23 clock cycles                                            */
  WDT_CTRL_RST_PERIOD_wdt2pow22        = 9,     /*!< wdt2pow22 : 2**22 clock cycles                                            */
  WDT_CTRL_RST_PERIOD_wdt2pow21        = 10,    /*!< wdt2pow21 : 2**21 clock cycles                                            */
  WDT_CTRL_RST_PERIOD_wdt2pow20        = 11,    /*!< wdt2pow20 : 2**20 clock cycles                                            */
  WDT_CTRL_RST_PERIOD_wdt2pow19        = 12,    /*!< wdt2pow19 : 2**19 clock cycles                                            */
  WDT_CTRL_RST_PERIOD_wdt2pow18        = 13,    /*!< wdt2pow18 : 2**18 clock cycles                                            */
  WDT_CTRL_RST_PERIOD_wdt2pow17        = 14,    /*!< wdt2pow17 : 2**17 clock cycles                                            */
  WDT_CTRL_RST_PERIOD_wdt2pow16        = 15,    /*!< wdt2pow16 : 2**16 clock cycles                                            */
} WDT_CTRL_RST_PERIOD_Type;

/* ================================================  WDT CTRL WDT_EN [8..8]  ================================================= */
typedef enum {
  WDT_CTRL_WDT_EN_disable              = 0,     /*!< disable : Disable                                                         */
  WDT_CTRL_WDT_EN_enable               = 1,     /*!< enable : Enable                                                           */
} WDT_CTRL_WDT_EN_Type;

/* ===============================================  WDT CTRL INT_FLAG [9..9]  ================================================ */
typedef enum {
  WDT_CTRL_INT_FLAG_inactive           = 0,     /*!< inactive : No interrupt is pending.                                       */
  WDT_CTRL_INT_FLAG_pending            = 1,     /*!< pending : An interrupt is pending.                                        */
} WDT_CTRL_INT_FLAG_Type;

/* ===============================================  WDT CTRL INT_EN [10..10]  ================================================ */
typedef enum {
  WDT_CTRL_INT_EN_disable              = 0,     /*!< disable : Disable                                                         */
  WDT_CTRL_INT_EN_enable               = 1,     /*!< enable : Enable                                                           */
} WDT_CTRL_INT_EN_Type;

/* ===============================================  WDT CTRL RST_EN [11..11]  ================================================ */
typedef enum {
  WDT_CTRL_RST_EN_disable              = 0,     /*!< disable : Disable                                                         */
  WDT_CTRL_RST_EN_enable               = 1,     /*!< enable : Enable                                                           */
} WDT_CTRL_RST_EN_Type;

/* ==============================================  WDT CTRL RST_FLAG [31..31]  =============================================== */
typedef enum {
  WDT_CTRL_RST_FLAG_noEvent            = 0,     /*!< noEvent : The event has not occurred                                      */
  WDT_CTRL_RST_FLAG_occurred           = 1,     /*!< occurred : The event has occurred                                         */
} WDT_CTRL_RST_FLAG_Type;

/* ==========================================================  RST  ========================================================== */
/* ================================================  WDT RST WDT_RST [0..7]  ================================================= */
typedef enum {
  WDT_RST_WDT_RST_seq0                 = 165,   /*!< seq0 : The first value to be written to reset the WDT.                    */
  WDT_RST_WDT_RST_seq1                 = 90,    /*!< seq1 : The second value to be written to reset the WDT.                   */
} WDT_RST_WDT_RST_Type;



/* =========================================================================================================================== */
/* ================                                           CLCD                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CLK  ========================================================== */
/* ================================================  CLCD CLK DPOL [16..16]  ================================================= */
typedef enum {
  CLCD_CLK_DPOL_activeHi               = 0,     /*!< activeHi : activeHi                                                       */
  CLCD_CLK_DPOL_activeLo               = 1,     /*!< activeLo : activeLo                                                       */
} CLCD_CLK_DPOL_Type;

/* ================================================  CLCD CLK VPOL [17..17]  ================================================= */
typedef enum {
  CLCD_CLK_VPOL_activeHi               = 0,     /*!< activeHi : activeHi                                                       */
  CLCD_CLK_VPOL_activeLo               = 1,     /*!< activeLo : activeLo                                                       */
} CLCD_CLK_VPOL_Type;

/* ================================================  CLCD CLK HPOL [18..18]  ================================================= */
typedef enum {
  CLCD_CLK_HPOL_activeLo               = 0,     /*!< activeLo : activeLo                                                       */
  CLCD_CLK_HPOL_activeHi               = 1,     /*!< activeHi : activeHi                                                       */
} CLCD_CLK_HPOL_Type;

/* ================================================  CLCD CLK EDGE [19..19]  ================================================= */
typedef enum {
  CLCD_CLK_EDGE_posEdge                = 0,     /*!< posEdge : posEdge                                                         */
  CLCD_CLK_EDGE_negEdge                = 1,     /*!< negEdge : negEdge                                                         */
} CLCD_CLK_EDGE_Type;

/* ===============================================  CLCD CLK PASCLK [20..20]  ================================================ */
typedef enum {
  CLCD_CLK_PASCLK_alwaysActive         = 0,     /*!< alwaysActive : alwaysActive                                               */
  CLCD_CLK_PASCLK_activeOnData         = 1,     /*!< activeOnData : activeOnData                                               */
} CLCD_CLK_PASCLK_Type;

/* ========================================================  VTIM_0  ========================================================= */
/* ========================================================  VTIM_1  ========================================================= */
/* =========================================================  HTIM  ========================================================== */
/* =========================================================  CTRL  ========================================================== */
/* ================================================  CLCD CTRL LCDEN [0..0]  ================================================= */
typedef enum {
  CLCD_CTRL_LCDEN_disable              = 0,     /*!< disable : disable                                                         */
  CLCD_CTRL_LCDEN_enable               = 1,     /*!< enable : enable                                                           */
} CLCD_CTRL_LCDEN_Type;

/* ================================================  CLCD CTRL VISEL [1..2]  ================================================= */
typedef enum {
  CLCD_CTRL_VISEL_onVertSync           = 0,     /*!< onVertSync : VCI on start of vertical sync                                */
  CLCD_CTRL_VISEL_onVertBackPorch      = 1,     /*!< onVertBackPorch : VCI on start of vertical back porch                     */
  CLCD_CTRL_VISEL_onActiveVideo        = 2,     /*!< onActiveVideo : VCI on start of active video                              */
  CLCD_CTRL_VISEL_onVertFrontPorch     = 3,     /*!< onVertFrontPorch : VCI on start of vertical front porch                   */
} CLCD_CTRL_VISEL_Type;

/* ===============================================  CLCD CTRL DISPTYPE [4..7]  =============================================== */
typedef enum {
  CLCD_CTRL_DISPTYPE_stnColor8Bit      = 4,     /*!< stnColor8Bit : STN Color 8 Bit                                            */
  CLCD_CTRL_DISPTYPE_tft               = 8,     /*!< tft : TFT                                                                 */
} CLCD_CTRL_DISPTYPE_Type;

/* =================================================  CLCD CTRL BPP [8..10]  ================================================= */
typedef enum {
  CLCD_CTRL_BPP_bpp1                   = 0,     /*!< bpp1 : 1 bit per pixel                                                    */
  CLCD_CTRL_BPP_bpp2                   = 1,     /*!< bpp2 : 2 bits per pixel                                                   */
  CLCD_CTRL_BPP_bpp4                   = 2,     /*!< bpp4 : 4 bits per pixel                                                   */
  CLCD_CTRL_BPP_bpp8                   = 3,     /*!< bpp8 : 8 bits per pixel                                                   */
  CLCD_CTRL_BPP_bpp16                  = 4,     /*!< bpp16 : 16 bits per pixel                                                 */
  CLCD_CTRL_BPP_bpp24                  = 5,     /*!< bpp24 : 24 bits per pixel                                                 */
} CLCD_CTRL_BPP_Type;

/* ==============================================  CLCD CTRL MODE565 [11..11]  =============================================== */
typedef enum {
  CLCD_CTRL_MODE565_mode555            = 0,     /*!< mode555 : 5:5:5 Mode Select                                               */
  CLCD_CTRL_MODE565_mode565            = 1,     /*!< mode565 : 5:6:5 Mode Select ( available from B1)                          */
} CLCD_CTRL_MODE565_Type;

/* ===============================================  CLCD CTRL EMODE [12..13]  ================================================ */
typedef enum {
  CLCD_CTRL_EMODE_llbp                 = 0,     /*!< llbp : llbp                                                               */
  CLCD_CTRL_EMODE_bbbp                 = 1,     /*!< bbbp : bbbp                                                               */
  CLCD_CTRL_EMODE_lbbp                 = 2,     /*!< lbbp : lbbp                                                               */
  CLCD_CTRL_EMODE_RFU                  = 3,     /*!< RFU : Reserved. Do not use.                                               */
} CLCD_CTRL_EMODE_Type;

/* ================================================  CLCD CTRL C24 [15..15]  ================================================= */
typedef enum {
  CLCD_CTRL_C24_disable                = 0,     /*!< disable : disable                                                         */
  CLCD_CTRL_C24_enable                 = 1,     /*!< enable : enable                                                           */
} CLCD_CTRL_C24_Type;

/* ===============================================  CLCD CTRL BURST [19..20]  ================================================ */
typedef enum {
  CLCD_CTRL_BURST_words4               = 0,     /*!< words4 : FIFO burst size = 4 words                                        */
  CLCD_CTRL_BURST_words8               = 1,     /*!< words8 : FIFO burst size = 8 words                                        */
} CLCD_CTRL_BURST_Type;

/* ================================================  CLCD CTRL LPOL [21..21]  ================================================ */
typedef enum {
  CLCD_CTRL_LPOL_activeHi              = 0,     /*!< activeHi : activeHi                                                       */
  CLCD_CTRL_LPOL_activeLo              = 1,     /*!< activeLo : activeLo                                                       */
} CLCD_CTRL_LPOL_Type;

/* ================================================  CLCD CTRL PEN [22..22]  ================================================= */
typedef enum {
  CLCD_CTRL_PEN_disable                = 0,     /*!< disable : disable                                                         */
  CLCD_CTRL_PEN_enable                 = 1,     /*!< enable : enable                                                           */
} CLCD_CTRL_PEN_Type;

/* ========================================================  FRBUF_0  ======================================================== */
/* ========================================================  FRBUF_1  ======================================================== */
/* ========================================================  INT_EN  ========================================================= */
/* =========================================================  STAT  ========================================================== */
/* =================================================  CLCD STAT UFLO [0..0]  ================================================= */
typedef enum {
  CLCD_STAT_UFLO_flag_read_inactive    = 0,     /*!< inactive : No interrupt is pending.                                       */
  CLCD_STAT_UFLO_flag_read_pending     = 1,     /*!< pending : An interrupt is pending.                                        */
} CLCD_STAT_UFLO_flag_read_Type;

typedef enum {
  CLCD_STAT_UFLO_w1c_write_clear       = 1,     /*!< clear : clear                                                             */
} CLCD_STAT_UFLO_w1c_write_Type;

/* ================================================  CLCD STAT ADRRDY [1..1]  ================================================ */
typedef enum {
  CLCD_STAT_ADRRDY_flag_read_inactive  = 0,     /*!< inactive : No interrupt is pending.                                       */
  CLCD_STAT_ADRRDY_flag_read_pending   = 1,     /*!< pending : An interrupt is pending.                                        */
} CLCD_STAT_ADRRDY_flag_read_Type;

typedef enum {
  CLCD_STAT_ADRRDY_w1c_write_clear     = 1,     /*!< clear : clear                                                             */
} CLCD_STAT_ADRRDY_w1c_write_Type;

/* =================================================  CLCD STAT VCI [2..2]  ================================================== */
typedef enum {
  CLCD_STAT_VCI_flag_read_inactive     = 0,     /*!< inactive : No interrupt is pending.                                       */
  CLCD_STAT_VCI_flag_read_pending      = 1,     /*!< pending : An interrupt is pending.                                        */
} CLCD_STAT_VCI_flag_read_Type;

typedef enum {
  CLCD_STAT_VCI_w1c_write_clear        = 1,     /*!< clear : clear                                                             */
} CLCD_STAT_VCI_w1c_write_Type;

/* =================================================  CLCD STAT BERR [3..3]  ================================================= */
typedef enum {
  CLCD_STAT_BERR_flag_read_inactive    = 0,     /*!< inactive : No interrupt is pending.                                       */
  CLCD_STAT_BERR_flag_read_pending     = 1,     /*!< pending : An interrupt is pending.                                        */
} CLCD_STAT_BERR_flag_read_Type;

typedef enum {
  CLCD_STAT_BERR_w1c_write_clear       = 1,     /*!< clear : clear                                                             */
} CLCD_STAT_BERR_w1c_write_Type;

/* ===============================================  CLCD STAT LCDIDLE [8..8]  ================================================ */
typedef enum {
  CLCD_STAT_LCDIDLE_busy               = 0,     /*!< busy : Result not ready                                                   */
  CLCD_STAT_LCDIDLE_ready              = 1,     /*!< ready : Operation complete and result ready                               */
} CLCD_STAT_LCDIDLE_Type;

/* =======================================================  HV_PHASE  ======================================================== */
/* ======================================================  PALETTE_RAM  ====================================================== */

/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* MAX32550_H */


/** @} */ /* End of group MAX32550 */

/** @} */ /* End of group Maxim-Integrated */
